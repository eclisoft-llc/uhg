CREATE OR REPLACE PROCEDURE COMPACT.TB_CLM_CRR_CLM_ADJ_LOAD("STARTDATE" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
    declare result varchar;
    load_strt_ts timestamp;
    load_end_ts timestamp;
    ins_cnt number;
    updt_cnt number;
    unique_id varchar;
    begin
     SELECT UUID_STRING() into unique_id;
     SELECT CURRENT_TIMESTAMP() INTO load_strt_ts ;

CREATE OR REPLACE TEMPORARY TABLE COMPACT.TEMP_CRR_CLM_ADJ AS (SELECT
TO_CHAR(CLA.CLAIMID) AS CLM_AUD_NBR,
lpad(CLA.CLAIMLINENUM,3,''000'') AS CLM_AUD_LN_NBR,
TO_CHAR(COALESCE(ADJ.CRR_CLM_SRVC_SYS_ID,''-1'')) AS CRR_CLM_SRVC_SYS_ID,
COALESCE(TO_CHAR(APGR.PAYMENTDATE),'''') AS CLM_SRVC_PD_DT,
TO_CHAR(CLA.CLAIMID) AS CLM_ADJ_TO_CLM_AUD_NBR,
COALESCE(SRVC1.AMT_ALLW_AMT,0.00) AS AMT_ADJ_ALLW_AMT,
COALESCE(SRVC1.AMT_ALLW_DERIV_AMT,0.00) AS AMT_ADJ_ALLW_DERIV_AMT,
COALESCE(SRVC1.AMT_COB_AMT,0.00) AS AMT_ADJ_COB_AMT,
COALESCE(SRVC1.AMT_COINS_AMT,0.00) AS AMT_ADJ_COINS_AMT,
COALESCE(SRVC1.AMT_CONTR_AMT,0.00) AS AMT_ADJ_CONTR_AMT,
COALESCE(SRVC1.AMT_COPAY_AMT,0.00) AS AMT_ADJ_COPAY_AMT,
COALESCE(SRVC1.AMT_DED_AMT,0.00) AS AMT_ADJ_DED_AMT,
COALESCE(SRVC1.AMT_DSALLW_AMT,0.00) AS AMT_ADJ_DSALLW_AMT,
COALESCE(SRVC1.AMT_DSCNT_AMT,0.00) AS AMT_ADJ_DSCNT_AMT,
COALESCE(SRVC1.AMT_MBR_RESP_AMT,0.00) AS AMT_ADJ_MBR_RESP_AMT,
COALESCE(SRVC1.AMT_PD_AMT,0.00) AS AMT_ADJ_PD_AMT,
COALESCE(SRVC1.AMT_RSRV_AMT,0.00) AS AMT_ADJ_RSRV_AMT,
COALESCE(SRVC1.AMT_SBMT_AMT,0.00) AS AMT_ADJ_SBMT_AMT,
trunc(COALESCE(SRVC1.CLM_SRVC_UNIT_CNT,0)) AS CLM_ADJ_SRVC_UNIT_CNT,
TO_CHAR(APGR.CREATEDATETIME) AS SRC_REC_CRT_DTTM,
TO_CHAR(APGR.CHANGEDATETIME) AS SRC_REC_UPDT_DTTM,
APGR.REC_XTRCT_SRC_CD AS REC_XTRCT_SRC_CD,
APGR.REC_INPUT_SRC_CD AS REC_INPUT_SRC_CD,
TO_CHAR(APGR.BTCH_LOAD_DT) AS BTCH_LOAD_DT,
(CASE WHEN CLE.CLAIMEVENTTYPE = ''3'' THEN CLE.INTERNALADJUSTREASONCODE WHEN CLP.SVCLINESTATUS = ''X'' THEN CLP.USERCLAIMCANCELCODE WHEN CLI.SVCLINESTATUS = ''X'' THEN CLI.USERCLAIMCANCELCODE ELSE '''' END) AS ADJ_CD,
(CASE WHEN CLE.CLAIMEVENTTYPE = ''3'' THEN IARC.IARCCODEDISPLAY WHEN CLP.SVCLINESTATUS = ''X'' THEN UCCC.DESCRIPTION WHEN CLI.SVCLINESTATUS = ''X'' THEN UCCC1.DESCRIPTION ELSE '''' END) AS ADJ_DESC,
COALESCE(TO_CHAR(CLA.CANCELDATE),'''') AS CANCELDATE,
-(SRVC1.CLM_SRVC_UNIT_DERIV_CNT) as CLM_SRVC_UNIT_DERIV_CNT
FROM    COMPACT.CRR_APGENERATIONRESPONSE APGR
INNER JOIN COMPACT.CRR_APTRANSACTIONDETAIL APTD ON APGR.APTRANSACTIONID = APTD.APTRANSACTIONID AND APTD.IS_ACTIVE = ''Y'' AND APTD.CDC_FLAG <> ''D'' AND APTD.APTRANSACTIONDETAILTYPE <> ''02''
INNER JOIN COMPACT.CRR_APTRANSACTION APT ON APTD.APTRANSACTIONID = APT.APTRANSACTIONID AND APT.IS_ACTIVE = ''Y'' AND APT.CDC_FLAG <> ''D''
INNER JOIN COMPACT.CRR_CLAIMLINEADJUDICATION CLA ON APTD.CLAIMLINEADJUDICATIONID = CLA.CLAIMLINEADJUDICATIONID AND CLA.IS_ACTIVE = ''Y'' AND CLA.CDC_FLAG <> ''D''
INNER JOIN COMPACT.CRR_CLAIMEVENT CLE ON APT.CLAIMEVENTID = CLE.CLAIMEVENTID AND CLE.IS_ACTIVE = ''Y'' AND CLE.CDC_FLAG <> ''D''
INNER JOIN COMPACT.TB_CLM_CRR_CLM_SRVC SRVC1 ON SRVC1.CLM_AUD_NBR = TO_CHAR(CLA.CLAIMID) and SRVC1.CLM_AUD_LN_NBR=lpad(CLA.CLAIMLINENUM,3,''000'')
LEFT OUTER JOIN COMPACT.CRR_CLAIMLINEPROF CLP ON CLA.CLAIMID = CLP.CLAIMID AND CLA.CLAIMLINENUM = CLP.CLAIMLINENUM AND CLP.IS_ACTIVE = ''Y'' AND CLP.CDC_FLAG <> ''D''
LEFT OUTER JOIN COMPACT.CRR_CLAIMLINEINST CLI ON CLA.CLAIMID = CLI.CLAIMID and CLA.CLAIMLINENUM = CLI.CLAIMLINENUM AND CLI.IS_ACTIVE = ''Y'' AND CLI.CDC_FLAG <> ''D''
LEFT OUTER JOIN COMPACT.TB_CLM_CRR_CLM_SRVC SRVC ON SRVC.CLM_AUD_NBR = TO_CHAR(CLI.CLAIMID) AND SRVC.CLM_AUD_LN_NBR = lpad(CLI.CLAIMLINENUM,3,''000'')
LEFT OUTER JOIN COMPACT.TB_CLM_CRR_CLM_SRVC SRVC_B ON SRVC_B.CLM_AUD_NBR = TO_CHAR(CLP.CLAIMID) AND SRVC_B.CLM_AUD_LN_NBR = TO_CHAR(CLP.CLAIMLINENUM)
LEFT OUTER JOIN COMPACT.CRR_USERCLAIMCANCELCODE UCCC ON CLP.USERCLAIMCANCELCODE = UCCC.USERCLAIMCANCELCODE AND UCCC.IS_ACTIVE = ''Y'' AND UCCC.CDC_FLAG <> ''D''
LEFT OUTER JOIN COMPACT.CRR_USERCLAIMCANCELCODE UCCC1 ON CLI.USERCLAIMCANCELCODE = UCCC1.USERCLAIMCANCELCODE AND UCCC1.IS_ACTIVE = ''Y'' AND UCCC1.CDC_FLAG <> ''D''
LEFT OUTER JOIN COMPACT.CRR_INTERNALADJUSTREASONCODE IARC ON CLE.INTERNALADJUSTREASONCODE = IARC.INTERNALADJUSTREASONCODE AND IARC.IS_ACTIVE = ''Y'' AND IARC.CDC_FLAG <> ''D''
LEFT OUTER JOIN COMPACT.TB_CLM_CRR_CLM_ADJ ADJ ON SRVC1.CLM_AUD_NBR = ADJ.CLM_AUD_NBR and SRVC1.CLM_AUD_LN_NBR=ADJ.CLM_AUD_LN_NBR
WHERE    (APGR.BTCH_LOAD_DT>=DATE(:STARTDATE)
OR  APTD.BTCH_LOAD_DT>=DATE(:STARTDATE)
OR  APT.BTCH_LOAD_DT>=DATE(:STARTDATE))
AND
APGR.IS_ACTIVE = ''Y''
AND      APGR.CDC_FLAG <> ''D''
AND      APGR.OFFSETIND = 1
qualify row_number() OVER (PARTITION BY CLA.CLAIMID,CLA.CLAIMLINENUM ORDER BY CLA.CLAIMID,CLA.CLAIMLINENUM DESC) = 1);

CREATE OR REPLACE TRANSIENT TABLE COMPACT.TB_CLM_CRR_CLM_ADJ
AS
(
SELECT
case when CRR_CLM_SRVC_SYS_ID=''-1'' then CLM_AUD_NBR||''-''||CLM_AUD_LN_NBR else CRR_CLM_SRVC_SYS_ID end CRR_CLM_SRVC_SYS_ID,
CLM_AUD_NBR,
lpad(CLM_AUD_LN_NBR,3,''000'') CLM_AUD_LN_NBR,
CLM_SRVC_PD_DT,
CLM_ADJ_TO_CLM_AUD_NBR,
0-case when AMT_ADJ_ALLW_AMT > 9999999.99 Then 0 Else zeroifnull(AMT_ADJ_ALLW_AMT) end  AMT_ADJ_ALLW_AMT,
0-case when AMT_ADJ_ALLW_DERIV_AMT > 9999999.99 Then 0 Else zeroifnull(AMT_ADJ_ALLW_DERIV_AMT) end  AS AMT_ADJ_ALLW_DERIV_AMT,
0-case when AMT_ADJ_COB_AMT> 9999999.99 Then 0 Else zeroifnull(AMT_ADJ_COB_AMT) end  AS AMT_ADJ_COB_AMT,
0-case when AMT_ADJ_COINS_AMT> 9999999.99 Then 0 Else zeroifnull(AMT_ADJ_COINS_AMT) end AS AMT_ADJ_COINS_AMT,
0-case when AMT_ADJ_CONTR_AMT> 9999999.99 Then 0 Else zeroifnull(AMT_ADJ_CONTR_AMT) end  AS AMT_ADJ_CONTR_AMT,
0-case when AMT_ADJ_COPAY_AMT> 9999999.99 Then 0 Else zeroifnull(AMT_ADJ_COPAY_AMT) end AS AMT_ADJ_COPAY_AMT,
0-case when AMT_ADJ_DED_AMT> 9999999.99 Then 0 Else zeroifnull(AMT_ADJ_DED_AMT) end  AS AMT_ADJ_DED_AMT,
0-case when AMT_ADJ_DSALLW_AMT> 9999999.99 Then 0 Else zeroifnull(AMT_ADJ_DSALLW_AMT) end  AS AMT_ADJ_DSALLW_AMT,
0-case when AMT_ADJ_DSCNT_AMT> 9999999.99 Then 0 Else zeroifnull(AMT_ADJ_DSCNT_AMT) end  AS AMT_ADJ_DSCNT_AMT,
0-case when AMT_ADJ_MBR_RESP_AMT> 9999999.99 Then 0 Else zeroifnull(AMT_ADJ_MBR_RESP_AMT)end AS AMT_ADJ_MBR_RESP_AMT,
0-case when AMT_ADJ_PD_AMT> 9999999.99 Then 0 Else zeroifnull(AMT_ADJ_PD_AMT) end  AS AMT_ADJ_PD_AMT,
0-case when AMT_ADJ_RSRV_AMT> 9999999.99 Then 0 Else zeroifnull(AMT_ADJ_RSRV_AMT) end AS AMT_ADJ_RSRV_AMT,
0-case when AMT_ADJ_SBMT_AMT> 9999999.99 Then 0 Else zeroifnull(AMT_ADJ_SBMT_AMT) end AS AMT_ADJ_SBMT_AMT,
0-zeroifnull(CLM_ADJ_SRVC_UNIT_CNT) AS CLM_ADJ_SRVC_UNIT_CNT,
SRC_REC_CRT_DTTM,
SRC_REC_UPDT_DTTM,
REC_XTRCT_SRC_CD,
REC_INPUT_SRC_CD,
BTCH_LOAD_DT,
CLM_SRVC_UNIT_DERIV_CNT,-- CLM_ADJ_UNIT_DERIV_CNT,
ADJ_CD,
ADJ_DESC,
CANCELDATE CANCEL_DT
FROM COMPACT.TEMP_CRR_CLM_ADJ
);
SELECT COUNT(1) INTO ins_cnt FROM COMPACT.TB_CLM_CRR_CLM_ADJ;
 SELECT CURRENT_TIMESTAMP() INTO load_end_ts ;
 INSERT INTO ETL.DBA_PROCESS_LOG VALUES
 (:unique_id,''TB_CLM_CRR_CLM_ADJ'',''TB_CLM_CRR_CLM_ADJ'',''LOAD'',0,0,:load_strt_ts,:load_end_ts,
 CURRENT_TIMESTAMP,:ins_cnt,0,0) ;
 result:=''TB_CLM_CRR_CLM_ADJ refresh completed successfully'';
 return result;
 end;
  ';