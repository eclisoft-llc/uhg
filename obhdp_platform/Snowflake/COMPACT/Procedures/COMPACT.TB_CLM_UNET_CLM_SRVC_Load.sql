CREATE OR REPLACE PROCEDURE COMPACT.TB_CLM_UNET_CLM_SRVC_Load("STARTDATE" VARCHAR(16777216), "ENDDATE" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '

    declare result varchar;
    load_strt_ts timestamp;
    load_end_ts timestamp;
    ins_cnt number;
    updt_cnt number;
    unique_id varchar;
    begin
     SELECT UUID_STRING() into unique_id;
     SELECT CURRENT_TIMESTAMP() INTO load_strt_ts ;
CREATE OR REPLACE TEMPORARY TABLE ETL_GALA_UNET_CLAIM_STATISTICAL_SERVICE AS (SELECT   CURRENT_DATE as BTCH_LOAD_DT,
         UNET_CLAIM_STATISTICAL_SERVICE.UNET_CLM_SRVC_SYS_ID UNET_CLM_SRVC_SYS_ID,
         UNET_CLAIM_STATISTICAL_SERVICE.MBR_SYS_ID MBR_SYS_ID,
         UNET_CLAIM_STATISTICAL_SERVICE.CLM_AUD_NBR CLM_AUD_NBR,
         UNET_CLAIM_STATISTICAL_SERVICE.SYS_ENT_SEQ_NBR SYS_ENT_SEQ_NBR,
         UNET_CLAIM_STATISTICAL_SERVICE.SYS_ENT_DT SYS_ENT_DT,
         UNET_CLAIM_STATISTICAL_SERVICE.TRANS_CD TRANS_CD,
         UNET_CLAIM_STATISTICAL_SERVICE.CLM_DUP_KEY_BRK_NBR CLM_DUP_KEY_BRK_NBR,
         UNET_CLAIM_STATISTICAL_SERVICE.DTL_LN_NBR DTL_LN_NBR,
         UNET_CLAIM_STATISTICAL_SERVICE.UNET_CLM_HEAD_SYS_ID UNET_CLM_HEAD_SYS_ID,
         UNET_CLAIM_STATISTICAL_SERVICE.ADJD_DT ADJD_DT,
         UNET_CLAIM_STATISTICAL_SERVICE.ADJ_HCCC_CD ADJ_HCCC_CD,
         UNET_CLAIM_STATISTICAL_SERVICE.ASGN_ADJD_OFC_CD ASGN_ADJD_OFC_CD,
         UNET_CLAIM_STATISTICAL_SERVICE.BNK_DESG_CD BNK_DESG_CD,
         UNET_CLAIM_STATISTICAL_SERVICE.BEN_LVL_SYS_ID BEN_LVL_SYS_ID,
         UNET_CLAIM_STATISTICAL_SERVICE.CHRG_STS_CD CHRG_STS_CD,
         UNET_CLAIM_STATISTICAL_SERVICE.CLM_CLSS_CD CLM_CLSS_CD,
         UNET_CLAIM_STATISTICAL_SERVICE.CLM_LOC_CD CLM_LOC_CD,
         UNET_CLAIM_STATISTICAL_SERVICE.CLM_LVL_RSN_CD_SYS_ID CLM_LVL_RSN_CD_SYS_ID,
         UNET_CLAIM_STATISTICAL_SERVICE.CLM_PD_DT CLM_PD_DT,
         UNET_CLAIM_STATISTICAL_SERVICE.CLOS_CLM_IND CLOS_CLM_IND,
         UNET_CLAIM_STATISTICAL_SERVICE.COB_CML_PROC_TYP_CD COB_CML_PROC_TYP_CD,
         UNET_CLAIM_STATISTICAL_SERVICE.COB_MEDCR_PROC_TYP_CD COB_MEDCR_PROC_TYP_CD,
         UNET_CLAIM_STATISTICAL_SERVICE.COB_NON_DUP_EXPN_IND COB_NON_DUP_EXPN_IND,
         UNET_CLAIM_STATISTICAL_SERVICE.CPTATD_IPA_NBR CPTATD_IPA_NBR,
         UNET_CLAIM_STATISTICAL_SERVICE.CPTATN_FUND_CD CPTATN_FUND_CD,
         UNET_CLAIM_STATISTICAL_SERVICE.CPTATN_TYP_CD CPTATN_TYP_CD,
         UNET_CLAIM_STATISTICAL_SERVICE.CONT_MKT_IND CONT_MKT_IND,
         UNET_CLAIM_STATISTICAL_SERVICE.COS_HCCC_CD COS_HCCC_CD,
         UNET_CLAIM_STATISTICAL_SERVICE.CUST_SEG_NBR CUST_SEG_NBR,
         UNET_CLAIM_STATISTICAL_SERVICE.CUST_SEG_SYS_ID CUST_SEG_SYS_ID,
         UNET_CLAIM_STATISTICAL_SERVICE.CUST_SEG_ROW_EFF_DT CUST_SEG_ROW_EFF_DT,
         UNET_CLAIM_STATISTICAL_SERVICE.DEPN_NBR DEPN_NBR,
                                  UNET_CLAIM_STATISTICAL_SERVICE.DRFT_NBR DRFT_NBR,
                                  UNET_CLAIM_STATISTICAL_SERVICE.ENCTR_CD ENCTR_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.FNL_RSN_CD_SYS_ID FNL_RSN_CD_SYS_ID,
          UNET_CLAIM_STATISTICAL_SERVICE.FNL_RSN_LVL_CD FNL_RSN_LVL_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.FNL_RCNSD_RSN_CD_SYS_ID FNL_RCNSD_RSN_CD_SYS_ID,
          UNET_CLAIM_STATISTICAL_SERVICE.FNL_RCNSD_RSN_LVL_CD FNL_RCNSD_RSN_LVL_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.FST_SRVC_DT FST_SRVC_DT,
          UNET_CLAIM_STATISTICAL_SERVICE.LST_SRVC_DT LST_SRVC_DT,
          UNET_CLAIM_STATISTICAL_SERVICE.MAJ_MED_PCT MAJ_MED_PCT,
          UNET_CLAIM_STATISTICAL_SERVICE.OPT_OUT_IND OPT_OUT_IND,
          UNET_CLAIM_STATISTICAL_SERVICE.ORIG_ADJD_DT ORIG_ADJD_DT,
          UNET_CLAIM_STATISTICAL_SERVICE.ORIG_PD_DT ORIG_PD_DT,
          UNET_CLAIM_STATISTICAL_SERVICE.ORIG_PCT ORIG_PCT,
                                  UNET_CLAIM_STATISTICAL_SERVICE.ORIG_SRVC_LVL_RSN_CD_SYS_ID ORIG_SRVC_LVL_RSN_CD_SYS_ID,
          UNET_CLAIM_STATISTICAL_SERVICE.ORIG_SYS_ENT_SEQ_NBR ORIG_SYS_ENT_SEQ_NBR,
          UNET_CLAIM_STATISTICAL_SERVICE.OTHR_INS_CD OTHR_INS_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.OOP_INCR_AMT OOP_INCR_AMT,
          UNET_CLAIM_STATISTICAL_SERVICE.OVRIDE_CD OVRIDE_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.PARS_AUTH_NBR PARS_AUTH_NBR,
          UNET_CLAIM_STATISTICAL_SERVICE.PART_RCNSD_IND PART_RCNSD_IND,
          UNET_CLAIM_STATISTICAL_SERVICE.PAYE_ASGN_CD PAYE_ASGN_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.PL_OF_SRVC_SYS_ID PL_OF_SRVC_SYS_ID,
          UNET_CLAIM_STATISTICAL_SERVICE.POOL_LGR_CD POOL_LGR_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.POS_TRANS_IND POS_TRANS_IND,
          UNET_CLAIM_STATISTICAL_SERVICE.PST_DT PST_DT,
          UNET_CLAIM_STATISTICAL_SERVICE.PRS_FNL_RECOM_CD PRS_FNL_RECOM_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.PRS_INIT_DISP_CD PRS_INIT_DISP_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.PREF_PROV_CD PREF_PROV_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.PREF_PROV_IND PREF_PROV_IND,
          UNET_CLAIM_STATISTICAL_SERVICE.PREF_PROV_REIM_CD PREF_PROV_REIM_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.PREF_PROV_SCHED_NBR PREF_PROV_SCHED_NBR,
          UNET_CLAIM_STATISTICAL_SERVICE.PRI_PHYSN_IND PRI_PHYSN_IND,
                                  UNET_CLAIM_STATISTICAL_SERVICE.PROC_MOD_1_SYS_ID PROC_MOD_1_SYS_ID,
          UNET_CLAIM_STATISTICAL_SERVICE.PROC_RVNU_CD PROC_RVNU_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.PSA_SYS_ID PSA_SYS_ID,
          UNET_CLAIM_STATISTICAL_SERVICE.PSA_ROW_EFF_DT PSA_ROW_EFF_DT,
          UNET_CLAIM_STATISTICAL_SERVICE.PROV_APRV_REF_CD PROV_APRV_REF_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.PROV_COV_PHYSN_CD PROV_COV_PHYSN_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.PROV_CONTR_MKT_NBR PROV_CONTR_MKT_NBR,
          UNET_CLAIM_STATISTICAL_SERVICE.PROV_CONTR_MKT_ROW_EFF_DT PROV_CONTR_MKT_ROW_EFF_DT,
          UNET_CLAIM_STATISTICAL_SERVICE.PROV_LOC_MKT_NBR PROV_LOC_MKT_NBR,
          UNET_CLAIM_STATISTICAL_SERVICE.PROV_LOC_MKT_ROW_EFF_DT PROV_LOC_MKT_ROW_EFF_DT,
          UNET_CLAIM_STATISTICAL_SERVICE.PROV_MKT_TYP_CD PROV_MKT_TYP_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.PROV_PRTCP_STS_CD PROV_PRTCP_STS_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.PROV_SANCTION_IND PROV_SANCTION_IND,
          UNET_CLAIM_STATISTICAL_SERVICE.PROV_ST_ABBR_CD PROV_ST_ABBR_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.PROV_TIN PROV_TIN,
          UNET_CLAIM_STATISTICAL_SERVICE.PROV_TIN_PRFX_CD PROV_TIN_PRFX_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.PROV_TIN_SUFX_CD PROV_TIN_SUFX_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.PROV_ZIP_CD PROV_ZIP_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.PROV_ZIP_ROW_EFF_DT PROV_ZIP_ROW_EFF_DT,
          UNET_CLAIM_STATISTICAL_SERVICE.RAD_ANES_PTH_IND RAD_ANES_PTH_IND,
          UNET_CLAIM_STATISTICAL_SERVICE.RSTRC_PROV_CD RSTRC_PROV_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.RVNU_CD RVNU_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.RISK_SHR_ELIG_CD RISK_SHR_ELIG_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.NON_UHG_EE_IND NON_UHG_EE_IND,
          UNET_CLAIM_STATISTICAL_SERVICE.SRVC_CD_CHG_IND SRVC_CD_CHG_IND,
          UNET_CLAIM_STATISTICAL_SERVICE.SRVC_LVL_RSN_CD_SYS_ID SRVC_LVL_RSN_CD_SYS_ID,
          UNET_CLAIM_STATISTICAL_SERVICE.SRC_CPTATN_CD SRC_CPTATN_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.SRVC_TYP_MOD_GRP_CD SRVC_TYP_MOD_GRP_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.SRVC_PROV_CATGY_CD SRVC_PROV_CATGY_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.SRVC_PROV_IPA_NBR SRVC_PROV_IPA_NBR,
          UNET_CLAIM_STATISTICAL_SERVICE.SRVC_PROV_SYS_ID SRVC_PROV_SYS_ID,
          UNET_CLAIM_STATISTICAL_SERVICE.SRVC_PROV_ROW_EFF_DT SRVC_PROV_ROW_EFF_DT,
          UNET_CLAIM_STATISTICAL_SERVICE.SRC_CHRG_AMT SRC_CHRG_AMT,
          UNET_CLAIM_STATISTICAL_SERVICE.SRC_CONTR_AMT SRC_CONTR_AMT,
          UNET_CLAIM_STATISTICAL_SERVICE.SRC_DED_AMT SRC_DED_AMT,
          UNET_CLAIM_STATISTICAL_SERVICE.SRC_NOT_COV_AMT SRC_NOT_COV_AMT,
          UNET_CLAIM_STATISTICAL_SERVICE.SRC_PD_AMT SRC_PD_AMT,
          UNET_CLAIM_STATISTICAL_SERVICE.SRC_SYS_CD SRC_SYS_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.SRC_SYS_GRP_CD SRC_SYS_GRP_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.SBSCR_NBR SBSCR_NBR,
          UNET_CLAIM_STATISTICAL_SERVICE.SURCHRG_TAX_ELIG_IND SURCHRG_TAX_ELIG_IND,
           UNET_CLAIM_STATISTICAL_SERVICE.SURCHRG_TAX_STS_CD SURCHRG_TAX_STS_CD,
           UNET_CLAIM_STATISTICAL_SERVICE.TRANS_TYP_SYS_ID TRANS_TYP_SYS_ID,
           UNET_CLAIM_STATISTICAL_SERVICE.TOPS_DEPN_NBR TOPS_DEPN_NBR,
           UNET_CLAIM_STATISTICAL_SERVICE.TOPS_REL_CD TOPS_REL_CD,
           UNET_CLAIM_STATISTICAL_SERVICE.TOPS_PROV_TYP_CD TOPS_PROV_TYP_CD,
           UNET_CLAIM_STATISTICAL_SERVICE.TOPS_SBSCR_NBR TOPS_SBSCR_NBR,
           UNET_CLAIM_STATISTICAL_SERVICE.TRUE_PL_OF_SRVC_SYS_ID TRUE_PL_OF_SRVC_SYS_ID,
           UNET_CLAIM_STATISTICAL_SERVICE.SRVC_CURR_IND SRVC_CURR_IND,
          UNET_CLAIM_STATISTICAL_SERVICE.ADJ_SRVC_UNIT_CNT ADJ_SRVC_UNIT_CNT,
           UNET_CLAIM_STATISTICAL_SERVICE.ALLW_AMT ALLW_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.BEN_LMT_AMT BEN_LMT_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.BEN_PAY_AMT BEN_PAY_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.CALC_PD_AMT CALC_PD_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.COB_SV_AMT COB_SV_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.COB_RDUC_AMT COB_RDUC_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.COINS_AMT COINS_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.COV_AMT COV_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.CONTR_WTHLD_CNTNGY_RSRV_AMT CONTR_WTHLD_CNTNGY_RSRV_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.COPAY_AMT COPAY_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.DED_AMT DED_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.DSCNT_AMT DSCNT_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.DSCNT_TYP_CD DSCNT_TYP_CD,
           UNET_CLAIM_STATISTICAL_SERVICE.DUP_CHRG_AMT DUP_CHRG_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.ELIG_AMT ELIG_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.ENCTR_PRC_AMT ENCTR_PRC_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.LIAB_CHRG_AMT LIAB_CHRG_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.NET_PD_AMT NET_PD_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.NON_DUP_CHRG_AMT NON_DUP_CHRG_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.OPT_SRVC_CNT_IND OPT_SRVC_CNT_IND,
           UNET_CLAIM_STATISTICAL_SERVICE.PAY_RDUC_AMT PAY_RDUC_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.PHYSN_FINC_ALLW_AMT PHYSN_FINC_ALLW_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.PROV_SANCTION_AMT PROV_SANCTION_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.PROV_WTHLD_AMT PROV_WTHLD_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.RCNSD_RDUC_AMT RCNSD_RDUC_AMT,
            UNET_CLAIM_STATISTICAL_SERVICE.RDUC_AMT RDUC_AMT,
            UNET_CLAIM_STATISTICAL_SERVICE.SPCL_NEGOT_DSCNT_AMT SPCL_NEGOT_DSCNT_AMT,
            UNET_CLAIM_STATISTICAL_SERVICE.SBMT_CHRG_AMT SBMT_CHRG_AMT,
           UNET_CLAIM_STATISTICAL_SERVICE.SRVC_UNIT_CNT SRVC_UNIT_CNT,
            UNET_CLAIM_STATISTICAL_SERVICE.VST_CNT VST_CNT,
            UNET_CLAIM_STATISTICAL_SERVICE.PROC_MOD_2_SYS_ID PROC_MOD_2_SYS_ID,
            UNET_CLAIM_STATISTICAL_SERVICE.PROC_MOD_3_SYS_ID PROC_MOD_3_SYS_ID,
            UNET_CLAIM_STATISTICAL_SERVICE.PROC_MOD_4_SYS_ID PROC_MOD_4_SYS_ID,
            UNET_CLAIM_STATISTICAL_SERVICE.PROC_MOD_5_SYS_ID PROC_MOD_5_SYS_ID,
            UNET_CLAIM_STATISTICAL_SERVICE.LOAD_DT LOAD_DT,
            UNET_CLAIM_STATISTICAL_SERVICE.UPDT_DT UPDT_DT,
            UNET_CLAIM_STATISTICAL_SERVICE.ORIG_SRVC_MOD_CD ORIG_SRVC_MOD_CD,
            UNET_CLAIM_STATISTICAL_SERVICE.REIM_RSN_CD_SYS_ID REIM_RSN_CD_SYS_ID,
            UNET_CLAIM_STATISTICAL_SERVICE.MNNRP_REIM_CD MNNRP_REIM_CD,
                         UNET_CLAIM_STATISTICAL_SERVICE.NDC NDC,
                         UNET_CLAIM_STATISTICAL_SERVICE.BIL_PL_OF_SRVC_SYS_ID BIL_PL_OF_SRVC_SYS_ID,
                         UNET_CLAIM_STATISTICAL_SERVICE.FACL_CONTR_METH_CD FACL_CONTR_METH_CD,
                         UNET_CLAIM_STATISTICAL_SERVICE.NEW_FACL_CONTR_METH_IND NEW_FACL_CONTR_METH_IND,
                         UNET_CLAIM_STATISTICAL_SERVICE.ANES_PRORT_CD ANES_PRORT_CD,
                         UNET_CLAIM_STATISTICAL_SERVICE.ANES_MN_UNIT_CD ANES_MN_UNIT_CD,
                        UNET_CLAIM_STATISTICAL_SERVICE.OPTNT_SURG_COMPAT_CD OPTNT_SURG_COMPAT_CD,
                         UNET_CLAIM_STATISTICAL_SERVICE.ANES_PYMT_METH_CD ANES_PYMT_METH_CD,
                         UNET_CLAIM_STATISTICAL_SERVICE.TIER_1_BEN_IND TIER_1_BEN_IND,
                         UNET_CLAIM_STATISTICAL_SERVICE.THREE_TIER_BEN_CD THREE_TIER_BEN_CD,
                         UNET_CLAIM_STATISTICAL_SERVICE.SRC_BASE_DED_CD SRC_BASE_DED_CD,
                         UNET_CLAIM_STATISTICAL_SERVICE.SRC_MAJ_MED_DED_CD SRC_MAJ_MED_DED_CD,
                                                UNET_CLAIM_STATISTICAL_SERVICE.SRVC_PROV_NPI_NBR SRVC_PROV_NPI_NBR,
                         UNET_CLAIM_STATISTICAL_SERVICE.PYMT_PROC_MOD_2_SYS_ID PYMT_PROC_MOD_2_SYS_ID,
                         UNET_CLAIM_STATISTICAL_SERVICE.PYMT_PROC_MOD_3_SYS_ID PYMT_PROC_MOD_3_SYS_ID,
                         UNET_CLAIM_STATISTICAL_SERVICE.PYMT_PROC_MOD_4_SYS_ID PYMT_PROC_MOD_4_SYS_ID,
                         UNET_CLAIM_STATISTICAL_SERVICE.PYMT_PROC_MOD_5_SYS_ID PYMT_PROC_MOD_5_SYS_ID,
                                                UNET_CLAIM_STATISTICAL_SERVICE.CPTATN_FUND_CD as CPTATN_FUND_DERIV_CD,
                                                current_timestamp() as REC_CRT_DTTM,
                                                current_timestamp() as REC_UPDT_DTTM,
                                                ''GALA'' as REC_XTRCT_SRC_CD,
                                                ''GALA'' as REC_INPUT_SRC_CD,
                                UNET_CLAIM_STATISTICAL_SERVICE.DIAG_1_CD DIAG_1_CD,
         UNET_CLAIM_STATISTICAL_SERVICE.DIAG_2_CD DIAG_2_CD,
         UNET_CLAIM_STATISTICAL_SERVICE.DIAG_3_CD DIAG_3_CD,
         UNET_CLAIM_STATISTICAL_SERVICE.DIAG_4_CD DIAG_4_CD,
                                UNET_CLAIM_STATISTICAL_SERVICE.PROC_CD PROC_CD,
                                  UNET_CLAIM_HEADER.ICD_VER_CD,
          UNET_CLAIM_STATISTICAL_SERVICE.ORIG_SRVC_CD ORIG_SRVC_CD,
         UNET_CLAIM_STATISTICAL_SERVICE.BIL_PROC_CD BIL_PROC_CD,
         UNET_CLAIM_STATISTICAL_SERVICE.BIL_PROV_NPI_NBR BIL_PROV_NPI_NBR,
         UNET_CLAIM_STATISTICAL_SERVICE.REF_PROV_NPI_NBR REF_PROV_NPI_NBR,
         UNET_CLAIM_STATISTICAL_SERVICE.ATD_PROV_NPI_NBR ATD_PROV_NPI_NBR,
		 case when UNET_CLAIM_STATISTICAL_SERVICE.CPTATN_FUND_CD = ''W'' or UNET_CLAIM_STATISTICAL_SERVICE.CPTATN_FUND_CD = ''X'' or UNET_CLAIM_STATISTICAL_SERVICE.CPTATN_FUND_CD = ''Y'' or UNET_CLAIM_STATISTICAL_SERVICE.BEN_LVL_CAUS_CD = ''1'' or UNET_CLAIM_STATISTICAL_SERVICE.BEN_LVL_CAUS_CD = ''6''
		 then ''TRUE'' ELSE ''FALSE'' END AS FINC_LIAB,
                      GALA_PROC.PROC_MOD_CD PROC_MOD_CD,
                      GALA_PROC.PROC_MOD_GRP_CD PROC_MOD_GRP_CD,
                      (case when GALA_PROC.PROC_MOD_SYS_ID IS NULL Then 0 Else 1 End) AS PROC_REC_EXISTS,
                      GALA_POS.AMA_PL_OF_SRVC_CD AMA_PL_OF_SRVC_CD,
                      GALA_POS.UNET_PL_OF_SRVC_CD UNET_PL_OF_SRVC_CD,
                     (case when GALA_POS.PL_OF_SRVC_SYS_ID IS NULL Then 0 Else 1 End) AS POS_REC_EXISTS,
                                  (Case When (GALA_PROC2.PROC_MOD_CD is null or Trim(coalesce(GALA_PROC2.PROC_MOD_GRP_CD,'''')) =''UN'') Then '''' Else coalesce(GALA_PROC2.PROC_MOD_CD, '''') End) as PROC_MOD_2_CD,
                                  (Case When (GALA_PROC3.PROC_MOD_CD is null or Trim(coalesce(GALA_PROC3.PROC_MOD_GRP_CD,'''')) =''UN'') Then '''' Else coalesce(GALA_PROC3.PROC_MOD_CD, '''') End) as PROC_MOD_3_CD,
                                  (Case When (GALA_PROC4.PROC_MOD_CD is null or Trim(coalesce(GALA_PROC4.PROC_MOD_GRP_CD,'''')) =''UN'') Then '''' Else coalesce(GALA_PROC4.PROC_MOD_CD, '''') End) as PROC_MOD_4_CD,
                                   ZIP.ST_ABBR_CD as ZIP_ST_ABBR_CD,
                                         ZIP.CTY_NM CTY_NM,
                                                                               CAST(GALA_PROV.MPIN AS VARCHAR) as GALA_PROV_MPIN,
                                                                GALA_PROC.UPDT_DT as GALA_PROC_UPDT_DT,
                                                                GALA_POS.UPDT_DT as GALA_POS_UPDT_DT,
                                                                ZIP.UPDT_DT as ZIP_UPDT_DT,
                --             UNET_CLAIM_STATISTICAL_SERVICE.OPT_OUT_IND OPT_OUT_IND,
     --    UNET_CLAIM_STATISTICAL_SERVICE.ORIG_ADJD_DT ORIG_ADJD_DT,
     --    UNET_CLAIM_STATISTICAL_SERVICE.ORIG_PD_DT ORIG_PD_DT,
      --   UNET_CLAIM_STATISTICAL_SERVICE.ORIG_PCT ORIG_PCT,
       --  GRP_STRUCT.SITUS_ST_ABBR_CD SITUS_ST_ABBR_CD,
                                -- trim(ADJ_OFC.ADJD_OFC_CD) AS ADJD_OFC_CD,
  -- trim(ADJ_OFC.ADJD_OFC_TXT) AS ADJD_OFC_TXT,
   -- trim(ORIG_CD.CLM_ORIG_DESC) AS CLM_ORIG_DESC,
   -- GRP_STRUCT.UPDT_DT  as GRP_STRUCT_UPDT_DT,
           --     ORIG_CD.UPDT_DT  as ORIG_CD_UPDT_DT,
                                --   ADJ_OFC.UPDT_DT as ADJ_OFC_UPDT_DT,
row_number() OVER (PARTITION BY UNET_CLAIM_STATISTICAL_SERVICE.UNET_CLM_SRVC_SYS_ID,UNET_CLAIM_STATISTICAL_SERVICE.MBR_SYS_ID ORDER BY UNET_CLAIM_STATISTICAL_SERVICE.UNET_CLM_SRVC_SYS_ID,UNET_CLAIM_STATISTICAL_SERVICE.MBR_SYS_ID DESC) as rownum
FROM     COMPACT.UNET_UNET_CLAIM_HEADER UNET_CLAIM_HEADER
inner join          COMPACT.UNET_UNET_CLAIM_STATISTICAL_SERVICE UNET_CLAIM_STATISTICAL_SERVICE
on    UNET_CLAIM_HEADER.UNET_CLM_HEAD_SYS_ID = UNET_CLAIM_STATISTICAL_SERVICE.UNET_CLM_HEAD_SYS_ID
AND      UNET_CLAIM_HEADER.MBR_SYS_ID = UNET_CLAIM_STATISTICAL_SERVICE.MBR_SYS_ID
LEFT OUTER JOIN COMPACT.UNET_CUSTOMER_SEGMENT_GROUP_STRUCTURE GRP_STRUCT
on GRP_STRUCT.CUST_SEG_SYS_ID = UNET_CLAIM_HEADER.CUST_SEG_SYS_ID
and GRP_STRUCT.PLN_VAR_SUBDIV_CD = UNET_CLAIM_HEADER.PLN_VAR_SUBDIV_CD
and GRP_STRUCT.PRDCT_CD = UNET_CLAIM_HEADER.PRDCT_CD
and GRP_STRUCT.RPT_CD_BR_CD = UNET_CLAIM_HEADER.RPT_CD_BR_CD
and UNET_CLAIM_HEADER.ERLY_SRVC_DT between GRP_STRUCT.CUST_SEG_GRP_STRCT_ROW_EFF_DT and GRP_STRUCT.CUST_SEG_GRP_STRCT_ROW_END_DT
LEFT OUTER JOIN COMPACT.UNET_ADJUDICATION_OFFICE  ADJ_OFC
ON (ADJ_OFC.ADJD_OFC_SYS_ID=UNET_CLAIM_HEADER.PROC_ADJD_OFC_SYS_ID)
LEFT OUTER JOIN COMPACT.UNET_CLAIM_ORIGINATION_CODE  ORIG_CD
ON (ORIG_CD.CLM_ORIG_CD = UNET_CLAIM_HEADER.CLM_ORIG_CD)
LEFT OUTER JOIN COMPACT.UNET_PROCEDURE_MODIFIER_CODE GALA_PROC
on (UNET_CLAIM_STATISTICAL_SERVICE.PROC_MOD_1_SYS_ID = GALA_PROC.PROC_MOD_SYS_ID)
LEFT OUTER JOIN COMPACT.UNET_PROCEDURE_MODIFIER_CODE GALA_PROC2
on (UNET_CLAIM_STATISTICAL_SERVICE.PROC_MOD_2_SYS_ID = GALA_PROC2.PROC_MOD_SYS_ID)
LEFT OUTER JOIN COMPACT.UNET_PROCEDURE_MODIFIER_CODE GALA_PROC3
on (UNET_CLAIM_STATISTICAL_SERVICE.PROC_MOD_3_SYS_ID = GALA_PROC3.PROC_MOD_SYS_ID )
LEFT OUTER JOIN COMPACT.UNET_PROCEDURE_MODIFIER_CODE GALA_PROC4
on (UNET_CLAIM_STATISTICAL_SERVICE.PROC_MOD_4_SYS_ID = GALA_PROC4.PROC_MOD_SYS_ID)
LEFT OUTER JOIN COMPACT.UNET_PLACE_OF_SERVICE_CODE GALA_POS
on (UNET_CLAIM_STATISTICAL_SERVICE.BIL_PL_OF_SRVC_SYS_ID = GALA_POS.PL_OF_SRVC_SYS_ID)
LEFT OUTER JOIN COMPACT.UNET_ZIP ZIP ON (UNET_CLAIM_STATISTICAL_SERVICE.PROV_ZIP_CD=ZIP.ZIP_CD AND UNET_CLAIM_STATISTICAL_SERVICE.PROV_ZIP_ROW_EFF_DT=ZIP.ZIP_ROW_EFF_DT)
LEFT OUTER JOIN COMPACT.UNET_PROVIDER GALA_PROV ON ( GALA_PROV.PROV_SYS_ID = UNET_CLAIM_STATISTICAL_SERVICE.SRVC_PROV_SYS_ID AND GALA_PROV.PROV_ROW_EFF_DT = UNET_CLAIM_STATISTICAL_SERVICE.SRVC_PROV_ROW_EFF_DT)
where    UNET_CLAIM_STATISTICAL_SERVICE.UPDT_DT >= DATE(:STARTDATE)
AND      UNET_CLAIM_STATISTICAL_SERVICE.UPDT_DT < DATE(:ENDDATE)
AND      UNET_CLAIM_HEADER.ERLY_SRVC_DT BETWEEN ''2002-01-01'' and current_date()
--AND      ( UNET_CLAIM_STATISTICAL_SERVICE.CPTATN_FUND_CD IN (''W'',''X'',''Y'') OR  ( UNET_CLAIM_HEADER.OBLIG_CD = ''02''
--AND     UNET_CLAIM_HEADER.BEN_LVL_CAUS_CD IN (''1'',''6'')))
qualify rownum = 1);

CREATE or replace TEMPORARY TABLE TEMP_GALA_UNET_CLM_SRVC AS
(SELECT   Trim(coalesce(UNET_SVC.CLM_AUD_NBR,'''')) ||''-''|| UNET_SVC.MBR_SYS_ID ||''-''|| Trim(coalesce(UNET_SVC.DTL_LN_NBR,'''')) ||''-''|| UNET_SVC.SYS_ENT_DT ||''-''|| UNET_SVC.SYS_ENT_SEQ_NBR ||''-''|| Trim(coalesce(UNET_SVC.CLM_DUP_KEY_BRK_NBR,'''')) ||''-''|| Trim(coalesce(UNET_SVC.TRANS_CD,'''')) AS GALA_UNET_CLM_SRVC_UNIQ_ID,
         UNET_SVC.BTCH_LOAD_DT,
         UNET_CLM_SRVC_SYS_ID,
         UNET_SVC.MBR_SYS_ID,
         UNET_SVC.CLM_AUD_NBR,
         UNET_SVC.SYS_ENT_SEQ_NBR,
         UNET_SVC.SYS_ENT_DT,
         UNET_SVC.TRANS_CD,
         UNET_SVC.CLM_DUP_KEY_BRK_NBR,
         UNET_SVC.DTL_LN_NBR,
         UNET_SVC.ADJD_DT,
         UNET_SVC.ADJ_HCCC_CD,
         UNET_SVC.ASGN_ADJD_OFC_CD,
         UNET_SVC.BNK_DESG_CD,
         UNET_SVC.BEN_LVL_SYS_ID,
         UNET_SVC.CHRG_STS_CD,
         UNET_SVC.CLM_PD_DT,
         UNET_SVC.CPTATN_FUND_CD,
         UNET_SVC.CLM_LVL_RSN_CD_SYS_ID,
         UNET_SVC.CUST_SEG_NBR,
         UNET_SVC.DIAG_1_CD,
         UNET_SVC.DIAG_2_CD,
         UNET_SVC.DIAG_3_CD,
         UNET_SVC.DIAG_4_CD,
        UNET_SVC.DRFT_NBR,
         UNET_SVC.ENCTR_CD,
         UNET_SVC.FNL_RSN_CD_SYS_ID,
         UNET_SVC.FNL_RCNSD_RSN_CD_SYS_ID,
         UNET_SVC.FST_SRVC_DT,
         UNET_SVC.LST_SRVC_DT,
         UNET_SVC.OPT_OUT_IND,
         UNET_SVC.ORIG_ADJD_DT,
         UNET_SVC.ORIG_PD_DT,
         UNET_SVC.ORIG_SRVC_CD,
         UNET_SVC.PARS_AUTH_NBR,
         UNET_SVC.PL_OF_SRVC_SYS_ID,
         UNET_SVC.PST_DT,
         UNET_SVC.PREF_PROV_CD,
         UNET_SVC.PROC_CD,
         UNET_SVC.PROV_CONTR_MKT_NBR,
         UNET_SVC.PROV_PRTCP_STS_CD,
         UNET_SVC.PROV_TIN,
         UNET_SVC.PROV_TIN_PRFX_CD,
         UNET_SVC.PROV_TIN_SUFX_CD,
         UNET_SVC.PROV_ZIP_CD,
         UNET_SVC.NON_UHG_EE_IND,
         UNET_SVC.SRVC_PROV_CATGY_CD,
         UNET_SVC.SRVC_PROV_SYS_ID,
         UNET_SVC.SRVC_PROV_ROW_EFF_DT,
         UNET_SVC.SRC_CHRG_AMT,
         UNET_SVC.SRC_CONTR_AMT,
         UNET_SVC.SRC_NOT_COV_AMT,
         UNET_SVC.SRC_PD_AMT,
         UNET_SVC.SRC_SYS_CD,
         UNET_SVC.SRC_SYS_GRP_CD,
         UNET_SVC.SRVC_CURR_IND,
         UNET_SVC.ADJ_SRVC_UNIT_CNT,
         UNET_SVC.ALLW_AMT,
         UNET_SVC.BEN_LMT_AMT,
         UNET_SVC.BEN_PAY_AMT,
         UNET_SVC.CALC_PD_AMT,
         UNET_SVC.COB_SV_AMT,
         UNET_SVC.COB_RDUC_AMT,
         UNET_SVC.COINS_AMT,
         UNET_SVC.COV_AMT,
         UNET_SVC.CONTR_WTHLD_CNTNGY_RSRV_AMT,
         UNET_SVC.COPAY_AMT,
         UNET_SVC.DED_AMT,
         UNET_SVC.DSCNT_AMT,
         UNET_SVC.DUP_CHRG_AMT,
         UNET_SVC.ELIG_AMT,
         UNET_SVC.ENCTR_PRC_AMT,
         UNET_SVC.LIAB_CHRG_AMT,
         UNET_SVC.NET_PD_AMT,
         UNET_SVC.NON_DUP_CHRG_AMT,
         UNET_SVC.OPT_SRVC_CNT_IND,
         UNET_SVC.OVRIDE_CD,
         UNET_SVC.PAY_RDUC_AMT,
         UNET_SVC.PHYSN_FINC_ALLW_AMT,
         UNET_SVC.PROV_SANCTION_AMT,
         UNET_SVC.PROV_WTHLD_AMT,
         UNET_SVC.RCNSD_RDUC_AMT,
         UNET_SVC.RDUC_AMT,
         UNET_SVC.SPCL_NEGOT_DSCNT_AMT,
         UNET_SVC.SBMT_CHRG_AMT,
         UNET_SVC.SRVC_UNIT_CNT,
         UNET_SVC.LOAD_DT,
         UNET_SVC.UPDT_DT,
         UNET_SVC.THREE_TIER_BEN_CD,
         UNET_SVC.CPTATN_FUND_DERIV_CD,
         UNET_SVC.PROC_RVNU_CD,
         UNET_SVC.RVNU_CD,
         UNET_SVC.SRVC_PROV_NPI_NBR,
         UNET_SVC.REC_CRT_DTTM,
         UNET_SVC.REC_XTRCT_SRC_CD,
         UNET_SVC.REC_INPUT_SRC_CD,
         (Case when date(CLM_PD_DT) >= ''2004-03-09'' And CPTATN_FUND_DERIV_CD <> ''W'' And CPTATN_FUND_DERIV_CD <> ''X'' And                         CPTATN_FUND_DERIV_CD <> ''Y'' Then 1 Else 0 end) as DROP_CAP_FUND_FLG,
         UNET_SVC.PAYE_ASGN_CD,
        UNET_SVC.ICD_VER_CD,
        UNET_SVC.DSCNT_TYP_CD,
        UNET_SVC.BIL_PROV_NPI_NBR AS CLM_SRC_PROV_CLM_BIL_NPI_ID,
        UNET_SVC.ATD_PROV_NPI_NBR AS CLM_SRC_PROV_CLM_ATD_NPI_ID,
        UNET_SVC.REF_PROV_NPI_NBR AS CLM_SRC_PROV_CLM_REF_NPI_ID,
        TRIM(UPPER(UNET_SVC.BIL_PROC_CD)) as CLM_SRVC_BIL_PROC_CD,
		FINC_LIAB
FROM    ETL_GALA_UNET_CLAIM_STATISTICAL_SERVICE UNET_SVC
WHERE    UNET_SVC.BTCH_LOAD_DT >= :STARTDATE
-- AND    UNET_SVC.MBR_SYS_ID<>0
qualify row_number() over (partition by GALA_UNET_CLM_SRVC_UNIQ_ID
                           order by GALA_UNET_CLM_SRVC_UNIQ_ID asc, BTCH_LOAD_DT desc) = 1 ) ;

CREATE or replace TEMPORARY TABLE TEMP_UNET_SRVC AS
(SELECT   trim(coalesce(UNET_SVC.CLM_AUD_NBR,'''')) ||''-''|| UNET_SVC.MBR_SYS_ID ||''-''|| Trim(coalesce(UNET_SVC.DTL_LN_NBR,'''')) ||''-''|| UNET_SVC.SYS_ENT_DT ||''-''|| UNET_SVC.SYS_ENT_SEQ_NBR ||''-''|| Trim(coalesce(UNET_SVC.CLM_DUP_KEY_BRK_NBR,'''')) ||''-''|| Trim(coalesce(UNET_SVC.TRANS_CD,'''')) AS STG_GALA_UNET_CLM_SRVC_UNIQ_ID,
         Trim(UNET_SVC.CLM_AUD_NBR) ||''-''|| UNET_SVC.MBR_SYS_ID ||''-''|| UNET_SVC.SYS_ENT_DT ||''-''|| UNET_SVC.SYS_ENT_SEQ_NBR ||''-''|| Trim(UNET_SVC.CLM_DUP_KEY_BRK_NBR) ||''-''|| Trim(UNET_SVC.TRANS_CD) AS STG_GALA_UNET_CLM_HEAD_UNIQ_ID,
         UNET_SVC.BTCH_LOAD_DT as SRVC_BTCH_LOAD_DT,
         UNET_SVC.CLM_AUD_NBR,
         UNET_SVC.DTL_LN_NBR,
         UNET_SVC.MBR_SYS_ID
FROM     ETL_GALA_UNET_CLAIM_STATISTICAL_SERVICE UNET_SVC
WHERE    UNET_SVC.BTCH_LOAD_DT >= :STARTDATE
AND      UNET_SVC.SYS_ENT_DT >= ''2002-01-01 00:00:00.000''
-- AND  UNET_SVC.MBR_SYS_ID<>0
) ;

CREATE or replace TEMPORARY TABLE TEMP_UNET_CLM_SRVC_ADJ AS
(SELECT   STG_GALA_UNET_CLM_SRVC_UNIQ_ID as GALA_UNET_CLM_SRVC_UNIQ_ID,
        SRVC_BTCH_LOAD_DT,
         coalesce(CLM_HEAD.UNET_CLM_HEAD_SYS_ID, -1) as HD_UNET_CLM_HEAD_SYS_ID,
		 UNET_SVC.CLM_AUD_NBR, UNET_SVC.DTL_LN_NBR, UNET_SVC.MBR_SYS_ID,
         CLM_HEAD.CLM_MBR_BTH_DT AS HD_CLM_MBR_BTH_DT,
         coalesce(trim(CLM_HEAD.CLM_FM_TYP_CD),'''') as HD_CLM_FM_TYP_CD,
        coalesce(trim(CLM_HEAD.CLM_CUST_SEG_NBR),'''') as HD_CLM_CUST_SEG_NBR,
        coalesce(trim(CLM_HEAD.CLM_MBR_DEPN_NBR),'''') as HD_CLM_MBR_DEPN_NBR,
        coalesce(trim(CLM_HEAD.CLM_MBR_REL_CD),'''') as HD_CLM_MBR_REL_CD,
        coalesce(trim(CLM_HEAD.CLM_MBR_SBSCR_NBR),'''') as HD_CLM_MBR_SBSCR_NBR,
--	trim(UNET_SVC.CLM_AUD_NBR) || ''-'' || trim(UNET_SVC.DTL_LN_NBR) || ''-'' || UNET_SVC.MBR_SYS_ID as SRVC_UNET_CLM_SRVC_SYS_ID,
        coalesce(CLM_SRVC1.CLM_ETL_DW_SYS_ID, ''-1'') as SRVC_UNET_CLM_SRVC_SYS_ID,
         coalesce(trim(CLM_SRVC1.CLM_TRANS_ADJ_CD),'''') as SRVC_CLM_ADJ_CD,
      --  trim(UNET_SVC.CLM_AUD_NBR) || ''-'' || trim(UNET_SVC.DTL_LN_NBR) || ''-'' || UNET_SVC.MBR_SYS_ID as ADJ_UNET_CLM_SRVC_SYS_ID
      coalesce(CLM_SRVC2.CLM_ETL_DW_SYS_ID, ''-1'') as ADJ_UNET_CLM_SRVC_SYS_ID
FROM     TEMP_UNET_SRVC UNET_SVC
        LEFT OUTER JOIN COMPACT.TB_CLM_UNET_CLM_HEAD CLM_HEAD ON ( Trim(STG_GALA_UNET_CLM_HEAD_UNIQ_ID) = Trim(CLM_HEAD.GALA_UNET_CLM_HEAD_UNIQ_ID) )
         LEFT OUTER JOIN FOUNDATION.TB_DIM_FCT_CLM_TRANS_UNET CLM_SRVC1 ON ( Trim(STG_GALA_UNET_CLM_SRVC_UNIQ_ID) = Trim(CLM_SRVC1.CLM_TRANS_SYS_ID) )
         LEFT OUTER JOIN FOUNDATION.TB_DIM_FCT_CLM_TRANS_UNET CLM_SRVC2 ON (trim(UNET_SVC.CLM_AUD_NBR) = trim(CLM_SRVC2.CLM_AUD_NBR) and trim(UNET_SVC.DTL_LN_NBR) = trim(CLM_SRVC2.CLM_AUD_LN_NBR) and UNET_SVC.MBR_SYS_ID = CLM_SRVC2.CLM_SRC_MBR_SYS_ID )
 qualify row_number() over (partition by UNET_SVC.STG_GALA_UNET_CLM_SRVC_UNIQ_ID
                           order by UNET_SVC.STG_GALA_UNET_CLM_HEAD_UNIQ_ID asc , SRVC_BTCH_LOAD_DT desc) = 1 ) ;


CREATE or replace TEMPORARY TABLE TEMP_UNET_SRVC_ADJ_12 AS
select *,
row_number() over (partition by CLM_AUD_NBR, DTL_LN_NBR, MBR_SYS_ID
order by GALA_UNET_CLM_SRVC_UNIQ_ID asc , SRVC_BTCH_LOAD_DT desc) as RRN_ADJ from TEMP_UNET_CLM_SRVC_ADJ ;

CREATE or replace TEMPORARY TABLE TEMP_UNET_SVC AS
(SELECT   UNET_SVC.BTCH_LOAD_DT AS BTCH_LOAD_DT,
         UNET_SVC.DIAG_1_CD,
         UNET_SVC.DIAG_2_CD,
         UNET_SVC.DIAG_3_CD,
         UNET_SVC.DIAG_4_CD,
         UNET_SVC.FST_SRVC_DT,
         UNET_SVC.PROC_MOD_1_SYS_ID,
         UNET_SVC.PROC_MOD_2_SYS_ID,
         UNET_SVC.PROC_MOD_3_SYS_ID,
         UNET_SVC.PROC_MOD_4_SYS_ID,
         UNET_SVC.BIL_PL_OF_SRVC_SYS_ID,
         UNET_SVC.GALA_PROC_UPDT_DT,
         UNET_SVC.PROC_MOD_CD,
         UNET_SVC.PROC_MOD_GRP_CD,
         UNET_SVC.PROC_REC_EXISTS,
         UNET_SVC.GALA_POS_UPDT_DT,
         UNET_SVC.AMA_PL_OF_SRVC_CD,
         UNET_SVC.UNET_PL_OF_SRVC_CD,
         UNET_SVC.POS_REC_EXISTS,
         UNET_SVC.PROC_MOD_2_CD,
         UNET_SVC.PROC_MOD_3_CD,
         UNET_SVC.PROC_MOD_4_CD,
         Trim(coalesce(UNET_SVC.CLM_AUD_NBR,'''')) ||''-''|| UNET_SVC.MBR_SYS_ID ||''-''|| Trim(coalesce(UNET_SVC.DTL_LN_NBR,'''')) ||''-''|| UNET_SVC.SYS_ENT_DT ||''-''|| UNET_SVC.SYS_ENT_SEQ_NBR ||''-''|| Trim(coalesce(UNET_SVC.CLM_DUP_KEY_BRK_NBR,'''')) ||''-''|| Trim(coalesce(UNET_SVC.TRANS_CD,'''')) AS GALA_UNET_CLM_SRVC_UNIQ_ID
FROM     ETL_GALA_UNET_CLAIM_STATISTICAL_SERVICE UNET_SVC
WHERE    UNET_SVC.BTCH_LOAD_DT >= :STARTDATE
AND      UNET_SVC.SYS_ENT_DT >= ''2002-01-01 00:00:00.000''
-- AND  UNET_SVC.MBR_SYS_ID<>0
) ;


CREATE or replace TEMPORARY TABLE TEMP_UNET_CLM_SRVC_LKPS AS
(SELECT   UNET_SVC.GALA_UNET_CLM_SRVC_UNIQ_ID as GALA_UNET_CLM_SRVC_UNIQ_ID,
         UNET_SVC.BTCH_LOAD_DT as BTCH_LOAD_DT,
         DIAG1.MH_SA_CD as LKP_MH_SA_CD_1,
         DIAG2.MH_SA_CD as LKP_MH_SA_CD_2,
         DIAG3.MH_SA_CD as LKP_MH_SA_CD_3,
         DIAG4.MH_SA_CD as LKP_MH_SA_CD_4,
         UNET_SVC.GALA_PROC_UPDT_DT as LKP_BTCH_LOAD_DT_GALA_PROC,
         UNET_SVC.PROC_MOD_CD as LKP_PROC_MOD_CD,
         UNET_SVC.PROC_MOD_GRP_CD as LKP_PROC_MOD_GRP_CD,
         UNET_SVC.PROC_REC_EXISTS as PROC_REC_EXISTS,
         UNET_SVC.GALA_POS_UPDT_DT as LKP_BTCH_LOAD_DT_GALA_POS,
         UNET_SVC.AMA_PL_OF_SRVC_CD as LKP_PL_OF_SRVC_AMA_CD,
         UNET_SVC.UNET_PL_OF_SRVC_CD as LKP_PL_OF_SRVC_CD,
         UNET_SVC. POS_REC_EXISTS as POS_REC_EXISTS,
         UNET_SVC.PROC_MOD_2_CD as CLM_SRVC_PROC_MOD_2_CD,
         UNET_SVC.PROC_MOD_3_CD as CLM_SRVC_PROC_MOD_3_CD,
         UNET_SVC.PROC_MOD_4_CD as CLM_SRVC_PROC_MOD_4_CD
FROM TEMP_UNET_SVC UNET_SVC
         LEFT OUTER JOIN COMPACT.TB_DIAG DIAG1 on (TRIM(UNET_SVC.DIAG_1_CD) = TRIM(DIAG1.DIAG_CD) and (UNET_SVC.FST_SRVC_DT between DIAG1.DIAG_EFF_DT and DIAG1.DIAG_EXPR_DT))
         LEFT OUTER JOIN COMPACT.TB_DIAG DIAG2 on (TRIM(UNET_SVC.DIAG_2_CD) = TRIM(DIAG2.DIAG_CD) and (UNET_SVC.FST_SRVC_DT between DIAG2.DIAG_EFF_DT and DIAG2.DIAG_EXPR_DT))
         LEFT OUTER JOIN COMPACT.TB_DIAG DIAG3 on (TRIM(UNET_SVC.DIAG_3_CD) = TRIM(DIAG3.DIAG_CD) and (UNET_SVC.FST_SRVC_DT between DIAG3.DIAG_EFF_DT and DIAG3.DIAG_EXPR_DT))
         LEFT OUTER JOIN COMPACT.TB_DIAG DIAG4 on (TRIM(UNET_SVC.DIAG_4_CD) = TRIM(DIAG4.DIAG_CD) and (UNET_SVC.FST_SRVC_DT between DIAG4.DIAG_EFF_DT and DIAG4.DIAG_EXPR_DT))
qualify row_number() over (partition by GALA_UNET_CLM_SRVC_UNIQ_ID
                           ORDER BY GALA_UNET_CLM_SRVC_UNIQ_ID ASC, UNET_SVC.BTCH_LOAD_DT DESC , GALA_PROC_UPDT_DT DESC,
GALA_POS_UPDT_DT DESC, PROC_MOD_CD DESC, PROC_MOD_2_CD DESC,
PROC_MOD_3_CD DESC, PROC_MOD_4_CD DESC) = 1
) ;


CREATE or replace TEMPORARY TABLE TEMP_UNET_SRVC_ZIP AS
(SELECT   Trim(UNET_SVC.CLM_AUD_NBR) ||''-''|| UNET_SVC.MBR_SYS_ID ||''-''|| Trim(UNET_SVC.DTL_LN_NBR) ||''-''|| UNET_SVC.SYS_ENT_DT ||''-''|| UNET_SVC.SYS_ENT_SEQ_NBR ||''-''|| Trim(UNET_SVC.CLM_DUP_KEY_BRK_NBR) ||''-''|| Trim(UNET_SVC.TRANS_CD) AS GALA_UNET_CLM_SRVC_UNIQ_ID,
          UNET_SVC.BTCH_LOAD_DT as SVC_BTCH_LOAD_DT,
          UNET_SVC.ZIP_UPDT_DT as ZIP_BTCH_LOAD_DT,
         trim( UNET_SVC.ZIP_ST_ABBR_CD) as LKP_ST_ABBR_CD,
         trim(UNET_SVC.CTY_NM) as lkp_CTY_NM
FROM     ETL_GALA_UNET_CLAIM_STATISTICAL_SERVICE UNET_SVC
WHERE    UNET_SVC.BTCH_LOAD_DT >= :STARTDATE
AND      UNET_SVC.SYS_ENT_DT >= ''2002-01-01 00:00:00.000''
-- AND  UNET_SVC.MBR_SYS_ID<>0
 qualify row_number() over (partition by (Trim(UNET_SVC.CLM_AUD_NBR) ||''-''|| UNET_SVC.MBR_SYS_ID ||''-''|| Trim(UNET_SVC.DTL_LN_NBR) ||''-''|| UNET_SVC.SYS_ENT_DT ||''-''|| UNET_SVC.SYS_ENT_SEQ_NBR ||''-''|| Trim(UNET_SVC.CLM_DUP_KEY_BRK_NBR) ||''-''|| Trim(UNET_SVC.TRANS_CD))
                           ORDER BY (Trim(UNET_SVC.CLM_AUD_NBR) ||''-''|| UNET_SVC.MBR_SYS_ID ||''-''|| Trim(UNET_SVC.DTL_LN_NBR) ||''-''|| UNET_SVC.SYS_ENT_DT ||''-''|| UNET_SVC.SYS_ENT_SEQ_NBR ||''-''|| Trim(UNET_SVC.CLM_DUP_KEY_BRK_NBR) ||''-''|| Trim(UNET_SVC.TRANS_CD)) ASC, UNET_SVC.BTCH_LOAD_DT DESC, ZIP_BTCH_LOAD_DT DESC) = 1 ) ;
CREATE or replace TEMPORARY TABLE TEMP_GALA_PROVIDER AS
(SELECT
   TO_CHAR(Trim(UNET_SVC.CLM_AUD_NBR) ||''-''|| UNET_SVC.MBR_SYS_ID ||''-''|| Trim(UNET_SVC.DTL_LN_NBR) ||''-''||
   UNET_SVC.SYS_ENT_DT ||''-''|| UNET_SVC.SYS_ENT_SEQ_NBR ||''-''||
   Trim(UNET_SVC.CLM_DUP_KEY_BRK_NBR) ||''-''|| Trim(UNET_SVC.TRANS_CD)) AS GALA_UNET_CLM_SRVC_UNIQ_ID,
    UNET_SVC.BTCH_LOAD_DT as SVC_BTCH_LOAD_DT,
    GALA_PROV.BTCH_LOAD_DT AS BTCH_LOAD_DT_PROV,
   Coalesce(GALA_PROV.MPIN, -1) AS LKP_MPIN,
   trim(Coalesce(PRV.PROV_FACL_TYP_DESC,'''')) AS PROV_FACL_TYP_DESC
FROM ETL_GALA_UNET_CLAIM_STATISTICAL_SERVICE  UNET_SVC
INNER JOIN compact.STG_GALA_PROVIDER  GALA_PROV  ON ( GALA_PROV.PROV_SYS_ID=UNET_SVC.SRVC_PROV_SYS_ID   AND GALA_PROV.PROV_ROW_EFF_DT=UNET_SVC.SRVC_PROV_ROW_EFF_DT )
LEFT OUTER JOIN compact.TB_PRV_PROVIDER_ALT PRV_ALT ON ( TRIM(GALA_PROV.MPIN) = replace(ltrim(replace(PRV_ALT.PROV_ALT_ID ,''0'','' '')),'' '',''0'') AND UNET_SVC.PROV_TIN=PRV_ALT.SRC_PROV_TAX_ID)
LEFT OUTER JOIN compact.TB_PRV_PROVIDER PRV ON (PRV_ALT.PROV_SYS_ID=PRV.PROV_SYS_ID)
WHERE UNET_SVC.BTCH_LOAD_DT >= :STARTDATE
  AND UNET_SVC.SYS_ENT_DT >= ''2002-01-01 00:00:00.000''
-- AND  UNET_SVC.MBR_SYS_ID<>0
 qualify row_number() over (partition by TO_CHAR(Trim(UNET_SVC.CLM_AUD_NBR) ||''-''|| UNET_SVC.MBR_SYS_ID ||''-''|| Trim(UNET_SVC.DTL_LN_NBR) ||''-''||
   UNET_SVC.SYS_ENT_DT ||''-''|| UNET_SVC.SYS_ENT_SEQ_NBR ||''-''||
   Trim(UNET_SVC.CLM_DUP_KEY_BRK_NBR) ||''-''|| Trim(UNET_SVC.TRANS_CD))
                          ORDER BY TO_CHAR(Trim(UNET_SVC.CLM_AUD_NBR) ||''-''|| UNET_SVC.MBR_SYS_ID ||''-''|| Trim(UNET_SVC.DTL_LN_NBR) ||''-''||
   UNET_SVC.SYS_ENT_DT ||''-''|| UNET_SVC.SYS_ENT_SEQ_NBR ||''-''||
   Trim(UNET_SVC.CLM_DUP_KEY_BRK_NBR) ||''-''|| Trim(UNET_SVC.TRANS_CD)) ASC , UNET_SVC.BTCH_LOAD_DT DESC, BTCH_LOAD_DT_PROV DESC) = 1 ) ;

   CREATE or replace TEMPORARY TABLE TEMP_UNET_SVC2 AS
(SELECT   Trim(UNET_SVC.CLM_AUD_NBR) ||''-''|| UNET_SVC.MBR_SYS_ID ||''-''|| Trim(UNET_SVC.DTL_LN_NBR) ||''-''|| UNET_SVC.SYS_ENT_DT ||''-''|| UNET_SVC.SYS_ENT_SEQ_NBR ||''-''|| Trim(UNET_SVC.CLM_DUP_KEY_BRK_NBR) ||''-''|| Trim(UNET_SVC.TRANS_CD) AS STG_GALA_UNET_CLM_SRVC_UNIQ_ID,
          UNET_SVC.BTCH_LOAD_DT as SVC_BTCH_LOAD_DT,
         Trim(UNET_SVC.PARS_AUTH_NBR) AS PARS_AUTH_NBR,
         ''U-'' || Trim(UNET_SVC.PARS_AUTH_NBR) AS AUTH_NBR
FROM     ETL_GALA_UNET_CLAIM_STATISTICAL_SERVICE UNET_SVC
WHERE    UNET_SVC.BTCH_LOAD_DT >= :STARTDATE
AND      UNET_SVC.SYS_ENT_DT >= ''2002-01-01 00:00:00.000''
-- AND  UNET_SVC.MBR_SYS_ID<>0
) ;


CREATE OR REPLACE TEMPORARY TABLE TEMP_AUT_AUTH AS
(SELECT   STG_GALA_UNET_CLM_SRVC_UNIQ_ID AS GALA_UNET_CLM_SRVC_UNIQ_ID,
         SVC_BTCH_LOAD_DT,
         AUTH.AUTH_NBR AS CLM_AUTH_NBR,
         DEV1.BTCH_LOAD_DT AS BTCH_LOAD_DT_DEV1,
         DEV2.BTCH_LOAD_DT AS BTCH_LOAD_DT_DEV2,
         coalesce(DEV1.AUTH_SYS_ID, DEV2.AUTH_SYS_ID) AS LKP_AUTH_SYS_ID,
         trim(AUTH.LVL_OF_SRVC_CD) AS LKP_AUTH_LVL_OF_SRVC_CD,
         trim(AUTH.LVL_OF_CARE_TXT) AS LKP_AUTH_LVL_OF_CARE_TXT,
         1 AS LKP_AUTH_REC_EXISTS
FROM     TEMP_UNET_SVC2 UNET_SVC
         INNER JOIN COMPACT.TB_AUT_AUTH AUTH ON TRIM(AUTH.AUTH_NBR) = TRIM(UNET_SVC.AUTH_NBR)
         LEFT OUTER JOIN COMPACT.TB_AUT_AUTH_DEV DEV1 ON UNET_SVC.AUTH_NBR = DEV1.AUTH_NBR And DEV1.REC_INPUT_SRC_CD = ''LINX''
         LEFT OUTER JOIN COMPACT.TB_AUT_AUTH_DEV DEV2 ON UNET_SVC.AUTH_NBR = DEV2.AUTH_NBR And DEV2.REC_INPUT_SRC_CD = ''CMM'' And DEV2.REC_DEL_FLG <> ''Y'' And DEV2.SRC_AUTH_CURR_STS_CD =''PASS''
 qualify row_number() over (partition by STG_GALA_UNET_CLM_SRVC_UNIQ_ID
  ORDER BY STG_GALA_UNET_CLM_SRVC_UNIQ_ID ASC, SVC_BTCH_LOAD_DT DESC, BTCH_LOAD_DT_DEV1 DESC, BTCH_LOAD_DT_DEV2 DESC) = 1 ) ;

CREATE OR REPLACE TEMPORARY TABLE TEMP_STG_GALA_UNET_CLM_SRVC_CPT AS
 ( SELECT   UNET_SVC.BTCH_LOAD_DT AS BTCH_LOAD_DT,
           Trim(UNET_SVC.CLM_AUD_NBR) ||''-''|| UNET_SVC.MBR_SYS_ID ||''-''|| Trim(UNET_SVC.DTL_LN_NBR) ||''-''|| UNET_SVC.SYS_ENT_DT ||''-''|| UNET_SVC.SYS_ENT_SEQ_NBR ||''-''|| Trim(UNET_SVC.CLM_DUP_KEY_BRK_NBR) ||''-''|| Trim(UNET_SVC.TRANS_CD) AS GALA_UNET_CLM_SRVC_UNIQ_ID,
           UNET_SVC.CLM_AUD_NBR CLM_AUD_NBR,
           UNET_SVC.DTL_LN_NBR DTL_LN_NBR,
           UNET_SVC.FST_SRVC_DT FROM_DT,
           UNET_SVC.LST_SRVC_DT TO_DT,
           Coalesce(PRV.PROV_SYS_ID,  PROV.PROV_SYS_ID,    PRAC_ALT.PRAC_SYS_ID,    -1) AS PROV_PRAC_SYS_ID,
           trim(Coalesce(PRV.PROV_REIM_CATGY_NM, PROV.PROV_REIMB_CATGY_NM, '''')) AS PROV_PRAC_REIMB_CATGY_NM,
           (CASE WHEN (LEN(TRIM(PROC_RVNU_CD)) > 0 AND LEN(TRIM(PROC_RVNU_CD)) =4 AND LEFT(TRIM(PROC_RVNU_CD),1) =''0'' AND HD.CLM_FM_TYP_CD =''1'') THEN RIGHT(TRIM(PROC_RVNU_CD),3)
                        WHEN LEN(TRIM(UNET_SVC.PROC_RVNU_CD)) > 0 THEN TRIM(UNET_SVC.PROC_RVNU_CD)
                        WHEN (LEN(TRIM(UNET_SVC.RVNU_CD)) > 0 ) THEN TRIM(UNET_SVC.RVNU_CD)
                        WHEN (LEN(TRIM(UNET_SVC.PROC_CD)) > 0 ) THEN TRIM(UNET_SVC.PROC_CD)
           END) AS PROC_CD,
           Coalesce(PRC1.PROC_TYP_CD, PRC2.PROC_TYP_CD, '''') AS PROC_TYP_CD,
           Coalesce(PRC1.PROC_CPT_TYP_CD, PRC2 .PROC_CPT_TYP_CD, ''NA'') AS PROC_CPT_TYP_CD,
           HD.CLM_FM_TYP_CD CLM_FM_TYP_CD,
           Coalesce(POS.POS_DERIV_CATGY, ''NA'') as POS_DERIV_CATGY
  FROM    ETL_GALA_UNET_CLAIM_STATISTICAL_SERVICE UNET_SVC
INNER JOIN COMPACT.TB_CLM_UNET_CLM_HEAD HD ON ( Trim(UNET_SVC.CLM_AUD_NBR) ||''-''|| UNET_SVC.MBR_SYS_ID ||''-''|| UNET_SVC.SYS_ENT_DT ||''-''|| UNET_SVC.SYS_ENT_SEQ_NBR ||''-''|| Trim(UNET_SVC.CLM_DUP_KEY_BRK_NBR) ||''-''|| Trim(UNET_SVC.TRANS_CD) = Trim(HD.GALA_UNET_CLM_HEAD_UNIQ_ID) )
            LEFT OUTER JOIN (
                         SELECT * FROM (
                                   SELECT PROV_SYS_ID, replace(ltrim(replace(PROV_ALT_ID ,''0'','' '')),'' '',''0'') PROV_ALT_ID, SRC_PROV_TAX_ID,
                                                  ROW_NUMBER() OVER(PARTITION BY replace(ltrim(replace(PROV_ALT_ID ,''0'','' '')),'' '',''0''), SRC_PROV_TAX_ID ORDER BY REC_UPDT_DTTM DESC,BTCH_LOAD_DT DESC,PROV_SYS_ID DESC) RN
                                   FROM COMPACT.TB_PRV_PROVIDER_ALT --- WHERE REC_INPUT_SRC_CD= ''UNET''
                                                 ) A
                                   WHERE RN=1
                                           ) PRV_ALT
                ON UNET_SVC.GALA_PROV_MPIN  = PRV_ALT.PROV_ALT_ID AND UNET_SVC.PROV_TIN=PRV_ALT.SRC_PROV_TAX_ID
LEFT OUTER JOIN COMPACT.TB_PRV_PROVIDER PRV ON (PRV_ALT.PROV_SYS_ID=PRV.PROV_SYS_ID)
 LEFT OUTER JOIN COMPACT.TB_PRV_PROV_ALT PROV_ALT on (UNET_SVC.GALA_PROV_MPIN = PROV_ALT.PROV_ALT_ID AND PROV_ALT.REC_INPUT_SRC_CD=''UNET'')
 LEFT OUTER JOIN COMPACT.TB_PRV_PROV PROV ON (PROV_ALT.PROV_SYS_ID=PROV.PROV_SYS_ID)
 LEFT OUTER JOIN COMPACT.TB_PRV_PRAC_ALT PRAC_ALT on (UNET_SVC.GALA_PROV_MPIN = PRAC_ALT.PRAC_ALT_ID AND PRAC_ALT.REC_INPUT_SRC_CD=''UNET'')
 LEFT OUTER JOIN COMPACT.TB_PROC PRC1 ON (trim(PRC1.PROC_CD) = PROC_RVNU_CD AND PRC1.CLM_FM_TYP_CD = (CASE WHEN LEN(TRIM(UNET_SVC.PROC_RVNU_CD)) > 0 THEN HD.CLM_FM_TYP_CD    WHEN LEN(TRIM(UNET_SVC.RVNU_CD)) > 0 THEN ''1''   WHEN LEN(TRIM(UNET_SVC.PROC_CD)) > 0 THEN ''2''   END))
LEFT OUTER JOIN COMPACT.TB_PROC PRC2 ON (trim(PRC2.PROC_CD) = PROC_RVNU_CD)
 LEFT OUTER JOIN COMPACT.TB_AMA_POS POS on POS.POS_ID = UNET_SVC.AMA_PL_OF_SRVC_CD
WHERE    UNET_SVC.BTCH_LOAD_DT >= :STARTDATE AND UNET_SVC.SYS_ENT_DT >= ''2002-01-01 00:00:00.000''
-- AND UNET_SVC.MBR_SYS_ID<>0
  qualify row_number() over (partition by Trim(UNET_SVC.CLM_AUD_NBR) ||''-''|| UNET_SVC.MBR_SYS_ID ||''-''|| Trim(UNET_SVC.DTL_LN_NBR) ||''-''|| UNET_SVC.SYS_ENT_DT ||''-''|| UNET_SVC.SYS_ENT_SEQ_NBR ||''-''|| Trim(UNET_SVC.CLM_DUP_KEY_BRK_NBR) ||''-''|| Trim(UNET_SVC.TRANS_CD)
   ORDER BY Trim(UNET_SVC.CLM_AUD_NBR) ||''-''|| UNET_SVC.MBR_SYS_ID ||''-''|| Trim(UNET_SVC.DTL_LN_NBR) ||''-''|| UNET_SVC.SYS_ENT_DT ||''-''|| UNET_SVC.SYS_ENT_SEQ_NBR ||''-''|| Trim(UNET_SVC.CLM_DUP_KEY_BRK_NBR) ||''-''|| Trim(UNET_SVC.TRANS_CD) ASC, UNET_SVC.BTCH_LOAD_DT DESC) = 1 ) ;


CREATE OR REPLACE TEMPORARY TABLE TEMP_extSTG_GALA_UNET_CLM_SRVC_PRMY AS
 ( SELECT
           Trim(UNET_SVC.CLM_AUD_NBR) ||''-''|| UNET_SVC.MBR_SYS_ID ||''-''|| Trim(UNET_SVC.DTL_LN_NBR) ||''-''|| UNET_SVC.SYS_ENT_DT ||''-''|| UNET_SVC.SYS_ENT_SEQ_NBR ||''-''|| Trim(UNET_SVC.CLM_DUP_KEY_BRK_NBR) ||''-''|| Trim(UNET_SVC.TRANS_CD) AS CLM_SRVC_UNIQ_ID,
           UNET_SVC.CLM_AUD_NBR,
           UNET_SVC.DTL_LN_NBR as CLM_AUD_LN_NBR ,
            UNET_SVC.FST_SRVC_DT AS FROM_DT,
            UNET_SVC.LST_SRVC_DT AS TO_DT,
           Coalesce(PRV.PROV_SYS_ID,  PROV.PROV_SYS_ID,    PRAC_ALT.PRAC_SYS_ID,    -1) AS PROV_SYS_ID,
           trim(Coalesce(PRV.PROV_REIM_CATGY_NM, PROV.PROV_REIMB_CATGY_NM, '''')) AS PROV_REIM_CATGY_NM,
           trim(Coalesce(PRV.PROV_FACL_TYP_DESC,'''')) AS PROV_FACL_TYP_DESC,
           (CASE WHEN (LEN(TRIM(PROC_RVNU_CD)) > 0 AND LEN(TRIM(PROC_RVNU_CD)) =4 AND LEFT(TRIM(PROC_RVNU_CD),1) =''0'' AND HD.CLM_FM_TYP_CD =''1'') THEN RIGHT(TRIM(PROC_RVNU_CD),3)
                        WHEN LEN(TRIM(UNET_SVC.PROC_RVNU_CD)) > 0 THEN TRIM(UNET_SVC.PROC_RVNU_CD)
                        WHEN (LEN(TRIM(UNET_SVC.RVNU_CD)) > 0 ) THEN TRIM(UNET_SVC.RVNU_CD)
                        WHEN (LEN(TRIM(UNET_SVC.PROC_CD)) > 0 ) THEN TRIM(UNET_SVC.PROC_CD)
           END) AS PROC_CD,
           Coalesce(PRC1.PROC_TYP_CD, PRC2.PROC_TYP_CD,  '''') AS PROC_TYP_CD,
           Coalesce(PRC1.PROC_CPT_TYP_CD, PRC2.PROC_CPT_TYP_CD, ''NA'') AS PROC_CPT_TYP_CD,
           HD.CLM_FM_TYP_CD,
           1 as  PRIMARY_CPT ,
           Coalesce(POS.POS_DERIV_CATGY, ''NA'') as POS_DERIV_CATGY
 FROM  ETL_GALA_UNET_CLAIM_STATISTICAL_SERVICE UNET_SVC
INNER JOIN COMPACT.TB_CLM_UNET_CLM_HEAD HD ON ( Trim(UNET_SVC.CLM_AUD_NBR) ||''-''|| UNET_SVC.MBR_SYS_ID ||''-''|| UNET_SVC.SYS_ENT_DT ||''-''|| UNET_SVC.SYS_ENT_SEQ_NBR ||''-''|| Trim(UNET_SVC.CLM_DUP_KEY_BRK_NBR) ||''-''|| Trim(UNET_SVC.TRANS_CD) = Trim(HD.GALA_UNET_CLM_HEAD_UNIQ_ID) )
-- LEFT OUTER JOIN COMPACT.TB_CLM_UNET_CLM_SRVC SRVC ON ( Trim(GALA_UNET_CLM_SRVC_UNIQ_ID) = Trim(SRVC.GALA_UNET_CLM_SRVC_UNIQ_ID) )
LEFT OUTER JOIN COMPACT.TB_PRV_PROVIDER_ALT PRV_ALT ON ( UNET_SVC.GALA_PROV_MPIN = replace(ltrim(replace(PRV_ALT.PROV_ALT_ID ,''0'','' '')),'' '',''0'') AND UNET_SVC.PROV_TIN=PRV_ALT.SRC_PROV_TAX_ID)
LEFT OUTER JOIN COMPACT.TB_PRV_PROVIDER PRV ON (PRV_ALT.PROV_SYS_ID=PRV.PROV_SYS_ID)
LEFT OUTER JOIN COMPACT.TB_PRV_PROV_ALT PROV_ALT on (UNET_SVC.GALA_PROV_MPIN = PROV_ALT.PROV_ALT_ID AND PROV_ALT.REC_INPUT_SRC_CD=''UNET'')
LEFT OUTER JOIN COMPACT.TB_PRV_PROV PROV ON (PROV_ALT.PROV_SYS_ID=PROV.PROV_SYS_ID)
LEFT OUTER JOIN COMPACT.TB_PRV_PRAC_ALT PRAC_ALT on (UNET_SVC.GALA_PROV_MPIN = PRAC_ALT.PRAC_ALT_ID AND PRAC_ALT.REC_INPUT_SRC_CD=''UNET'')
LEFT OUTER JOIN COMPACT.TB_PROC PRC1 ON (TRIM(PRC1.PROC_CD) = TRIM(PROC_RVNU_CD) AND TRIM(PRC1.CLM_FM_TYP_CD) = (CASE WHEN LEN(TRIM(UNET_SVC.PROC_RVNU_CD)) > 0 THEN HD.CLM_FM_TYP_CD    WHEN LEN(TRIM(UNET_SVC.RVNU_CD)) > 0 THEN ''1''   WHEN LEN(TRIM(UNET_SVC.PROC_CD)) > 0 THEN ''2''   END))
LEFT OUTER JOIN COMPACT.TB_PROC PRC2 ON (TRIM(PRC2.PROC_CD) = TRIM(PROC_RVNU_CD))
LEFT OUTER JOIN COMPACT.TB_AMA_POS POS on POS.POS_ID = UNET_SVC.AMA_PL_OF_SRVC_CD
WHERE   UNET_SVC.SYS_ENT_DT >= ''2002-01-01 00:00:00.000''
AND    PRC1.PROC_CPT_TYP_CD IN (''CPT2013'', ''EM'', ''EM/MD'')
AND    UNET_SVC.CLM_AUD_NBR || UNET_SVC.FST_SRVC_DT || UNET_SVC.LST_SRVC_DT  in
                   (SELECT STG.CLM_AUD_NBR || STG.FST_SRVC_DT || STG.LST_SRVC_DT
                    FROM  ETL_GALA_UNET_CLAIM_STATISTICAL_SERVICE STG
                    INNER JOIN COMPACT.TB_CLM_UNET_CLM_HEAD DW
                     ON  ( Trim(STG.CLM_AUD_NBR) ||''-''|| STG.MBR_SYS_ID ||''-''|| STG.SYS_ENT_DT ||''-''|| STG.SYS_ENT_SEQ_NBR ||''-''|| Trim(STG.CLM_DUP_KEY_BRK_NBR) ||''-''|| Trim(STG.TRANS_CD) = Trim(DW.GALA_UNET_CLM_HEAD_UNIQ_ID) )
                   WHERE  STG.BTCH_LOAD_DT >= :STARTDATE AND STG.SYS_ENT_DT >= ''2002-01-01 00:00:00.000''
                  )
 -- AND  UNET_SVC.MBR_SYS_ID<>0
  qualify row_number() over (partition by UNET_SVC.CLM_AUD_NBR,UNET_SVC.FST_SRVC_DT,UNET_SVC.LST_SRVC_DT
   ORDER BY UNET_SVC.CLM_AUD_NBR ASC, UNET_SVC.FST_SRVC_DT ASC, UNET_SVC.LST_SRVC_DT ASC) = 1) ;


CREATE OR REPLACE TEMPORARY TABLE TEMP_stClmProcCd_PRMY AS
( SELECT  CLM_AUD_NBR, FROM_DT, TO_DT,
  CASE WHEN (((( PROC_CPT_TYP_CD = ''CPT2012'' AND (PROC_CD = ''90801'' OR PROC_CD =''90806'')))  OR PROC_CPT_TYP_CD = ''EM/MD'')
                      AND (PROV_REIM_CATGY_NM = ''Medical MD'' OR PROV_REIM_CATGY_NM = ''MD'')) THEN PROC_CD||''MD''
                WHEN ((PROC_CPT_TYP_CD = ''AO'' OR PROC_CPT_TYP_CD = ''AO/MD'') AND PRIMARY_CPT = 1) THEN PROC_CD
                WHEN (PROC_CPT_TYP_CD = ''CPT2013'' OR (PROC_CPT_TYP_CD = ''AO'' AND PRIMARY_CPT != 1 ) OR
                                                (PROC_CPT_TYP_CD = ''AO/MD'' AND PRIMARY_CPT != 1 AND PROV_REIM_CATGY_NM != ''MD'')) THEN
                                                CASE WHEN POS_DERIV_CATGY  = ''Ancillary'' THEN
 (CASE WHEN CLM_FM_TYP_CD = ''1'' THEN
(case when (PROC_CD = ''90792'' and PROV_REIM_CATGY_NM = ''MD'') then PROC_CD||''MD'' ELSE PROC_CD||''NA'' END)||''FA''
ELSE (case when (PROC_CD = ''90792'' and PROV_REIM_CATGY_NM = ''MD'') then PROC_CD||''MD'' ELSE PROC_CD||''NA'' END)||''PR''
END )||''ANC''
WHEN POS_DERIV_CATGY  = ''Professional Services'' THEN
(CASE WHEN CLM_FM_TYP_CD = ''1'' THEN
(case when (PROC_CD = ''90792'' and PROV_REIM_CATGY_NM = ''MD'') then PROC_CD||''MD'' ELSE PROC_CD||''NA'' END)||''FA''
ELSE (case when (PROC_CD = ''90792'' and PROV_REIM_CATGY_NM = ''MD'') then PROC_CD||''MD'' ELSE PROC_CD||''NA'' END)||''PR''
END )||''PS''
WHEN POS_DERIV_CATGY  = ''Outpatient or Medication Services'' THEN
(CASE WHEN CLM_FM_TYP_CD = ''1'' THEN
(case when (PROC_CD = ''90792'' and PROV_REIM_CATGY_NM = ''MD'') then PROC_CD||''MD'' ELSE PROC_CD||''NA'' END)||''FA''
ELSE (case when (PROC_CD = ''90792'' and PROV_REIM_CATGY_NM = ''MD'') then PROC_CD||''MD'' ELSE PROC_CD||''NA'' END)||''PR''
END )||''OMS''
WHEN (POS_DERIV_CATGY  = ''NA'' || POS_DERIV_CATGY  = '''') THEN
(CASE WHEN CLM_FM_TYP_CD = ''1'' THEN
(case when (PROC_CD = ''90792'' and PROV_REIM_CATGY_NM = ''MD'') then PROC_CD||''MD'' ELSE PROC_CD||''NA'' END)||''FA''
ELSE (case when (PROC_CD = ''90792'' and PROV_REIM_CATGY_NM = ''MD'') then PROC_CD||''MD'' ELSE PROC_CD||''NA'' END)||''PR''
END )||''NA''
END
                WHEN (PROC_CPT_TYP_CD = ''AO/MD'' AND PRIMARY_CPT != 1 AND PROV_REIM_CATGY_NM = ''MD'' ) THEN PROC_CD||''MDNANA''
                ELSE PROC_CD
                END AS PROC_CD_CPT
                FROM TEMP_extSTG_GALA_UNET_CLM_SRVC_PRMY );


     CREATE or replace TEMPORARY TABLE TEMP_jn_CPTT AS
 (SELECT A.BTCH_LOAD_DT,A.GALA_UNET_CLM_SRVC_UNIQ_ID,A.CLM_AUD_NBR,A.DTL_LN_NBR,A.FROM_DT,A.TO_DT,A.PROV_PRAC_SYS_ID,A.PROV_PRAC_REIMB_CATGY_NM,A.PROC_CD,A.PROC_TYP_CD,
A.PROC_CPT_TYP_CD,A.CLM_FM_TYP_CD,A.POS_DERIV_CATGY,B.PROC_CD_CPT AS PROC_CD_CPT_PRMY
FROM  TEMP_STG_GALA_UNET_CLM_SRVC_CPT A LEFT OUTER JOIN TEMP_stClmProcCd_PRMY B ON
 A.CLM_AUD_NBR = B.CLM_AUD_NBR AND A.FROM_DT = B.FROM_DT AND A.TO_DT = B.TO_DT) ;
 create or replace TEMPORARY table temp_trans_MAP12 as
( select
 GALA_UNET_CLM_SRVC_UNIQ_ID AS CLM_SRVC_UNIQ_ID,
CLM_AUD_NBR, DTL_LN_NBR AS CLM_AUD_LN_NBR, FROM_DT, to_dt,
 case when PROC_CPT_TYP_CD = ''AO'' Or PROC_CPT_TYP_CD = ''AO/MD'' and Len(PROC_CD_CPT_PRMY) > 0 Then PROC_CD_CPT_PRMY  Else PROC_CD end as PROC_CD,
PROC_TYP_CD, PROC_CPT_TYP_CD, PROV_PRAC_SYS_ID as PROV_SYS_ID, POS_DERIV_CATGY, PROV_PRAC_REIMB_CATGY_NM as PROV_REIM_CATGY_NM, CLM_FM_TYP_CD,
case when Len(PROC_CD_CPT_PRMY) > 0 Then 1 Else 0 end as PRIMARY_CPT
from TEMP_jn_CPTT ) ;
CREATE OR REPLACE TEMPORARY TABLE TEMP_stClmProcCd12 AS
( SELECT CLM_SRVC_UNIQ_ID as GALA_UNET_CLM_SRVC_UNIQ_ID,
  PROC_TYP_CD, PROV_SYS_ID, PROC_CPT_TYP_CD,
  CASE WHEN (((( PROC_CPT_TYP_CD = ''CPT2012'' AND (PROC_CD = ''90801'' OR PROC_CD =''90806'')))  OR PROC_CPT_TYP_CD = ''EM/MD'')
                      AND (PROV_REIM_CATGY_NM = ''Medical MD'' OR PROV_REIM_CATGY_NM = ''MD'')) THEN PROC_CD||''MD''
                WHEN ((PROC_CPT_TYP_CD = ''AO'' OR PROC_CPT_TYP_CD = ''AO/MD'') AND PRIMARY_CPT = 1) THEN PROC_CD
                WHEN (PROC_CPT_TYP_CD = ''CPT2013'' OR (PROC_CPT_TYP_CD = ''AO'' AND PRIMARY_CPT != 1 ) OR
                                                (PROC_CPT_TYP_CD = ''AO/MD'' AND PRIMARY_CPT != 1 AND PROV_REIM_CATGY_NM != ''MD'')) THEN
                                                CASE WHEN POS_DERIV_CATGY  = ''Ancillary'' THEN
 (CASE WHEN CLM_FM_TYP_CD = ''1'' THEN
(case when (PROC_CD = ''90792'' and PROV_REIM_CATGY_NM = ''MD'') then PROC_CD||''MD'' ELSE PROC_CD||''NA'' END)||''FA''
ELSE (case when (PROC_CD = ''90792'' and PROV_REIM_CATGY_NM = ''MD'') then PROC_CD||''MD'' ELSE PROC_CD||''NA'' END)||''PR''
END )||''ANC''
WHEN POS_DERIV_CATGY  = ''Professional Services'' THEN
(CASE WHEN CLM_FM_TYP_CD = ''1'' THEN
(case when (PROC_CD = ''90792'' and PROV_REIM_CATGY_NM = ''MD'') then PROC_CD||''MD'' ELSE PROC_CD||''NA'' END)||''FA''
ELSE (case when (PROC_CD = ''90792'' and PROV_REIM_CATGY_NM = ''MD'') then PROC_CD||''MD'' ELSE PROC_CD||''NA'' END)||''PR''
END )||''PS''
WHEN POS_DERIV_CATGY  = ''Outpatient or Medication Services'' THEN
(CASE WHEN CLM_FM_TYP_CD = ''1'' THEN
(case when (PROC_CD = ''90792'' and PROV_REIM_CATGY_NM = ''MD'') then PROC_CD||''MD'' ELSE PROC_CD||''NA'' END)||''FA''
ELSE (case when (PROC_CD = ''90792'' and PROV_REIM_CATGY_NM = ''MD'') then PROC_CD||''MD'' ELSE PROC_CD||''NA'' END)||''PR''
END )||''OMS''
WHEN (POS_DERIV_CATGY  = ''NA'' || POS_DERIV_CATGY  = '''') THEN
(CASE WHEN CLM_FM_TYP_CD = ''1'' THEN
(case when (PROC_CD = ''90792'' and PROV_REIM_CATGY_NM = ''MD'') then PROC_CD||''MD'' ELSE PROC_CD||''NA'' END)||''FA''
ELSE (case when (PROC_CD = ''90792'' and PROV_REIM_CATGY_NM = ''MD'') then PROC_CD||''MD'' ELSE PROC_CD||''NA'' END)||''PR''
END )||''NA''
END
                WHEN (PROC_CPT_TYP_CD = ''AO/MD'' AND PRIMARY_CPT != 1 AND PROV_REIM_CATGY_NM = ''MD'' ) THEN PROC_CD||''MDNANA''
                ELSE PROC_CD
                END AS PROC_CD_CPT
                FROM temp_trans_MAP12 );


CREATE or replace TEMPORARY TABLE TEMP_MERGE AS
(SELECT
A.GALA_UNET_CLM_SRVC_UNIQ_ID,
A.BTCH_LOAD_DT,
A.UNET_CLM_SRVC_SYS_ID,
A.MBR_SYS_ID,
A.CLM_AUD_NBR,
A.SYS_ENT_SEQ_NBR,
A.SYS_ENT_DT,
A.TRANS_CD,
A.CLM_DUP_KEY_BRK_NBR,
A.DTL_LN_NBR,
A.ADJD_DT,
A.ADJ_HCCC_CD,
A.ASGN_ADJD_OFC_CD,
A.BNK_DESG_CD,
A.BEN_LVL_SYS_ID,
A.CHRG_STS_CD,
A.CLM_PD_DT,
A.CPTATN_FUND_CD,
A.CLM_LVL_RSN_CD_SYS_ID,
A.CUST_SEG_NBR,
A.DIAG_1_CD,
A.DIAG_2_CD,
A.DIAG_3_CD,
A.DIAG_4_CD,
A.DRFT_NBR,
A.ENCTR_CD,
A.FNL_RSN_CD_SYS_ID,
A.FNL_RCNSD_RSN_CD_SYS_ID,
A.FST_SRVC_DT,
A.LST_SRVC_DT,
A.OPT_OUT_IND,
A.ORIG_ADJD_DT,
A.ORIG_PD_DT,
A.ORIG_SRVC_CD,
A.PARS_AUTH_NBR,
A.PL_OF_SRVC_SYS_ID,
A.PST_DT,
A.PREF_PROV_CD,
A.PROC_CD,
A.PROV_CONTR_MKT_NBR,
A.PROV_PRTCP_STS_CD,
A.PROV_TIN,
A.PROV_TIN_PRFX_CD,
A.PROV_TIN_SUFX_CD,
A.PROV_ZIP_CD,
A.NON_UHG_EE_IND,
A.SRVC_PROV_CATGY_CD,
A.SRVC_PROV_SYS_ID,
A.SRVC_PROV_ROW_EFF_DT,
A.SRC_CHRG_AMT,
A.SRC_CONTR_AMT,
A.SRC_NOT_COV_AMT,
A.SRC_PD_AMT,
A.SRC_SYS_CD,
A.SRC_SYS_GRP_CD,
A.SRVC_CURR_IND,
A.ADJ_SRVC_UNIT_CNT,
A.ALLW_AMT,
A.BEN_LMT_AMT,
A.BEN_PAY_AMT,
A.CALC_PD_AMT,
A.COB_SV_AMT,
A.COB_RDUC_AMT,
A.COINS_AMT,
A.COV_AMT,
A.CONTR_WTHLD_CNTNGY_RSRV_AMT,
A.COPAY_AMT,
A.DED_AMT,
A.DSCNT_AMT,
A.DUP_CHRG_AMT,
A.ELIG_AMT,
A.ENCTR_PRC_AMT,
A.LIAB_CHRG_AMT,
A.NET_PD_AMT,
A.NON_DUP_CHRG_AMT,
A.OPT_SRVC_CNT_IND,
A.OVRIDE_CD,
A.PHYSN_FINC_ALLW_AMT,
A.PROV_SANCTION_AMT,
A.PROV_WTHLD_AMT,
A.PAY_RDUC_AMT,
A.RCNSD_RDUC_AMT,
A.RDUC_AMT,
A.SPCL_NEGOT_DSCNT_AMT,
A.SBMT_CHRG_AMT,
A.SRVC_UNIT_CNT,
A.LOAD_DT,
A.UPDT_DT,
A.THREE_TIER_BEN_CD,
A.CPTATN_FUND_DERIV_CD,
A.PROC_RVNU_CD,
A.RVNU_CD,
A.SRVC_PROV_NPI_NBR,
A.REC_CRT_DTTM,
A.REC_XTRCT_SRC_CD,
A.REC_INPUT_SRC_CD,
A.DROP_CAP_FUND_FLG,
B.HD_UNET_CLM_HEAD_SYS_ID,
B.HD_CLM_MBR_BTH_DT,
B.HD_CLM_FM_TYP_CD,
B.HD_CLM_CUST_SEG_NBR,
B.HD_CLM_MBR_DEPN_NBR,
B.HD_CLM_MBR_REL_CD,
B.HD_CLM_MBR_SBSCR_NBR,
B.SRVC_UNET_CLM_SRVC_SYS_ID,
B.SRVC_CLM_ADJ_CD,
B.ADJ_UNET_CLM_SRVC_SYS_ID,
C.LKP_MH_SA_CD_1,
C.LKP_MH_SA_CD_2,
C.LKP_MH_SA_CD_3,
C.LKP_MH_SA_CD_4,
C.LKP_PROC_MOD_CD,
C.LKP_PROC_MOD_GRP_CD,
C.PROC_REC_EXISTS,
C.LKP_PL_OF_SRVC_AMA_CD,
C.LKP_PL_OF_SRVC_CD,
C.POS_REC_EXISTS,
D.LKP_ST_ABBR_CD,
D.LKP_CTY_NM,
E.LKP_MPIN,
E.PROV_FACL_TYP_DESC,
F.CLM_AUTH_NBR,
F.LKP_AUTH_SYS_ID,
F.LKP_AUTH_LVL_OF_SRVC_CD,
F.LKP_AUTH_LVL_OF_CARE_TXT,
F.LKP_AUTH_REC_EXISTS,
A.PAYE_ASGN_CD,
A.ICD_VER_CD,
G.PROC_TYP_CD,
G.PROC_CPT_TYP_CD,
G.PROV_SYS_ID,
G.PROC_CD_CPT,
C.CLM_SRVC_PROC_MOD_2_CD,
C.CLM_SRVC_PROC_MOD_3_CD,
C.CLM_SRVC_PROC_MOD_4_CD,
A.DSCNT_TYP_CD,
A.CLM_SRC_PROV_CLM_BIL_NPI_ID,
A.CLM_SRC_PROV_CLM_ATD_NPI_ID,
A.CLM_SRC_PROV_CLM_REF_NPI_ID,
A.CLM_SRVC_BIL_PROC_CD,
A.FINC_LIAB,
B.RRN_ADJ
FROM TEMP_GALA_UNET_CLM_SRVC A
left outer join TEMP_UNET_SRVC_ADJ_12 B on A.GALA_UNET_CLM_SRVC_UNIQ_ID = B.GALA_UNET_CLM_SRVC_UNIQ_ID
left outer join TEMP_UNET_CLM_SRVC_LKPS C on A.GALA_UNET_CLM_SRVC_UNIQ_ID = C.GALA_UNET_CLM_SRVC_UNIQ_ID
left outer join TEMP_UNET_SRVC_ZIP D on A.GALA_UNET_CLM_SRVC_UNIQ_ID = D.GALA_UNET_CLM_SRVC_UNIQ_ID
left outer join TEMP_GALA_PROVIDER E on A.GALA_UNET_CLM_SRVC_UNIQ_ID = E.GALA_UNET_CLM_SRVC_UNIQ_ID
left outer join TEMP_AUT_AUTH F on A.GALA_UNET_CLM_SRVC_UNIQ_ID = F.GALA_UNET_CLM_SRVC_UNIQ_ID
left outer join TEMP_stClmProcCd12 G on A.GALA_UNET_CLM_SRVC_UNIQ_ID = G.GALA_UNET_CLM_SRVC_UNIQ_ID) ;


CREATE or replace TEMPORARY TABLE TEMP_TNSFRMR1 AS
(SELECT
GALA_UNET_CLM_SRVC_UNIQ_ID,
BTCH_LOAD_DT,
UNET_CLM_SRVC_SYS_ID,
MBR_SYS_ID,
CLM_AUD_NBR,
SYS_ENT_SEQ_NBR,
SYS_ENT_DT,
TRANS_CD,
CLM_DUP_KEY_BRK_NBR,
DTL_LN_NBR,
ADJD_DT,
ADJ_HCCC_CD,
ASGN_ADJD_OFC_CD,
BNK_DESG_CD,
BEN_LVL_SYS_ID,
CHRG_STS_CD,
CLM_PD_DT,
CPTATN_FUND_CD,
CLM_LVL_RSN_CD_SYS_ID,
CUST_SEG_NBR,
DIAG_1_CD,
DIAG_2_CD,
DIAG_3_CD,
DIAG_4_CD,
DRFT_NBR,
ENCTR_CD,
FNL_RSN_CD_SYS_ID,
FNL_RCNSD_RSN_CD_SYS_ID,
FST_SRVC_DT,
LST_SRVC_DT,
OPT_OUT_IND,
ORIG_ADJD_DT,
ORIG_PD_DT,
ORIG_SRVC_CD,
PARS_AUTH_NBR,
PL_OF_SRVC_SYS_ID,
PST_DT,
PREF_PROV_CD,
PROV_CONTR_MKT_NBR,
PROV_PRTCP_STS_CD,
PROV_TIN,
PROV_TIN_PRFX_CD,
PROV_TIN_SUFX_CD,
PROV_ZIP_CD,
NON_UHG_EE_IND,
SRVC_PROV_CATGY_CD,
SRVC_PROV_SYS_ID,
SRVC_PROV_ROW_EFF_DT,
SRC_CHRG_AMT,
SRC_CONTR_AMT,
SRC_NOT_COV_AMT,
SRC_PD_AMT,
SRC_SYS_CD,
SRC_SYS_GRP_CD,
SRVC_CURR_IND,
ADJ_SRVC_UNIT_CNT,
ALLW_AMT,
BEN_LMT_AMT,
BEN_PAY_AMT,
CALC_PD_AMT,
COB_SV_AMT,
COB_RDUC_AMT,
COINS_AMT,
COV_AMT,
CONTR_WTHLD_CNTNGY_RSRV_AMT,
COPAY_AMT,
DED_AMT,
DSCNT_AMT,
DUP_CHRG_AMT,
ELIG_AMT,
ENCTR_PRC_AMT,
LIAB_CHRG_AMT,
NET_PD_AMT,
NON_DUP_CHRG_AMT,
OPT_SRVC_CNT_IND,
OVRIDE_CD,
PAY_RDUC_AMT,
PHYSN_FINC_ALLW_AMT,
PROV_SANCTION_AMT,
PROV_WTHLD_AMT,
RCNSD_RDUC_AMT,
RDUC_AMT,
SPCL_NEGOT_DSCNT_AMT,
SBMT_CHRG_AMT,
SRVC_UNIT_CNT,
LOAD_DT,
UPDT_DT,
THREE_TIER_BEN_CD,
CPTATN_FUND_DERIV_CD,
SRVC_PROV_NPI_NBR,
REC_CRT_DTTM,
REC_XTRCT_SRC_CD,
REC_INPUT_SRC_CD,
LKP_PROC_MOD_CD,
LKP_PROC_MOD_GRP_CD,
PROC_REC_EXISTS,
LKP_PL_OF_SRVC_AMA_CD,
LKP_PL_OF_SRVC_CD,
POS_REC_EXISTS,
HD_CLM_MBR_BTH_DT AS LKP_CLM_MBR_BTH_DT,
HD_UNET_CLM_HEAD_SYS_ID AS LKP_UNET_CLM_HEAD_SYS_ID,
HD_CLM_CUST_SEG_NBR AS LKP_CLM_CUST_SEG_NBR,
HD_CLM_MBR_DEPN_NBR AS LKP_CLM_MBR_DEPN_NBR,
HD_CLM_MBR_REL_CD AS LKP_CLM_MBR_REL_CD,
HD_CLM_MBR_SBSCR_NBR AS LKP_CLM_MBR_SBSCR_NBR,
SRVC_UNET_CLM_SRVC_SYS_ID AS LKP_UNET_CLM_SRVC_SYS_ID_TGT,
case when SRVC_UNET_CLM_SRVC_SYS_ID >''-1'' Then SRVC_CLM_ADJ_CD when FST_SRVC_DT < ''2002-01-01'' Then ''A''
when (case when ADJ_UNET_CLM_SRVC_SYS_ID >''-1'' then 1 when RRN_ADJ <> 1 then 1 else 0 end) = 1 Then ''A''
Else ''''
end as CLM_ADJ_CD,
LKP_ST_ABBR_CD,
LKP_CTY_NM,
LKP_MPIN,
CLM_AUTH_NBR,
LKP_AUTH_SYS_ID,
LKP_AUTH_LVL_OF_SRVC_CD,
LKP_AUTH_LVL_OF_CARE_TXT,
LKP_AUTH_REC_EXISTS,
nvl(LKP_MH_SA_CD_1,'' '') || ''|'' || nvl(LKP_MH_SA_CD_2,'' '') || ''|'' ||  nvl(LKP_MH_SA_CD_3,'' '') || ''|'' || nvl(LKP_MH_SA_CD_4,'' '') || ''|'' as LKP_MH_SA_CD_ARRAY,
 case when HD_CLM_FM_TYP_CD = ''1'' Then
                (case when Len(case when Len(TRIM(PROC_RVNU_CD))>0 Then
(case when Len(TRIM(PROC_RVNU_CD))=4 And substr(TRIM(PROC_RVNU_CD),1,1) =''0'' And HD_CLM_FM_TYP_CD=''1''  Then substr(TRIM(PROC_RVNU_CD),2,3) Else TRIM(PROC_RVNU_CD) end)
when Len(trim(RVNU_CD))>0 Then trim(RVNU_CD)
when Len(trim(PROC_CD))>0 Then trim(PROC_CD)
Else TRIM(PROC_RVNU_CD) end) = 3 Then ''REV''
   when Len(case when Len(TRIM(PROC_RVNU_CD))>0 Then
(case when Len(Trim(PROC_RVNU_CD))=4 And substr(Trim(PROC_RVNU_CD),1,1) =''0'' And HD_CLM_FM_TYP_CD=''1''  Then substr(Trim(PROC_RVNU_CD),2,3) Else Trim(PROC_RVNU_CD) end )
when Len(trim(RVNU_CD))>0 Then trim(RVNU_CD)
when Len(trim(PROC_CD))>0 Then trim(PROC_CD)
Else Trim(PROC_RVNU_CD)end) = 4 And
    substr(case when Len(Trim(PROC_RVNU_CD))>0 Then
(case when Len(Trim(PROC_RVNU_CD))=4 And substr(Trim(PROC_RVNU_CD),1,1) =''0'' And HD_CLM_FM_TYP_CD=''1''  Then substr(Trim(PROC_RVNU_CD),2,3) Else Trim(PROC_RVNU_CD) end )
when Len(trim(RVNU_CD))>0 Then trim(RVNU_CD)
when Len(trim(PROC_CD))>0 Then trim(PROC_CD)
Else Trim(PROC_RVNU_CD) end ,1,1) = ''1'' Or substr(case when Len(Trim(PROC_RVNU_CD))>0 Then
(case when Len(Trim(PROC_RVNU_CD))=4 And substr(Trim(PROC_RVNU_CD),1,1) =''0'' And HD_CLM_FM_TYP_CD=''1''  Then substr(Trim(PROC_RVNU_CD),2,3) Else Trim(PROC_RVNU_CD) end )
when Len(trim(RVNU_CD))>0 Then trim(RVNU_CD)
when Len(trim(PROC_CD))>0 Then trim(PROC_CD)
Else Trim(PROC_RVNU_CD)end,1,1) = ''0''  Then ''REV''
   when REGEXP_LIKE(substr(case when Len(Trim(PROC_RVNU_CD))>0 Then
(case when Len(Trim(PROC_RVNU_CD))=4 And substr(Trim(PROC_RVNU_CD),1,1) =''0'' And HD_CLM_FM_TYP_CD=''1''  Then substr(Trim(PROC_RVNU_CD),2,3) Else Trim(PROC_RVNU_CD) end)
when Len(trim(RVNU_CD))>0 Then trim(RVNU_CD)
when Len(trim(PROC_CD))>0 Then trim(PROC_CD)
Else Trim(PROC_RVNU_CD) end ,1,1) , ''[a-zA-Z]'') Then ''HCPCS''
   Else ''CPT4'' end )
Else
(case when REGEXP_LIKE(substr(case when Len(TRIM(PROC_RVNU_CD))>0 Then
(case when Len(TRIM(PROC_RVNU_CD))=4 And substr(TRIM(PROC_RVNU_CD),1,1) =''0'' And HD_CLM_FM_TYP_CD=''1''  Then substr(TRIM(PROC_RVNU_CD),2,3) Else TRIM(PROC_RVNU_CD) end )
when Len(trim(RVNU_CD))>0 Then trim(RVNU_CD)
when Len(trim(PROC_CD))>0 Then trim(PROC_CD)
Else TRIM(PROC_RVNU_CD) end ,1,1) , ''[a-zA-Z]'') Then ''HCPCS'' Else ''CPT4'' end)
end as LKP_PROC_TYP_CD,
case when (trim(PROV_SYS_ID) = 0 or PROV_SYS_ID  is null) Then -1 Else PROV_SYS_ID end as LKP_PROV_SYS_ID,
case when Len(TRIM(PROC_RVNU_CD))>0 Then
(case when Len(TRIM(PROC_RVNU_CD))=4 And substr(TRIM(PROC_RVNU_CD),1,1) =''0'' And HD_CLM_FM_TYP_CD=''1''  Then substr(TRIM(PROC_RVNU_CD),2,3) Else TRIM(PROC_RVNU_CD) end)
when Len(trim(RVNU_CD))>0 Then trim(RVNU_CD)
when Len(trim(PROC_CD))>0 Then trim(PROC_CD)
Else TRIM(PROC_RVNU_CD) end as          DERIV_PROC_RVNU_CD,
PROC_CD_CPT AS MD_DERIV_PROC_RVNU_CD,
PAYE_ASGN_CD,
PROV_FACL_TYP_DESC,
ICD_VER_CD,
PROC_CPT_TYP_CD,
CLM_SRVC_PROC_MOD_2_CD,
CLM_SRVC_PROC_MOD_3_CD,
CLM_SRVC_PROC_MOD_4_CD,
RVNU_CD AS CLM_SRVC_RVNU_CD,
case when HD_CLM_FM_TYP_CD = ''1'' And Len(PROC_CD) > 0 Then PROC_CD Else '''' end as CLM_SRVC_SEC_PROC_CD,
DSCNT_TYP_CD,
nvl(CLM_SRC_PROV_CLM_BIL_NPI_ID,'''') as CLM_SRC_PROV_CLM_BIL_NPI_ID,
nvl(CLM_SRC_PROV_CLM_ATD_NPI_ID,'''') as CLM_SRC_PROV_CLM_ATD_NPI_ID,
nvl(CLM_SRC_PROV_CLM_REF_NPI_ID,'''') as CLM_SRC_PROV_CLM_REF_NPI_ID,
case when HD_CLM_FM_TYP_CD=''2'' Then nvl(CLM_SRVC_BIL_PROC_CD,'''') Else '''' end as CLM_SRVC_BIL_PROC_CD,
FINC_LIAB
FROM TEMP_MERGE
-- WHERE DROP_CAP_FUND_FLG <> 1
 ) ;


CREATE OR REPLACE TEMPORARY TABLE TEMP_GALA_RSN_CD AS
(SELECT GALA_RES.BTCH_LOAD_DT,GALA_RES.RSN_CD_SYS_ID,trim(GALA_RES.RSN_CD) AS RSN_CD,trim(GALA_RES.RSN_CD_DESC) AS RSN_CD_DESC
FROM COMPACT.STG_GALA_REASON_CODE  GALA_RES
qualify row_number() over (partition by RSN_CD_SYS_ID
                           order by RSN_CD_SYS_ID asc, BTCH_LOAD_DT desc) = 1) ;

CREATE OR REPLACE TEMPORARY TABLE TEMP_CLM_LVL_RSN AS
(SELECT RSN_CD_SYS_ID AS CLM_LVL_RSN_CD_SYS_ID, RSN_CD AS LKP_CLM_LVL_RSN_CD, RSN_CD_DESC AS LKP_CLM_LVL_RSN_CD_DESC
FROM TEMP_GALA_RSN_CD) ;

CREATE OR REPLACE TEMPORARY TABLE TEMP_RCNSD_RSN AS
(SELECT RSN_CD_SYS_ID AS FNL_RCNSD_RSN_CD_SYS_ID, RSN_CD AS LKP_PYMT_RSN_FNL_RCNSD_RSN_CD, RSN_CD_DESC AS LKP_PYMT_RSN_FNL_RCNSD_RSN_CD_DESC FROM TEMP_GALA_RSN_CD) ;
CREATE OR REPLACE TEMPORARY TABLE TEMP_PYMT_RSN AS
(SELECT RSN_CD_SYS_ID AS FNL_RSN_CD_SYS_ID, RSN_CD AS LKP_PYMT_RSN_CD, RSN_CD_DESC AS LKP_PYMT_RSN_CD_DESC FROM TEMP_GALA_RSN_CD) ;

CREATE OR REPLACE TEMPORARY TABLE TEMP_FCET_CMC_MCTN_TAX_NAME AS
(SELECT   name.MCTN_ID,
         name.MCTN_TYPE,
         name.MCTN_NAME,
         name.MCTN_LST_NAME,
         name.MCTN_FIRST_NAME
FROM COMPACT.STM_FCET_CMC_MCTN_TAX_NAME name ) ;

CREATE OR REPLACE TEMPORARY TABLE TEMP_MCTN_TYPE_ISE AS
(SELECT * FROM TEMP_FCET_CMC_MCTN_TAX_NAME WHERE
Trim(MCTN_TYPE) = ''E'') ;
CREATE OR REPLACE TEMPORARY TABLE TEMP_MCTN_TYPE_ISNOTE AS
(SELECT * FROM TEMP_FCET_CMC_MCTN_TAX_NAME WHERE
Trim(MCTN_TYPE) <> ''E'') ;

CREATE OR REPLACE TEMPORARY TABLE TEMP_LKP_SRVC_GALA_RES AS
(SELECT A.*,B.LKP_CLM_LVL_RSN_CD,B.LKP_CLM_LVL_RSN_CD_DESC,C.LKP_PYMT_RSN_FNL_RCNSD_RSN_CD,C.LKP_PYMT_RSN_FNL_RCNSD_RSN_CD_DESC,
D.LKP_PYMT_RSN_CD,D.LKP_PYMT_RSN_CD_DESC,E.MCTN_TYPE,E.MCTN_NAME,E.MCTN_LST_NAME,E.MCTN_FIRST_NAME FROM
TEMP_TNSFRMR1 A
LEFT OUTER JOIN TEMP_CLM_LVL_RSN B ON A.CLM_LVL_RSN_CD_SYS_ID = B.CLM_LVL_RSN_CD_SYS_ID
LEFT OUTER JOIN TEMP_RCNSD_RSN C ON A.FNL_RCNSD_RSN_CD_SYS_ID = C.FNL_RCNSD_RSN_CD_SYS_ID
LEFT OUTER JOIN TEMP_PYMT_RSN D ON A.FNL_RSN_CD_SYS_ID = D.FNL_RSN_CD_SYS_ID
LEFT OUTER JOIN TEMP_MCTN_TYPE_ISE E ON A.PROV_TIN = E.MCTN_ID) ;

CREATE OR REPLACE TEMPORARY TABLE TEMP_LKP_SRVC_GALA_RES_ISN AS
select * from TEMP_LKP_SRVC_GALA_RES where MCTN_TYPE IS NULL;


CREATE or replace TEMPORARY TABLE TEMP_TRANS_CLM_SRVC AS
(select
GALA_UNET_CLM_SRVC_UNIQ_ID,
BTCH_LOAD_DT,
UNET_CLM_SRVC_SYS_ID,
MBR_SYS_ID,
CLM_AUD_NBR,
SYS_ENT_SEQ_NBR,
SYS_ENT_DT,
TRANS_CD,
CLM_DUP_KEY_BRK_NBR,
DTL_LN_NBR,
ADJD_DT,
ADJ_HCCC_CD,
ASGN_ADJD_OFC_CD,
BNK_DESG_CD,
BEN_LVL_SYS_ID,
CHRG_STS_CD,
CLM_PD_DT,
CPTATN_FUND_CD,
CUST_SEG_NBR,
DIAG_1_CD,
DIAG_2_CD,
DIAG_3_CD,
DIAG_4_CD,
DRFT_NBR,
ENCTR_CD,
FNL_RSN_CD_SYS_ID,
FNL_RCNSD_RSN_CD_SYS_ID,
FST_SRVC_DT,
LST_SRVC_DT,
OPT_OUT_IND,
ORIG_ADJD_DT,
ORIG_PD_DT,
ORIG_SRVC_CD,
PARS_AUTH_NBR,
PL_OF_SRVC_SYS_ID,
PST_DT,
PREF_PROV_CD,
PROV_CONTR_MKT_NBR,
PROV_PRTCP_STS_CD,
PROV_TIN,
case when MCTN_NAME is not null then MCTN_NAME else nvl(MCTN_FIRST_NAME,'''') || '' '' || nvl(MCTN_LST_NAME,'''') end as PROV_PAYE_NM,
PROV_TIN_PRFX_CD,
PROV_TIN_SUFX_CD,
PROV_ZIP_CD,
NON_UHG_EE_IND,
SRVC_PROV_CATGY_CD,
SRVC_PROV_SYS_ID,
SRVC_PROV_ROW_EFF_DT,
SRC_CHRG_AMT,
SRC_CONTR_AMT,
SRC_NOT_COV_AMT,
SRC_PD_AMT,
SRC_SYS_CD,
SRC_SYS_GRP_CD,
SRVC_CURR_IND,
ADJ_SRVC_UNIT_CNT,
ALLW_AMT,
BEN_LMT_AMT,
BEN_PAY_AMT,
CALC_PD_AMT,
COB_SV_AMT,
COB_RDUC_AMT,
COINS_AMT,
COV_AMT,
CONTR_WTHLD_CNTNGY_RSRV_AMT,
COPAY_AMT,
DED_AMT,
DSCNT_AMT,
DUP_CHRG_AMT,
ELIG_AMT,
ENCTR_PRC_AMT,
LIAB_CHRG_AMT,
NET_PD_AMT,
NON_DUP_CHRG_AMT,
OPT_SRVC_CNT_IND,
OVRIDE_CD,
PAY_RDUC_AMT,
PHYSN_FINC_ALLW_AMT,
PROV_SANCTION_AMT,
PROV_WTHLD_AMT,
RCNSD_RDUC_AMT,
RDUC_AMT,
SPCL_NEGOT_DSCNT_AMT,
SBMT_CHRG_AMT,
SRVC_UNIT_CNT,
LOAD_DT,
UPDT_DT,
THREE_TIER_BEN_CD,
CPTATN_FUND_DERIV_CD,
nvl(SRVC_PROV_NPI_NBR,'''') AS SRVC_PROV_NPI_NBR,
REC_CRT_DTTM,
REC_XTRCT_SRC_CD,
REC_INPUT_SRC_CD,
nvl(LKP_PROC_MOD_CD,'''') AS LKP_PROC_MOD_CD,
nvl(LKP_PROC_MOD_GRP_CD,'''') AS LKP_PROC_MOD_GRP_CD,
nvl(PROC_REC_EXISTS,'''') AS PROC_REC_EXISTS,
nvl(LKP_PL_OF_SRVC_AMA_CD,'''') AS LKP_PL_OF_SRVC_AMA_CD,
nvl(LKP_PL_OF_SRVC_CD,'''') AS LKP_PL_OF_SRVC_CD,
POS_REC_EXISTS,
LKP_CLM_MBR_BTH_DT,
LKP_UNET_CLM_HEAD_SYS_ID,
LKP_UNET_CLM_SRVC_SYS_ID_TGT,
CLM_ADJ_CD,
nvl(LKP_ST_ABBR_CD,'''') AS LKP_ST_ABBR_CD,
nvl(LKP_CTY_NM,'''') AS LKP_CTY_NM,
nvl(LKP_PYMT_RSN_CD,'''') AS LKP_PYMT_RSN_CD,
nvl(LKP_PYMT_RSN_CD_DESC,'''') AS LKP_PYMT_RSN_CD_DESC,
nvl(LKP_PYMT_RSN_FNL_RCNSD_RSN_CD,'''') AS LKP_PYMT_RSN_FNL_RCNSD_RSN_CD,
nvl(LKP_PYMT_RSN_FNL_RCNSD_RSN_CD_DESC,'''') AS LKP_PYMT_RSN_FNL_RCNSD_RSN_CD_DESC,
nvl(LKP_CLM_LVL_RSN_CD,'''') AS LKP_CLM_LVL_RSN_CD,
nvl(LKP_CLM_LVL_RSN_CD_DESC,'''') AS LKP_CLM_LVL_RSN_CD_DESC,
nvl(CLM_AUTH_NBR,'''') AS CLM_AUTH_NBR,
LKP_AUTH_SYS_ID,
nvl(LKP_AUTH_LVL_OF_SRVC_CD,'''') AS LKP_AUTH_LVL_OF_SRVC_CD,
nvl(LKP_AUTH_LVL_OF_CARE_TXT,'''') AS LKP_AUTH_LVL_OF_CARE_TXT,
LKP_AUTH_REC_EXISTS,
nvl(LKP_MPIN,-1) AS PROV_ALT_ID,
substr(Trim(LKP_CLM_CUST_SEG_NBR),3,7) || ''-'' ||  substr(Trim(LKP_CLM_MBR_SBSCR_NBR),3,9) || ''-'' || (case when (LKP_CLM_MBR_REL_CD = ''EE'' Or LKP_CLM_MBR_REL_CD = ''RR'') Then ''0'' when (LKP_CLM_MBR_REL_CD = ''DP'' Or LKP_CLM_MBR_REL_CD = ''SP'' Or  LKP_CLM_MBR_REL_CD = ''SS'') Then ''1'' when (LKP_CLM_MBR_REL_CD = ''CH'' Or LKP_CLM_MBR_REL_CD = ''CD'' Or LKP_CLM_MBR_REL_CD = ''HC'' Or  LKP_CLM_MBR_REL_CD = ''OT'' Or LKP_CLM_MBR_REL_CD = ''ST'' Or LKP_CLM_MBR_REL_CD = ''NB'' Or LKP_CLM_MBR_REL_CD = ''SW'' Or LKP_CLM_MBR_REL_CD = ''UN'') Then ''2'' when (LKP_CLM_MBR_REL_CD = ''SD'' Or  LKP_CLM_MBR_REL_CD = ''SX'') Then ''3'' when LKP_CLM_MBR_REL_CD = ''SC'' Then ''4'' Else ''2'' END) || ''-'' || substr(LKP_CLM_MBR_DEPN_NBR,2,2) as CLM_MBR_ALT_ID ,
LKP_MH_SA_CD_ARRAY,
LKP_PROC_TYP_CD,
LKP_PROV_SYS_ID,
DERIV_PROC_RVNU_CD,
MD_DERIV_PROC_RVNU_CD,
PAYE_ASGN_CD,
PROV_FACL_TYP_DESC,
case when ICD_VER_CD is null Then ''UNKNOWN'' when ICD_VER_CD = ''0'' Then ''ICD10'' when ICD_VER_CD = ''9'' Then ''ICD9'' Else ''UNKNOWN'' end as ICD_DIAG_TYP_CD,
PROC_CPT_TYP_CD,
CLM_SRVC_PROC_MOD_2_CD,
CLM_SRVC_PROC_MOD_3_CD,
CLM_SRVC_PROC_MOD_4_CD,
CLM_SRVC_RVNU_CD,
CLM_SRVC_SEC_PROC_CD,
DSCNT_TYP_CD,
CLM_SRC_PROV_CLM_BIL_NPI_ID,
CLM_SRC_PROV_CLM_ATD_NPI_ID,
CLM_SRC_PROV_CLM_REF_NPI_ID,
CLM_SRVC_BIL_PROC_CD,
FINC_LIAB
from TEMP_LKP_SRVC_GALA_RES
where MCTN_TYPE IS NOT NULL
) ;

CREATE or replace TEMPORARY TABLE TEMP_TRANS_CLM_SRVC_REJ AS
(select
GALA_UNET_CLM_SRVC_UNIQ_ID,
BTCH_LOAD_DT,
UNET_CLM_SRVC_SYS_ID,
MBR_SYS_ID,
CLM_AUD_NBR,
SYS_ENT_SEQ_NBR,
SYS_ENT_DT,
TRANS_CD,
CLM_DUP_KEY_BRK_NBR,
DTL_LN_NBR,
ADJD_DT,
ADJ_HCCC_CD,
ASGN_ADJD_OFC_CD,
BNK_DESG_CD,
BEN_LVL_SYS_ID,
CHRG_STS_CD,
CLM_PD_DT,
CPTATN_FUND_CD,
CUST_SEG_NBR,
DIAG_1_CD,
DIAG_2_CD,
DIAG_3_CD,
DIAG_4_CD,
DRFT_NBR,
ENCTR_CD,
FNL_RSN_CD_SYS_ID,
FNL_RCNSD_RSN_CD_SYS_ID,
FST_SRVC_DT,
LST_SRVC_DT,
OPT_OUT_IND,
ORIG_ADJD_DT,
ORIG_PD_DT,
ORIG_SRVC_CD,
PARS_AUTH_NBR,
PL_OF_SRVC_SYS_ID,
PST_DT,
PREF_PROV_CD,
PROV_CONTR_MKT_NBR,
PROV_PRTCP_STS_CD,
PROV_TIN,
CASE WHEN B.MCTN_TYPE IS NULL then ''U'' WHEN B.MCTN_NAME IS NULL then NVL(B.MCTN_FIRST_NAME,'''') || '' '' || NVL(B.MCTN_LST_NAME,'''') else B.MCTN_NAME END AS PROV_PAYE_NM,
PROV_TIN_PRFX_CD,
PROV_TIN_SUFX_CD,
PROV_ZIP_CD,
NON_UHG_EE_IND,
SRVC_PROV_CATGY_CD,
SRVC_PROV_SYS_ID,
SRVC_PROV_ROW_EFF_DT,
SRC_CHRG_AMT,
SRC_CONTR_AMT,
SRC_NOT_COV_AMT,
SRC_PD_AMT,
SRC_SYS_CD,
SRC_SYS_GRP_CD,
SRVC_CURR_IND,
ADJ_SRVC_UNIT_CNT,
ALLW_AMT,
BEN_LMT_AMT,
BEN_PAY_AMT,
CALC_PD_AMT,
COB_SV_AMT,
COB_RDUC_AMT,
COINS_AMT,
COV_AMT,
CONTR_WTHLD_CNTNGY_RSRV_AMT,
COPAY_AMT,
DED_AMT,
DSCNT_AMT,
DUP_CHRG_AMT,
ELIG_AMT,
ENCTR_PRC_AMT,
LIAB_CHRG_AMT,
NET_PD_AMT,
NON_DUP_CHRG_AMT,
OPT_SRVC_CNT_IND,
OVRIDE_CD,
PAY_RDUC_AMT,
PHYSN_FINC_ALLW_AMT,
PROV_SANCTION_AMT,
PROV_WTHLD_AMT,
RCNSD_RDUC_AMT,
RDUC_AMT,
SPCL_NEGOT_DSCNT_AMT,
SBMT_CHRG_AMT,
SRVC_UNIT_CNT,
LOAD_DT,
UPDT_DT,
THREE_TIER_BEN_CD,
CPTATN_FUND_DERIV_CD,
nvl(SRVC_PROV_NPI_NBR,'''') SRVC_PROV_NPI_NBR,
REC_CRT_DTTM,
REC_XTRCT_SRC_CD,
REC_INPUT_SRC_CD,
nvl(LKP_PROC_MOD_CD,'''') LKP_PROC_MOD_CD,
nvl(LKP_PROC_MOD_GRP_CD,'''') LKP_PROC_MOD_GRP_CD,
nvl(PROC_REC_EXISTS,'''') PROC_REC_EXISTS,
nvl(LKP_PL_OF_SRVC_AMA_CD,'''') LKP_PL_OF_SRVC_AMA_CD,
nvl(LKP_PL_OF_SRVC_CD,'''') LKP_PL_OF_SRVC_CD,
POS_REC_EXISTS,
LKP_CLM_MBR_BTH_DT,
LKP_UNET_CLM_HEAD_SYS_ID,
LKP_UNET_CLM_SRVC_SYS_ID_TGT,
CLM_ADJ_CD,
nvl(LKP_ST_ABBR_CD,'''') LKP_ST_ABBR_CD,
nvl(LKP_CTY_NM,'''') LKP_CTY_NM,
nvl(LKP_PYMT_RSN_CD,'''') LKP_PYMT_RSN_CD,
nvl(LKP_PYMT_RSN_CD_DESC,'''') LKP_PYMT_RSN_CD_DESC,
nvl(LKP_PYMT_RSN_FNL_RCNSD_RSN_CD,'''') LKP_PYMT_RSN_FNL_RCNSD_RSN_CD,
nvl(LKP_PYMT_RSN_FNL_RCNSD_RSN_CD_DESC,'''') LKP_PYMT_RSN_FNL_RCNSD_RSN_CD_DESC,
nvl(LKP_CLM_LVL_RSN_CD,'''') LKP_CLM_LVL_RSN_CD,
nvl(LKP_CLM_LVL_RSN_CD_DESC,'''') LKP_CLM_LVL_RSN_CD_DESC,
nvl(CLM_AUTH_NBR,'''') CLM_AUTH_NBR,
nvl(LKP_AUTH_SYS_ID,-1) LKP_AUTH_SYS_ID,
nvl(LKP_AUTH_LVL_OF_SRVC_CD,'''') LKP_AUTH_LVL_OF_SRVC_CD,
nvl(LKP_AUTH_LVL_OF_CARE_TXT,'''') LKP_AUTH_LVL_OF_CARE_TXT,
LKP_AUTH_REC_EXISTS,
nvl(LKP_MPIN,-1) PROV_ALT_ID,
substr(Trim(LKP_CLM_CUST_SEG_NBR),3,7) || ''-'' ||  substr(Trim(LKP_CLM_MBR_SBSCR_NBR),3,9) || ''-'' || (case when (LKP_CLM_MBR_REL_CD = ''EE'' Or LKP_CLM_MBR_REL_CD = ''RR'') Then ''0'' when (LKP_CLM_MBR_REL_CD = ''DP'' Or LKP_CLM_MBR_REL_CD = ''SP'' Or  LKP_CLM_MBR_REL_CD = ''SS'') Then ''1'' when (LKP_CLM_MBR_REL_CD = ''CH'' Or LKP_CLM_MBR_REL_CD = ''CD'' Or LKP_CLM_MBR_REL_CD = ''HC'' Or  LKP_CLM_MBR_REL_CD = ''OT'' Or LKP_CLM_MBR_REL_CD = ''ST'' Or LKP_CLM_MBR_REL_CD = ''NB'' Or LKP_CLM_MBR_REL_CD = ''SW'' Or LKP_CLM_MBR_REL_CD = ''UN'') Then ''2'' when (LKP_CLM_MBR_REL_CD = ''SD'' Or  LKP_CLM_MBR_REL_CD = ''SX'') Then ''3'' when LKP_CLM_MBR_REL_CD = ''SC'' Then ''4'' Else ''2'' END)  || ''-'' || substr(LKP_CLM_MBR_DEPN_NBR,2,2) as CLM_MBR_ALT_ID ,
LKP_MH_SA_CD_ARRAY,
LKP_PROC_TYP_CD,
LKP_PROV_SYS_ID,
DERIV_PROC_RVNU_CD,
MD_DERIV_PROC_RVNU_CD,
PAYE_ASGN_CD,
PROV_FACL_TYP_DESC,
case when ICD_VER_CD is null Then ''UNKNOWN'' when ICD_VER_CD = ''0'' Then ''ICD10'' when ICD_VER_CD = ''9'' Then ''ICD9'' Else ''UNKNOWN'' end as ICD_DIAG_TYP_CD,
PROC_CPT_TYP_CD,
CLM_SRVC_PROC_MOD_2_CD,
CLM_SRVC_PROC_MOD_3_CD,
CLM_SRVC_PROC_MOD_4_CD,
CLM_SRVC_RVNU_CD,
CLM_SRVC_SEC_PROC_CD,
DSCNT_TYP_CD,
CLM_SRC_PROV_CLM_BIL_NPI_ID,
CLM_SRC_PROV_CLM_ATD_NPI_ID,
CLM_SRC_PROV_CLM_REF_NPI_ID,
CLM_SRVC_BIL_PROC_CD,
FINC_LIAB
FROM TEMP_LKP_SRVC_GALA_RES_ISN A
LEFT OUTER JOIN TEMP_MCTN_TYPE_ISNOTE B ON TRIM(A.PROV_TIN) = TRIM(B.MCTN_ID) ) ;

CREATE OR REPLACE TEMPORARY TABLE TEMP_STGGALAUNETCLAIMSRVCSRC AS
(SELECT * FROM TEMP_TRANS_CLM_SRVC
UNION ALL
SELECT * FROM TEMP_TRANS_CLM_SRVC_REJ) ;

CREATE OR REPLACE TEMPORARY TABLE TEMP_LVL_OF_CARE_XREF AS
(SELECT DISTINCT trim(CARE_XREF.PROC_TYP_CD) PROC_TYP_CD
,trim(CARE_XREF.PROC_CD) PROC_CD,
trim(coalesce(CARE_XREF.LVL_OF_CARE_DERIV_TXT,'''')) LKP_CLM_LVL_OF_CARE_DERIV_TXT ,
trim(coalesce(CARE_XREF.LVL_OF_SRVC_DERIV_CD,'''')) LKP_CLM_LVL_OF_SRVC_DERIV_CD,
trim(coalesce(CARE_XREF.UNIT_TYP_CD,'''')) LKP_CLM_UNIT_TYP_CD,
''1'' as LKP_CLM_REC_EXISTS
FROM COMPACT.TB_SYS_DERIV_LVL_OF_CARE_XREF  CARE_XREF
qualify row_number() over (partition by trim(CARE_XREF.PROC_TYP_CD),trim(CARE_XREF.PROC_CD)
                           order by trim(CARE_XREF.PROC_TYP_CD) asc, trim(CARE_XREF.PROC_CD) asc) = 1 ) ;

CREATE OR REPLACE TEMPORARY TABLE TEMP_LKP_LOC AS
(SELECT
GALA_UNET_CLM_SRVC_UNIQ_ID,
BTCH_LOAD_DT,
UNET_CLM_SRVC_SYS_ID,
MBR_SYS_ID,
CLM_AUD_NBR,
SYS_ENT_SEQ_NBR,
SYS_ENT_DT,
TRANS_CD,
CLM_DUP_KEY_BRK_NBR,
DTL_LN_NBR,
ADJD_DT,
ADJ_HCCC_CD,
ASGN_ADJD_OFC_CD,
BNK_DESG_CD,
BEN_LVL_SYS_ID,
CHRG_STS_CD,
CLM_PD_DT,
CPTATN_FUND_CD,
CUST_SEG_NBR,
DIAG_1_CD,
DIAG_2_CD,
DIAG_3_CD,
DIAG_4_CD,
DRFT_NBR,
ENCTR_CD,
FNL_RSN_CD_SYS_ID,
FNL_RCNSD_RSN_CD_SYS_ID,
FST_SRVC_DT,
LST_SRVC_DT,
OPT_OUT_IND,
ORIG_ADJD_DT,
ORIG_PD_DT,
ORIG_SRVC_CD,
PARS_AUTH_NBR,
PL_OF_SRVC_SYS_ID,
PST_DT,
PREF_PROV_CD,
PROV_CONTR_MKT_NBR,
PROV_PRTCP_STS_CD,
PROV_TIN,
PROV_PAYE_NM,
PROV_TIN_PRFX_CD,
PROV_TIN_SUFX_CD,
PROV_ZIP_CD,
NON_UHG_EE_IND,
SRVC_PROV_CATGY_CD,
SRVC_PROV_SYS_ID,
SRVC_PROV_ROW_EFF_DT,
SRC_CHRG_AMT,
SRC_CONTR_AMT,
SRC_NOT_COV_AMT,
SRC_PD_AMT,
SRC_SYS_CD,
SRC_SYS_GRP_CD,
SRVC_CURR_IND,
ADJ_SRVC_UNIT_CNT,
ALLW_AMT,
BEN_LMT_AMT,
BEN_PAY_AMT,
CALC_PD_AMT,
COB_SV_AMT,
COB_RDUC_AMT,
COINS_AMT,
COV_AMT,
CONTR_WTHLD_CNTNGY_RSRV_AMT,
COPAY_AMT,
DED_AMT,
DSCNT_AMT,
DUP_CHRG_AMT,
ELIG_AMT,
ENCTR_PRC_AMT,
LIAB_CHRG_AMT,
NET_PD_AMT,
NON_DUP_CHRG_AMT,
OPT_SRVC_CNT_IND,
OVRIDE_CD,
PAY_RDUC_AMT,
PHYSN_FINC_ALLW_AMT,
PROV_SANCTION_AMT,
PROV_WTHLD_AMT,
RCNSD_RDUC_AMT,
RDUC_AMT,
SPCL_NEGOT_DSCNT_AMT,
SBMT_CHRG_AMT,
SRVC_UNIT_CNT,
LOAD_DT,
UPDT_DT,
THREE_TIER_BEN_CD,
CPTATN_FUND_DERIV_CD,
SRVC_PROV_NPI_NBR,
REC_CRT_DTTM,
REC_XTRCT_SRC_CD,
REC_INPUT_SRC_CD,
LKP_PROC_MOD_CD,
LKP_PROC_MOD_GRP_CD,
PROC_REC_EXISTS,
LKP_PL_OF_SRVC_AMA_CD,
LKP_PL_OF_SRVC_CD,
POS_REC_EXISTS,
LKP_CLM_MBR_BTH_DT,
LKP_UNET_CLM_HEAD_SYS_ID,
LKP_UNET_CLM_SRVC_SYS_ID_TGT,
CLM_ADJ_CD,
LKP_ST_ABBR_CD,
LKP_CTY_NM,
LKP_PYMT_RSN_CD,
LKP_PYMT_RSN_CD_DESC,
LKP_PYMT_RSN_FNL_RCNSD_RSN_CD,
LKP_PYMT_RSN_FNL_RCNSD_RSN_CD_DESC,
LKP_CLM_LVL_RSN_CD,
LKP_CLM_LVL_RSN_CD_DESC,
PROV_ALT_ID,
CLM_AUTH_NBR,
LKP_AUTH_SYS_ID,
LKP_AUTH_LVL_OF_SRVC_CD,
LKP_AUTH_LVL_OF_CARE_TXT,
LKP_AUTH_REC_EXISTS,
CLM_MBR_ALT_ID,
LKP_MH_SA_CD_ARRAY,
LKP_PROC_TYP_CD,
LKP_PROV_SYS_ID,
DERIV_PROC_RVNU_CD,
MD_DERIV_PROC_RVNU_CD,
PAYE_ASGN_CD,
PROV_FACL_TYP_DESC,
ICD_DIAG_TYP_CD,
PROC_CPT_TYP_CD,
B.LKP_CLM_LVL_OF_CARE_DERIV_TXT,
B.LKP_CLM_LVL_OF_SRVC_DERIV_CD,
B.LKP_CLM_UNIT_TYP_CD,
B.LKP_CLM_REC_EXISTS,
CLM_SRVC_PROC_MOD_2_CD,
CLM_SRVC_PROC_MOD_3_CD,
CLM_SRVC_PROC_MOD_4_CD,
CLM_SRVC_RVNU_CD,
CLM_SRVC_SEC_PROC_CD,
DSCNT_TYP_CD,
CLM_SRC_PROV_CLM_BIL_NPI_ID,
CLM_SRC_PROV_CLM_ATD_NPI_ID,
CLM_SRC_PROV_CLM_REF_NPI_ID,
CLM_SRVC_BIL_PROC_CD,
FINC_LIAB,
--''a#b#c'' as svDLOCDerivInputs
rClaimsDLOCDerivInputs(Trim(MD_DERIV_PROC_RVNU_CD),Trim(LKP_PL_OF_SRVC_AMA_CD)) as svDLOCDerivInputs
FROM TEMP_STGGALAUNETCLAIMSRVCSRC A
LEFT OUTER JOIN TEMP_LVL_OF_CARE_XREF B ON TRIM(A.LKP_PROC_TYP_CD) = TRIM(B.PROC_TYP_CD) AND TRIM(A.MD_DERIV_PROC_RVNU_CD) = TRIM(B.PROC_CD)) ;

CREATE OR REPLACE TEMPORARY TABLE TEMP_TRNSFRM_SRVCC AS
(SELECT
GALA_UNET_CLM_SRVC_UNIQ_ID,
BTCH_LOAD_DT,
UNET_CLM_SRVC_SYS_ID,
MBR_SYS_ID,
CLM_AUD_NBR,
SYS_ENT_SEQ_NBR,
SYS_ENT_DT,
TRANS_CD,
CLM_DUP_KEY_BRK_NBR,
DTL_LN_NBR,
ADJD_DT,
ADJ_HCCC_CD,
ASGN_ADJD_OFC_CD,
BNK_DESG_CD,
BEN_LVL_SYS_ID,
CHRG_STS_CD,
CLM_PD_DT,
CPTATN_FUND_CD,
CUST_SEG_NBR,
DIAG_1_CD,
DIAG_2_CD,
DIAG_3_CD,
DIAG_4_CD,
DRFT_NBR,
ENCTR_CD,
FNL_RSN_CD_SYS_ID,
FNL_RCNSD_RSN_CD_SYS_ID,
FST_SRVC_DT,
LST_SRVC_DT,
OPT_OUT_IND,
ORIG_ADJD_DT,
ORIG_PD_DT,
ORIG_SRVC_CD,
PARS_AUTH_NBR,
PL_OF_SRVC_SYS_ID,
PST_DT,
PREF_PROV_CD,
PROV_CONTR_MKT_NBR,
PROV_PRTCP_STS_CD,
PROV_TIN,
PROV_PAYE_NM,
PROV_TIN_PRFX_CD,
PROV_TIN_SUFX_CD,
PROV_ZIP_CD,
NON_UHG_EE_IND,
SRVC_PROV_CATGY_CD,
SRVC_PROV_SYS_ID,
SRVC_PROV_ROW_EFF_DT,
SRC_CHRG_AMT,
SRC_CONTR_AMT,
SRC_NOT_COV_AMT,
SRC_PD_AMT,
SRC_SYS_CD,
SRC_SYS_GRP_CD,
SRVC_CURR_IND,
ADJ_SRVC_UNIT_CNT,
ALLW_AMT,
BEN_LMT_AMT,
BEN_PAY_AMT,
CALC_PD_AMT,
COB_SV_AMT,
COB_RDUC_AMT,
COINS_AMT,
COV_AMT,
CONTR_WTHLD_CNTNGY_RSRV_AMT,
COPAY_AMT,
DED_AMT,
DSCNT_AMT,
DUP_CHRG_AMT,
ELIG_AMT,
ENCTR_PRC_AMT,
LIAB_CHRG_AMT,
NET_PD_AMT,
NON_DUP_CHRG_AMT,
OPT_SRVC_CNT_IND,
OVRIDE_CD,
PAY_RDUC_AMT,
PHYSN_FINC_ALLW_AMT,
PROV_SANCTION_AMT,
PROV_WTHLD_AMT,
RCNSD_RDUC_AMT,
RDUC_AMT,
SPCL_NEGOT_DSCNT_AMT,
SBMT_CHRG_AMT,
SRVC_UNIT_CNT,
LOAD_DT,
UPDT_DT,
THREE_TIER_BEN_CD,
CPTATN_FUND_DERIV_CD,
SRVC_PROV_NPI_NBR,
REC_CRT_DTTM,
REC_XTRCT_SRC_CD,
REC_INPUT_SRC_CD,
LKP_PROC_MOD_CD,
LKP_PROC_MOD_GRP_CD,
PROC_REC_EXISTS,
LKP_PL_OF_SRVC_AMA_CD,
LKP_PL_OF_SRVC_CD,
POS_REC_EXISTS,
LKP_CLM_MBR_BTH_DT,
LKP_UNET_CLM_HEAD_SYS_ID,
LKP_UNET_CLM_SRVC_SYS_ID_TGT,
CLM_ADJ_CD,
LKP_ST_ABBR_CD,
LKP_CTY_NM,
LKP_PYMT_RSN_CD,
LKP_PYMT_RSN_CD_DESC,
LKP_PYMT_RSN_FNL_RCNSD_RSN_CD,
LKP_PYMT_RSN_FNL_RCNSD_RSN_CD_DESC,
LKP_CLM_LVL_RSN_CD,
LKP_CLM_LVL_RSN_CD_DESC,
PROV_ALT_ID,
CLM_AUTH_NBR,
LKP_AUTH_SYS_ID,
LKP_AUTH_LVL_OF_SRVC_CD,
LKP_AUTH_LVL_OF_CARE_TXT,
LKP_AUTH_REC_EXISTS,
CLM_MBR_ALT_ID,
LKP_MH_SA_CD_ARRAY,
LKP_PROC_TYP_CD,
LKP_PROV_SYS_ID,
DERIV_PROC_RVNU_CD,
MD_DERIV_PROC_RVNU_CD,
CASE WHEN MD_DERIV_PROC_RVNU_CD = ''90899'' Then split_part(svDLOCDerivInputs,''#'',1) WHEN ((CASE WHEN (DERIV_PROC_RVNU_CD = ''100'' Or DERIV_PROC_RVNU_CD = ''0100'') Then 1 Else 0 END) = 1 Or (CASE WHEN (DERIV_PROC_RVNU_CD = ''240'' Or DERIV_PROC_RVNU_CD = ''0240'') And (PROV_FACL_TYP_DESC = ''General Hospital w Detox'' Or PROV_FACL_TYP_DESC = ''Psychiatric Residential Fac'' Or PROV_FACL_TYP_DESC =  ''Residential Treat Ctr w MH/SA'' Or PROV_FACL_TYP_DESC = ''SA Residential Facility'' Or PROV_FACL_TYP_DESC = ''SA Rehab Facility'') Then 1 Else 0 END) = 1) Then ''Residential'' WHEN (CASE WHEN (DERIV_PROC_RVNU_CD = ''240'' Or DERIV_PROC_RVNU_CD = ''0240'') And (PROV_FACL_TYP_DESC = ''Freestanding MH Day Treatment'' Or PROV_FACL_TYP_DESC = ''Freestanding SA Day Treatment'') Then 1 Else 0 END) = 1 Then ''Day Treatment'' WHEN (CASE WHEN (DERIV_PROC_RVNU_CD = ''240'' Or DERIV_PROC_RVNU_CD = ''0240'') And (PROV_FACL_TYP_DESC = ''Freestanding MH IOP'' Or PROV_FACL_TYP_DESC = ''Freestanding MHSA IOP'' Or PROV_FACL_TYP_DESC = ''Freestanding SA IOP'') Then 1 Else 0 END) = 1 Then ''Structured Outpatient'' WHEN (CASE WHEN (DERIV_PROC_RVNU_CD = ''240'' Or DERIV_PROC_RVNU_CD = ''0240'') And (PROV_FACL_TYP_DESC = ''SA Recovery Home'') Then 1 Else 0 END) = 1 Then ''Recovery Home'' WHEN (DERIV_PROC_RVNU_CD = ''0240''  And (LKP_PL_OF_SRVC_CD = ''OH'' Or LKP_PL_OF_SRVC_CD = ''IH'')) Then ''Residential'' WHEN (DERIV_PROC_RVNU_CD = ''240''  Or DERIV_PROC_RVNU_CD = ''0240'') Then ''Ancillary'' WHEN length(TRIM(nvl(LKP_CLM_LVL_OF_CARE_DERIV_TXT,''''))) =0 then ''Ancillary'' else LKP_CLM_LVL_OF_CARE_DERIV_TXT END AS LKP_CLM_LVL_OF_CARE_DERIV_TXT ,
CASE WHEN MD_DERIV_PROC_RVNU_CD = ''90899'' Then split_part(svDLOCDerivInputs,''#'',2) WHEN ((CASE WHEN (DERIV_PROC_RVNU_CD = ''100'' Or DERIV_PROC_RVNU_CD = ''0100'') Then 1 Else 0 END) = 1 Or (CASE WHEN (DERIV_PROC_RVNU_CD = ''240'' Or DERIV_PROC_RVNU_CD = ''0240'') And (PROV_FACL_TYP_DESC = ''General Hospital w Detox'' Or PROV_FACL_TYP_DESC = ''Psychiatric Residential Fac'' Or PROV_FACL_TYP_DESC =  ''Residential Treat Ctr w MH/SA'' Or PROV_FACL_TYP_DESC = ''SA Residential Facility'' Or PROV_FACL_TYP_DESC = ''SA Rehab Facility'') Then 1 Else 0 END) = 1) Then ''XRT'' WHEN (CASE WHEN (DERIV_PROC_RVNU_CD = ''240'' Or DERIV_PROC_RVNU_CD = ''0240'') And (PROV_FACL_TYP_DESC = ''Freestanding MH Day Treatment'' Or PROV_FACL_TYP_DESC = ''Freestanding SA Day Treatment'') Then 1 Else 0 END) = 1 Then ''XDT'' WHEN (CASE WHEN (DERIV_PROC_RVNU_CD = ''240'' Or DERIV_PROC_RVNU_CD = ''0240'') And (PROV_FACL_TYP_DESC = ''Freestanding MH IOP'' Or PROV_FACL_TYP_DESC = ''Freestanding MHSA IOP'' Or PROV_FACL_TYP_DESC = ''Freestanding SA IOP'') Then 1 Else 0 END) = 1 Then ''XSO'' WHEN (CASE WHEN (DERIV_PROC_RVNU_CD = ''240'' Or DERIV_PROC_RVNU_CD = ''0240'') And (PROV_FACL_TYP_DESC = ''SA Recovery Home'') Then 1 Else 0 END) = 1 Then ''XRH'' WHEN (DERIV_PROC_RVNU_CD = ''0240''  And (LKP_PL_OF_SRVC_CD = ''OH'' Or LKP_PL_OF_SRVC_CD = ''IH'')) Then ''XRT''
WHEN (DERIV_PROC_RVNU_CD = ''240''  Or DERIV_PROC_RVNU_CD = ''0240'') Then ''ANC'' WHEN length(trim(nvl(LKP_CLM_LVL_OF_SRVC_DERIV_CD,''''))) =0 then ''ANC'' else LKP_CLM_LVL_OF_SRVC_DERIV_CD end as LKP_CLM_LVL_OF_SRVC_DERIV_CD ,
CASE WHEN MD_DERIV_PROC_RVNU_CD = ''90899'' Then split_part(svDLOCDerivInputs,''#'',3) WHEN (DERIV_PROC_RVNU_CD = ''100'' Or DERIV_PROC_RVNU_CD = ''0100'' Or DERIV_PROC_RVNU_CD = ''240'' Or DERIV_PROC_RVNU_CD = ''0240'') Then '''' Else LKP_CLM_UNIT_TYP_CD END AS LKP_CLM_UNIT_TYP_CD,
CASE WHEN MD_DERIV_PROC_RVNU_CD = ''90899'' Or (DERIV_PROC_RVNU_CD = ''100'' Or DERIV_PROC_RVNU_CD = ''0100'' Or DERIV_PROC_RVNU_CD = ''240'' Or DERIV_PROC_RVNU_CD = ''0240'') Then 1 Else LKP_CLM_REC_EXISTS END AS LKP_CLM_REC_EXISTS,
PAYE_ASGN_CD,
ICD_DIAG_TYP_CD,
PROC_CPT_TYP_CD,
CLM_SRVC_PROC_MOD_2_CD,
CLM_SRVC_PROC_MOD_3_CD,
CLM_SRVC_PROC_MOD_4_CD,
CLM_SRVC_RVNU_CD,
CLM_SRVC_SEC_PROC_CD,
DSCNT_TYP_CD,
CLM_SRC_PROV_CLM_BIL_NPI_ID,
CLM_SRC_PROV_CLM_ATD_NPI_ID,
CLM_SRC_PROV_CLM_REF_NPI_ID,
CLM_SRVC_BIL_PROC_CD,
FINC_LIAB
FROM TEMP_LKP_LOC) ;


CREATE OR REPLACE TEMPORARY TABLE TEMP_A_CARE_CTGY1 AS
(SELECT trim(coalesce(CARE_CATGY.LVL_OF_CARE_DERIV_TXT,'''')) LKP_CLM_LVL_OF_CARE_DERIV_TXT,
coalesce(CARE_CATGY.LVL_OF_CARE_SEQ_NBR,-1) LKP_CLM_LVL_OF_CARE_SEQ_NBR
FROM COMPACT.TB_SYS_DERIV_LVL_OF_CARE_CATGY_XREF  CARE_CATGY ) ;

CREATE OR REPLACE TEMPORARY TABLE TEMP_A_CARE_CTGY2 AS
(SELECT trim(coalesce(CARE_CATGY.LVL_OF_CARE_DERIV_TXT,'''')) LKP_AUTH_LVL_OF_CARE_DERIV_TXT,
coalesce(CARE_CATGY.LVL_OF_CARE_SEQ_NBR,-1) LKP_AUTH_LVL_OF_CARE_SEQ_NBR
FROM COMPACT.TB_SYS_DERIV_LVL_OF_CARE_CATGY_XREF  CARE_CATGY ) ;

CREATE OR REPLACE TEMPORARY TABLE TEMP_LKP_CTGYA AS
(SELECT A.*, B.LKP_CLM_LVL_OF_CARE_SEQ_NBR , C.LKP_AUTH_LVL_OF_CARE_SEQ_NBR
FROM TEMP_TRNSFRM_SRVCC A LEFT OUTER JOIN TEMP_A_CARE_CTGY1 B
 ON trim(A.LKP_CLM_LVL_OF_CARE_DERIV_TXT) = trim(B.LKP_CLM_LVL_OF_CARE_DERIV_TXT)
 LEFT OUTER JOIN TEMP_A_CARE_CTGY2 C
on trim(A.LKP_AUTH_LVL_OF_CARE_TXT) = trim(C.LKP_AUTH_LVL_OF_CARE_DERIV_TXT)) ;


CREATE OR REPLACE TEMPORARY TABLE TEMP_LKP1_CTGYA1 AS
(SELECT *,
		CASE WHEN LKP_AUTH_REC_EXISTS = ''1'' THEN ''Y'' ELSE ''N'' END AS svAuthFound,
        CASE WHEN LKP_CLM_REC_EXISTS = ''1'' THEN ''Y'' ELSE ''N'' END AS svLvlOfCareFound,
        CASE WHEN svAuthFound = ''Y'' AND (LKP_AUTH_LVL_OF_CARE_TXT = ''Partial Hospitalization''
                                         OR LKP_AUTH_LVL_OF_CARE_TXT = ''Structured Outpatient''
                                         OR LKP_AUTH_LVL_OF_CARE_TXT = ''Residential''
                                         OR LKP_AUTH_LVL_OF_CARE_TXT = ''Recovery Home'' ) THEN 1 ELSE 0 END AS svAuthIntermediate,
        CASE WHEN svLvlOfCareFound=''Y'' AND (LKP_CLM_LVL_OF_CARE_DERIV_TXT = ''Partial Hospitalization''
                                            OR LKP_CLM_LVL_OF_CARE_DERIV_TXT = ''Day Treatment''
                                            OR LKP_CLM_LVL_OF_CARE_DERIV_TXT =  ''Structured Outpatient''
                                            OR LKP_CLM_LVL_OF_CARE_DERIV_TXT = ''Residential''
                                            OR LKP_CLM_LVL_OF_CARE_DERIV_TXT = ''Recovery Home'') THEN 1 ELSE 0 END AS svClmIntermediate,
        case when svClmIntermediate=1 And svAuthIntermediate=1 Then ''Y'' Else ''N'' END AS svBothIntermediate,
        Trim(split_part(LKP_MH_SA_CD_ARRAY,''|'', 1)) AS svDiag1MhSa,
        rClaimsDLOC(LKP_PROC_TYP_CD, MD_DERIV_PROC_RVNU_CD, SRVC_UNIT_CNT,
  svDiag1MhSa, ''U-'' || trim(PARS_AUTH_NBR), LKP_CLM_UNIT_TYP_CD, svLvlOfCareFound,
  LKP_CLM_LVL_OF_CARE_DERIV_TXT, LKP_CLM_LVL_OF_SRVC_DERIV_CD, svAuthFound,
  LKP_AUTH_LVL_OF_CARE_TXT, LKP_AUTH_LVL_OF_SRVC_CD,
  LKP_CLM_LVL_OF_CARE_SEQ_NBR, LKP_AUTH_LVL_OF_CARE_SEQ_NBR, svBothIntermediate) AS svdloc,

  Trim(split_part(svdloc,''#'',1)) AS LVL_OF_CARE_DERIV_TXT,
  CASE WHEN Trim(split_part(svdloc,''#'',1)) = ''Ancillary'' Then 1 Else Trim(split_part(svdloc,''#'',3)) END AS SVUNITS,
  CASE WHEN Trim(split_part(svdloc,''#'', 2)) = ''ANC'' OR Trim(split_part(svdloc,''#'', 2)) = ''ECT'' OR Trim(split_part(svdloc,''#'', 2)) = ''TRA''
            OR Trim(split_part(svdloc,''#'', 2)) = ''ER'' OR Trim(split_part(svdloc,''#'', 2)) = ''HCB'' OR Trim(split_part(svdloc,''#'', 2)) = ''LAB''
            OR Trim(split_part(svdloc,''#'', 2)) = ''RX'' OR Trim(split_part(svdloc,''#'', 2)) = ''TMS'' THEN Trim(split_part(svdloc,''#'', 2))
       WHEN Length(trim(nvl(svDiag1MhSa,''''))) = 0 Then ''U'' || substr(Trim(split_part(svdloc,''#'', 2)),2,2)
       when svDiag1MhSa = ''SA'' Then ''C'' || substr(Trim(split_part(svdloc,''#'', 2)),2,2)
       else ''P'' || substr(Trim(split_part(svdloc,''#'', 2)),2,2) end as LVL_OF_SRVC_DERIV_CD,
  CASE WHEN Length(nvl(LKP_CLM_MBR_BTH_DT,'''')) = 0 Then ''-1'' Else to_date(LKP_CLM_MBR_BTH_DT) END AS svDobValidate,
  CASE WHEN svDobValidate <> ''-1'' And substr(LKP_CLM_MBR_BTH_DT,1,4) > ''1800''
      Then (substr(FST_SRVC_DT,1,4) - substr(LKP_CLM_MBR_BTH_DT,1,4)) * 12 + (substr(FST_SRVC_DT,6,2) - substr(LKP_CLM_MBR_BTH_DT,6,2)) Else 0 END AS svAgeInMths,
  CASE WHEN svAgeInMths > 1600 or svAgeInMths < 0 Then 0 Else svAgeInMths END AS MBR_IN_MO_AGE
        FROM TEMP_LKP_CTGYA) ;



CREATE OR REPLACE TRANSIENT TABLE COMPACT.TB_CLM_UNET_CLM_SRVC AS
(SELECT distinct
 LKP_UNET_CLM_SRVC_SYS_ID_TGT AS UNET_CLM_SRVC_SYS_ID,
LKP_UNET_CLM_HEAD_SYS_ID AS            UNET_CLM_HEAD_SYS_ID,
LKP_PROV_SYS_ID AS PROV_ENTY_SYS_ID,
TRIM(DTL_LN_NBR) AS CLM_AUD_LN_NBR,
TRIM(CLM_AUD_NBR) AS CLM_AUD_NBR,
TRIM(CLM_DUP_KEY_BRK_NBR) AS CLM_AUD_DUP_KEY_BRKR_NBR,
SYS_ENT_DT AS CLM_AUD_SYS_ENT_DT,
SYS_ENT_SEQ_NBR AS CLM_AUD_SYS_ENT_SEQ_NBR,
TRIM(TRANS_CD) AS CLM_AUD_TRANS_CD,
CASE WHEN (LKP_PYMT_RSN_CD = ''OL'' Or  LKP_PYMT_RSN_CD = ''PL'' Or LKP_PYMT_RSN_CD = ''PK'') and PROV_CONTR_MKT_NBR <> ''0099800'' Then ''Y'' Else ''N'' END AS ACCOM_FLG ,
ALLW_AMT AS AMT_ALLW_AMT,
NET_PD_AMT + COINS_AMT + COPAY_AMT + DED_AMT + PROV_WTHLD_AMT + COB_RDUC_AMT + COB_SV_AMT as AMT_ALLW_DERIV_AMT ,
BEN_LMT_AMT as AMT_BEN_LMT_AMT,
BEN_PAY_AMT as AMT_BEN_PAY_AMT,
CALC_PD_AMT as AMT_CALC_PD_AMT,
COB_SV_AMT + COB_RDUC_AMT as AMT_COB_AMT,
COB_RDUC_AMT as AMT_COB_RDUC_AMT,
COB_SV_AMT as AMT_COB_SV_AMT,
COINS_AMT as AMT_COINS_AMT,
SRC_CONTR_AMT as AMT_CONTR_AMT,
CONTR_WTHLD_CNTNGY_RSRV_AMT AS AMT_CONTR_WTHLD_CNTNGY_RSRV_AMT,
COPAY_AMT AS AMT_COPAY_AMT,
COV_AMT AS AMT_COV_AMT,
DED_AMT AS AMT_DED_AMT,
RDUC_AMT AS AMT_DSALLW_AMT,
CASE WHEN SRC_NOT_COV_AMT = DSCNT_AMT and DSCNT_AMT <> 0 And SRC_CONTR_AMT = 0 Then 0 Else DSCNT_AMT + SPCL_NEGOT_DSCNT_AMT END AS AMT_DSCNT_AMT,
DUP_CHRG_AMT as AMT_DUP_CHRG_AMT,
ELIG_AMT as AMT_ELIG_AMT,
ENCTR_PRC_AMT as AMT_ENCTR_PRC_AMT,
LIAB_CHRG_AMT as AMT_LIAB_CHRG_AMT,
COINS_AMT + COPAY_AMT + DED_AMT + COB_RDUC_AMT + COB_SV_AMT as AMT_MBR_RESP_AMT,
NON_DUP_CHRG_AMT as AMT_NON_DUP_CHRG_AMT,
PAY_RDUC_AMT as AMT_PAY_RDUC_AMT,
NET_PD_AMT as AMT_PD_AMT,
PHYSN_FINC_ALLW_AMT AS AMT_PROV_FINC_ALLW_AMT,
PROV_SANCTION_AMT AS AMT_PROV_SNCT_AMT,
RCNSD_RDUC_AMT AS AMT_RCNSD_RDUC_AMT,
PROV_WTHLD_AMT AS AMT_RSRV_AMT,
SBMT_CHRG_AMT AS AMT_SBMT_AMT,
SPCL_NEGOT_DSCNT_AMT AS AMT_SPCL_NEGOT_DSCNT_AMT,
SRC_CHRG_AMT AS AMT_SRC_CHRG_AMT,
CASE WHEN SRC_CHRG_AMT = BEN_LMT_AMT and NET_PD_AMT = 0 Then BEN_LMT_AMT WHEN SRC_NOT_COV_AMT <> BEN_LMT_AMT And BEN_LMT_AMT <> 0 Then SRC_NOT_COV_AMT + BEN_LMT_AMT + COB_SV_AMT - SPCL_NEGOT_DSCNT_AMT WHEN SRC_NOT_COV_AMT = DSCNT_AMT And DSCNT_AMT <> 0 And SRC_CONTR_AMT <> 0 Then 0 Else SRC_NOT_COV_AMT + COB_SV_AMT - SPCL_NEGOT_DSCNT_AMT END AS AMT_SRC_DISALLW_AMT ,
SRC_PD_AMT AS AMT_SRC_PD_AMT,
TRIM(PARS_AUTH_NBR) AS AUTH_PARS_NBR,
BEN_LVL_SYS_ID as BEN_LVL_SRC_CD,
CASE WHEN BEN_LVL_SYS_ID = 0 Or BEN_LVL_SYS_ID = 3 Or  BEN_LVL_SYS_ID = 4 Then '''' WHEN BEN_LVL_SYS_ID = 1 Then ''NT'' WHEN BEN_LVL_SYS_ID = 2 Then ''NN'' Else '''' END AS BEN_LVL_DERIV_CD,
TRIM(THREE_TIER_BEN_CD) AS BEN_LVL_TIER_CD,
TRIM(CLM_ADJ_CD) AS CLM_ADJ_CD,
TRIM(ASGN_ADJD_OFC_CD) AS CLM_ASGN_ADJD_OFC_CD,
Trim(BNK_DESG_CD) || Trim(DRFT_NBR) AS CLM_CHK_NBR,
ENCTR_CD AS CLM_ENCTR_CD,
SRVC_CURR_IND AS CLM_LN_NBR_IS_CURR_FLG,
CUST_SEG_NBR AS CLM_MBR_CUST_SEG_NBR,
MBR_SYS_ID AS CLM_MBR_SRC_SYS_ID,
MBR_SYS_ID AS CLM_MBR_SYS_ID,
ADJD_DT AS CLM_SRVC_ADJD_DT,
FST_SRVC_DT AS CLM_SRVC_FROM_DT,
ORIG_PD_DT AS CLM_SRVC_ORIG_PD_DT,
CLM_PD_DT AS CLM_SRVC_PD_DT,
PST_DT AS CLM_SRVC_PST_DT,
LST_SRVC_DT AS CLM_SRVC_THRU_DT,
ADJ_SRVC_UNIT_CNT AS CLM_SRVC_UNIT_ADJ_CNT,
SRVC_UNIT_CNT AS CLM_SRVC_UNIT_CNT,
case when (PROC_CPT_TYP_CD=''AO'' or PROC_CPT_TYP_CD=''AO/MD'') Then 0 when SRVC_UNIT_CNT < 0 and svUnits > 0 Then 0-svUnits Else svUnits
end AS CLM_SRVC_UNIT_DERIV_CNT,
TRIM(LKP_CLM_UNIT_TYP_CD) AS CLM_SRVC_UNIT_OF_MSR_DESC,
OPT_SRVC_CNT_IND AS CLM_SRVC_UNIT_OPT_CNT_FLG,
CHRG_STS_CD AS CLM_STS_CD,
CPTATN_FUND_CD,
CPTATN_FUND_DERIV_CD,
CASE WHEN split_part(LKP_MH_SA_CD_ARRAY,''|'',1) = ''SA'' Or split_part(LKP_MH_SA_CD_ARRAY,''|'',2) = ''SA''  Or split_part(LKP_MH_SA_CD_ARRAY, ''|'',3) = ''SA'' Or split_part(LKP_MH_SA_CD_ARRAY,''|'',4) = ''SA'' Then ''Y'' Else ''N'' END AS DIAG_SBSTNC_ABUS_FLG,
TRIM(DIAG_1_CD) AS DIAG_1_CD,
TRIM(DIAG_2_CD) AS DIAG_2_CD,
TRIM(DIAG_3_CD) AS DIAG_3_CD,
TRIM(DIAG_4_CD) AS DIAG_4_CD,
LKP_UNET_CLM_SRVC_SYS_ID_TGT AS GALA_UNET_CLM_SRVC_SYS_ID,
Trim(CLM_AUD_NBR) || ''-'' || MBR_SYS_ID || ''-'' || Trim(DTL_LN_NBR) || ''-'' || SUBSTR(SYS_ENT_DT,1,10) || ''-'' || SYS_ENT_SEQ_NBR || ''-'' || Trim(CLM_DUP_KEY_BRK_NBR) || ''-'' || Trim(TRANS_CD) AS GALA_UNET_CLM_SRVC_UNIQ_ID,
ADJ_HCCC_CD AS HCCC_ADJ_CD,
LVL_OF_CARE_DERIV_TXT,
LVL_OF_SRVC_DERIV_CD,
TRIM(ORIG_SRVC_CD) AS LVL_OF_SRVC_SRC_CD,
MBR_IN_MO_AGE ,
--CASE WHEN (CASE WHEN (CASE WHEN Length(LKP_CLM_MBR_BTH_DT) = 0 Then -1 Else IS_DATE(to_variant(LKP_CLM_MBR_BTH_DT)) END) <> -1 And SUBSTR(LKP_CLM_MBR_BTH_DT,1,4) > ''1800'' Then (SUBSTR(FST_SRVC_DT,1,4) - SUBSTR(LKP_CLM_MBR_BTH_DT,1,4)) * 12 + (SUBSTR(FST_SRVC_DT,6,2) - SUBSTR(LKP_CLM_MBR_BTH_DT,6,2)) Else 0 END) > 1600 or (CASE WHEN (CASE WHEN Length(LKP_CLM_MBR_BTH_DT) = 0 Then -1 Else IS_DATE(to_variant(LKP_CLM_MBR_BTH_DT)) END) <> -1 And SUBSTR(LKP_CLM_MBR_BTH_DT,1,4) > ''1800'' Then (SUBSTR(FST_SRVC_DT,1,4) - SUBSTR(LKP_CLM_MBR_BTH_DT,1,4)) * 12 + (SUBSTR(FST_SRVC_DT,6,2) - SUBSTR(LKP_CLM_MBR_BTH_DT,6,2)) Else 0 END) < 0 Then 0 Else (CASE WHEN (CASE WHEN Length(LKP_CLM_MBR_BTH_DT) = 0 Then -1 Else is_date(to_variant(LKP_CLM_MBR_BTH_DT)) END) <> -1 And SUBSTR(LKP_CLM_MBR_BTH_DT,1,4) > ''1800'' Then (SUBSTR(FST_SRVC_DT,1,4) - SUBSTR(LKP_CLM_MBR_BTH_DT,1,4)) * 12 + (SUBSTR(FST_SRVC_DT,6,2) - SUBSTR(LKP_CLM_MBR_BTH_DT,6,2)) Else 0 END) END AS MBR_IN_MO_AGE,
NON_UHG_EE_IND AS MBR_NON_UHG_EE_FLG,
OPT_OUT_IND AS OPT_OUT_NTWK_FLG,
CASE WHEN POS_REC_EXISTS<>1 Or LKP_PL_OF_SRVC_AMA_CD = ''99'' Then '''' WHEN  Length(Trim(nvl(LKP_PL_OF_SRVC_AMA_CD,''''))) > 0 Then  Trim(LKP_PL_OF_SRVC_AMA_CD) Else Trim(LKP_PL_OF_SRVC_CD) end as PL_OF_SRVC_AMA_CD,
case when TRIM(POS_REC_EXISTS) <> 1 Then 0 Else try_cast(LKP_PL_OF_SRVC_CD as integer) end as PL_OF_SRVC_CD,
DERIV_PROC_RVNU_CD AS PROC_CD,
CASE WHEN PROC_REC_EXISTS<0.1 Or LKP_PROC_MOD_GRP_CD = ''UN'' Then '''' Else LKP_PROC_MOD_CD END AS PROC_MOD_CD,
TRIM(SRVC_PROV_CATGY_CD) AS PROV_CATGY_CD,
PROV_CONTR_MKT_NBR,
CASE WHEN PROV_PRTCP_STS_CD IS NULL then ''O''
WHEN Trim(PROV_PRTCP_STS_CD) = ''P'' then ''I''
WHEN (Trim(PROV_PRTCP_STS_CD) = '''' or Trim(PROV_PRTCP_STS_CD) = ''N'' ) then ''O''
WHEN (Trim(PROV_PRTCP_STS_CD) = ''T'' and (
Trim(NVL(DSCNT_TYP_CD,'''')) = ''C'' OR Trim(NVL( DSCNT_TYP_CD,'''')) =''N'' OR Trim(NVL(DSCNT_TYP_CD,'''')) =''Y''))
then ''I''
WHEN (Trim(PROV_PRTCP_STS_CD) = ''T'' and (
Trim(NVL(DSCNT_TYP_CD,'''')) <> ''C'' and Trim(NVL( DSCNT_TYP_CD,'''')) <> ''N'' and Trim(NVL(DSCNT_TYP_CD,'''')) <> ''Y''))
then ''O''
Else ''U'' END AS PROV_IN_NTWK_DERIV_CD,
TRIM(PROV_PRTCP_STS_CD) AS PROV_PRTCP_STS_CD,
PREF_PROV_CD AS PROV_PREF_PROV_CD,
PROV_ALT_ID AS PROV_SRC_MPIN_NBR,
SRVC_PROV_ROW_EFF_DT AS PROV_SRC_ROW_EFF_DT,
SRVC_PROV_SYS_ID AS PROV_SRC_SYS_ID,
LKP_CTY_NM AS PROV_SRVC_CTY_NM,
LKP_ST_ABBR_CD AS PROV_SRVC_ST_CD,
TRIM(PROV_TIN) AS PROV_TIN,
PROV_TIN_PRFX_CD,
TRIM(PROV_TIN_SUFX_CD) AS PROV_TIN_SUFX_CD,
NVL(PROV_PAYE_NM,'''') AS PROV_PAYE_NM,
CASE WHEN Length(Trim(nvl(SRVC_PROV_NPI_NBR,''''))) > 0 Then SRVC_PROV_NPI_NBR when Length(Trim(nvl(CLM_SRC_PROV_CLM_BIL_NPI_ID,''''))) > 0 Then CLM_SRC_PROV_CLM_BIL_NPI_ID Else '''' end as PROV_CLM_NPI_ID,
TRIM(PROV_ZIP_CD) AS PROV_SRVC_ZIP_CD,
NVL(LKP_PYMT_RSN_CD,'''') AS PYMT_RSN_CD,
NVL(LKP_PYMT_RSN_CD_DESC,'''') AS PYMT_RSN_CD_DESC,
FNL_RSN_CD_SYS_ID AS PYMT_RSN_CD_SYS_ID,
FNL_RCNSD_RSN_CD_SYS_ID AS PYMT_RSN_FNL_RCNSD_CD_SYS_ID,
LKP_PYMT_RSN_FNL_RCNSD_RSN_CD AS PYMT_RSN_FNL_RCNSD_RSN_CD,
LKP_PYMT_RSN_FNL_RCNSD_RSN_CD_DESC AS PYMT_RSN_FNL_RCNSD_RSN_CD_DESC,
TRIM(OVRIDE_CD) AS PYMT_OVRIDE_CD,
LKP_CLM_LVL_RSN_CD AS CLM_LVL_RSN_CD,
LKP_CLM_LVL_RSN_CD_DESC AS CLM_LVL_RSN_CD_DESC,
SRC_SYS_CD,
PL_OF_SRVC_SYS_ID AS SRC_SYS_PL_OF_SRVC_SYS_ID,
SRC_SYS_GRP_CD AS SRC_SYS_RPT_GRP_CD,
TRIM(CLM_AUTH_NBR) AS CLM_AUTH_NBR,
LKP_AUTH_SYS_ID AS AUTH_SYS_ID,
LOAD_DT AS SRC_REC_CRT_DTTM,
UPDT_DT AS SRC_REC_UPDT_DTTM,
REC_CRT_DTTM,
CURRENT_DATE() AS REC_UPDT_DTTM,
REC_XTRCT_SRC_CD,
REC_INPUT_SRC_CD,
BTCH_LOAD_DT,
case when SUBSTR(CLM_AUD_NBR,10,1) >= 0 then to_number(SUBSTR(CLM_AUD_NBR,10,1)) else 0 end AS ETL_XTRCT_SEQ_NBR,
CLM_MBR_ALT_ID,
PAYE_ASGN_CD AS PRI_PAYE_CD,
CASE WHEN NVL(PAYE_ASGN_CD,'''')=''1'' Then ''SUBSCRIBER''
WHEN NVL(PAYE_ASGN_CD,'''')=''2''  Then ''PROVIDER''
WHEN NVL(PAYE_ASGN_CD,'''')=''A'' Then ''ALTERNATE''
WHEN NVL(PAYE_ASGN_CD,'''')=''3'' Then ''PAY EMPLOYER''
WHEN NVL(PAYE_ASGN_CD,'''')=''4'' Then ''PAY SPECIAL PAYEE''    WHEN NVL(PAYE_ASGN_CD,'''')=''5'' Then ''PAY SUBSCRIBER AND PROVIDER''
WHEN NVL(PAYE_ASGN_CD,'''')=''T'' Then ''PAY SUBSCRIBER''   Else
''U'' END AS PRI_PAYE_CD_DESC,
ICD_DIAG_TYP_CD,
MD_DERIV_PROC_RVNU_CD AS DERIV_PROC_CD,
'''' AS BIL_RVNU_CD,
CLM_SRVC_PROC_MOD_2_CD,
CLM_SRVC_PROC_MOD_3_CD,
CLM_SRVC_PROC_MOD_4_CD,
CLM_SRVC_RVNU_CD,
CLM_SRVC_SEC_PROC_CD,
CLM_SRC_PROV_CLM_BIL_NPI_ID,
CLM_SRC_PROV_CLM_REF_NPI_ID,
CLM_SRC_PROV_CLM_ATD_NPI_ID,
CASE WHEN SRVC_PROV_NPI_NBR IS NULL Then '''' Else SRVC_PROV_NPI_NBR END AS CLM_SRC_PROV_CLM_SRVC_NPI_ID,
CLM_SRVC_BIL_PROC_CD,
FINC_LIAB
FROM TEMP_LKP1_CTGYA1);


SELECT COUNT(1) INTO ins_cnt FROM COMPACT.TB_CLM_UNET_CLM_SRVC;
 SELECT CURRENT_TIMESTAMP() INTO load_end_ts ;


 INSERT INTO ETL.DBA_PROCESS_LOG VALUES
 (:unique_id,''TB_CLM_UNET_CLM_SRVC'',''TB_CLM_UNET_CLM_SRVC'',''LOAD'',0,0,:load_strt_ts,:load_end_ts,
 CURRENT_TIMESTAMP,:ins_cnt,0,0) ;
 result:=''TB_CLM_UNET_CLM_SRVC refresh completed successfully'';
 return result;
 end;


  ';