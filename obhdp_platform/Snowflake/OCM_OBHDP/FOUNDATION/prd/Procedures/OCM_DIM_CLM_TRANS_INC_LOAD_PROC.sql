CREATE  OR REPLACE PROCEDURE ECT_PRD_OBH_DP_DB.FOUNDATION.OCM_DIM_CLM_TRANS_INC_LOAD_PROC()
RETURNS VARCHAR
LANGUAGE javascript
COMMENT='Loads the data to intermediate OCM_DIM_CLM_TRANS FOUNDATION table from OCM tables on incremental load'
EXECUTE as caller
AS
$$

try {

var sql_DW_CLM_SRVC_LN_max_load_timestamp_Statement = snowflake.createStatement({sqlText:"SELECT MAX(DW_CHG_DTTM) FROM ECT_PRD_CLAIMS_DB.FOUNDATION.DW_CLM_SRVC_LN;"});
var res_DW_CLM_SRVC_LN_max_load_timestamp = sql_DW_CLM_SRVC_LN_max_load_timestamp_Statement.execute();

var sql_DW_CLM_TRANS_max_load_timestamp_Statement = snowflake.createStatement({sqlText:"SELECT MAX(DW_CHG_DTTM) FROM ECT_PRD_CLAIMS_DB.FOUNDATION.DW_CLM_TRANS;"});
var res_DW_CLM_TRANS_max_load_timestamp = sql_DW_CLM_TRANS_max_load_timestamp_Statement.execute();

var sql_DW_CLM_OTHR_PAYR_SBSCR_max_load_timestamp_Statement = snowflake.createStatement({sqlText:"SELECT MAX(DW_CHG_DTTM) FROM ECT_PRD_CLAIMS_DB.FOUNDATION.DW_CLM_OTHR_PAYR_SBSCR;"});
var res_DW_CLM_OTHR_PAYR_SBSCR_max_load_timestamp = sql_DW_CLM_OTHR_PAYR_SBSCR_max_load_timestamp_Statement.execute();

var sql_DW_CLM_DIAG_CD_max_load_timestamp_Statement = snowflake.createStatement({sqlText:"SELECT MAX(DW_CHG_DTTM) FROM ECT_PRD_CLAIMS_DB.FOUNDATION.DW_CLM_DIAG_CD;"});
var res_DW_CLM_DIAG_CD_max_load_timestamp = sql_DW_CLM_DIAG_CD_max_load_timestamp_Statement.execute();

var sql_DW_CLM_DIAG_REL_GRP_CD_max_load_timestamp_Statement = snowflake.createStatement({sqlText:"SELECT MAX(DW_CHG_DTTM) FROM ECT_PRD_CLAIMS_DB.FOUNDATION.DW_CLM_DIAG_REL_GRP_CD;"});
var res_DW_CLM_DIAG_REL_GRP_CD_max_load_timestamp = sql_DW_CLM_DIAG_REL_GRP_CD_max_load_timestamp_Statement.execute();

var sql_DW_CLM_ICD_PROC_CD_max_load_timestamp_Statement = snowflake.createStatement({sqlText:"SELECT MAX(DW_CHG_DTTM) FROM ECT_PRD_CLAIMS_DB.FOUNDATION.DW_CLM_ICD_PROC_CD;"});
var res_DW_CLM_ICD_PROC_CD_max_load_timestamp = sql_DW_CLM_ICD_PROC_CD_max_load_timestamp_Statement.execute();


var sql_OCM_DIM_CLM_TRANS_merge_command = "merge into ECT_PRD_OBH_DP_DB.FOUNDATION.OCM_DIM_CLM_TRANS AS T using (SELECT DISTINCT CLM_SRVC_LN.DW_CLM_SRVC_LN_REC_ID CLM_TRANS_SYS_ID, CASE WHEN length(CLM_SRVC_LN.CLM_SRVC_LN_ID) = 1 THEN CONCAT('00', CLM_SRVC_LN.CLM_SRVC_LN_ID) WHEN length(CLM_SRVC_LN.CLM_SRVC_LN_ID) = 2 THEN CONCAT('0', CLM_SRVC_LN.CLM_SRVC_LN_ID) ELSE CLM_SRVC_LN.CLM_SRVC_LN_ID END CLM_AUD_LN_NBR, SPLIT_PART(CLM_SRVC_LN.CLM_TRANS_ID, ':', 2) CLM_AUD_NBR, 'COSM' CLM_AUD_SRC_SYS_CD, SUBSTR(CLM_SRVC_LN.CLM_TRANS_ID, 1, 3) CLM_SRC_COSM_DIV_CD, CLM_SRVC_LN.REF_PROV_NPI CLM_SRC_PROV_CLM_REF_NPI_ID, CLM_SRVC_LN.SRVC_DT CLM_TRANS_DT_SRVC_FROM_DT, CLM_SRVC_LN.SRVC_END_DT CLM_TRANS_DT_SRVC_THRU_DT, CLM_SRVC_LN.PLSRV_CD CLM_TRANS_PL_OF_SRVC_SRC_CD, CLM_SRVC_LN.PROC_MOD_2_CD CLM_TRANS_PROC_MOD_2_CD, CLM_SRVC_LN.PROC_MOD_3_CD CLM_TRANS_PROC_MOD_3_CD, CLM_SRVC_LN.PROC_MOD_4_CD CLM_TRANS_PROC_MOD_4_CD, CLM_SRVC_LN.PROC_MOD_1_CD CLM_TRANS_PROC_MOD_CD, CLM_SRVC_LN.OON_SRVC_IND CLM_TRANS_PROV_NTWK_DERIV_CD, CLM_SRVC_LN.RVNU_CD CLM_TRANS_RVNU_CD, CLM_SRVC_LN.RVNU_CD_DESC CLM_TRANS_RVNU_DESC, CLM_TRANS.STRT_SRVC_DT CLM_ETL_DW_FROM_DT, CLM_TRANS.BIL_PROV_NPI CLM_SRC_PROV_CLM_BIL_NPI_ID, CASE WHEN CLM_TRANS.RNDR_PROV_NPI IS NOT NULL THEN CLM_TRANS.RNDR_PROV_NPI WHEN CLM_TRANS.BIL_PROV_NPI IS NOT NULL THEN CLM_TRANS.BIL_PROV_NPI ELSE NULL END CLM_SRC_PROV_CLM_NPI_ID, CASE WHEN CLM_TRANS.CLM_ADJD_PLTFM_CD = 'Hospital' THEN CLM_TRANS.FACL_PROV_NPI WHEN CLM_TRANS.CLM_ADJD_PLTFM_CD = 'Professional' THEN CLM_SRVC_LN.RNDR_PROV_NPI END CLM_SRC_PROV_CLM_SRVC_NPI_ID, CLM_TRANS.BIL_PROV_TIN CLM_SRC_PROV_TAX_ID_NBR, CLM_TRANS.ADMIS_SRC_CD CLM_TRANS_ADMIT_SRC_CD, CLM_TRANS.ADMIS_TYP_CD CLM_TRANS_ADMIT_TYP_CD, CLM_TRANS.BEN_LVL_CAUS_CD CLM_TRANS_BEN_LVL_SRC_CD, CLM_TRANS.CLM_BIL_TYP CLM_TRANS_BILL_TYP_CD, CLM_TRANS.CHK_PAY_TRK_NBR CLM_TRANS_CHK_NBR, CASE WHEN CLM_TRANS.CLM_ADJD_PLTFM_CD = 'Hospital' THEN 1 WHEN CLM_TRANS.CLM_ADJD_PLTFM_CD = 'Professional' THEN 2 END CLM_TRANS_CLM_FM_TYP_CD, CONCAT('0', CLM_TRANS.DSCHRG_STS_CD) CLM_TRANS_DSCHRG_STS_CD, CLM_TRANS.CLM_ADJ_DT CLM_TRANS_DT_ADJD_DT, CLM_TRANS.ADMIS_DTTM CLM_TRANS_DT_ADMIT_DT, CLM_TRANS.STRT_SRVC_DT CLM_TRANS_DT_CLM_FST_SRVC_DT, CLM_TRANS.END_SRVC_DT CLM_TRANS_DT_CLM_LST_SRVC_DT, CLM_TRANS.CLM_ADJD_DT CLM_TRANS_DT_ENT_DT, CLM_TRANS.CHK_ISS_DT CLM_TRANS_DT_PD_DT, CLM_TRANS.CHK_ISS_DT CLM_TRANS_DT_PST_DT, CLM_TRANS.CLM_RECPT_DT CLM_TRANS_DT_RCVD_DT, CLM_TRANS.CLM_PAYE_ASGN_CD CLM_TRANS_PRI_PAYE_CD, CLM_TRANS.CLM_PAYE_ASGN_DESC CLM_TRANS_PRI_PAYE_CD_DESC, CLM_TRANS.CLM_SBMT_METH_CD CLM_TRANS_SBMT_SRC_DESC,CASE WHEN CLM_TRANS.CLM_TYP_CD = 'U' THEN 'TRUE' ELSE 'FALSE' END DERIV_OBH_FINC_LIAB, CONCAT(SUBSTR(CLM_OTHR_PAYR_SBSCR.CLM_TRANS_ID, 1, 3), '0', CLM_OTHR_PAYR_SBSCR.SBSCR_POL_NBR) CLM_SRC_MBR_CUST_SEG_NBR, CASE WHEN length(CLM_OTHR_PAYR_SBSCR.ELIG_REL_CD) = 1 THEN CONCAT('00', CLM_OTHR_PAYR_SBSCR.ELIG_REL_CD) WHEN length(CLM_OTHR_PAYR_SBSCR.ELIG_REL_CD) = 2 THEN CONCAT('0', CLM_OTHR_PAYR_SBSCR.ELIG_REL_CD) ELSE ELIG_REL_CD END CLM_SRC_MBR_DEPN_CD, CONCAT('00', CLM_OTHR_PAYR_SBSCR.SBSCR_MBR_NBR) CLM_SRC_MBR_SBSCR_ID,CASE WHEN CLM_DIAG_CD.DIAG_PRR_SEQ_NBR = 1 THEN CLM_DIAG_CD.DIAG_CD END CLM_TRANS_CLM_PRI_DIAG_CD, CASE WHEN CLM_DIAG_CD.DIAG_PRR_SEQ_NBR = 1 THEN CLM_DIAG_CD.DIAG_CD END CLM_TRANS_DIAG_1_CD, CASE WHEN CLM_DIAG_CD.DIAG_PRR_SEQ_NBR = 2 THEN CLM_DIAG_CD.DIAG_CD END CLM_TRANS_DIAG_2_CD, CLM_DIAG_REL_GRP_CD.DIAG_REL_GRP_CD CLM_TRANS_ENT_DIAG_REL_GRP_CD, CLM_ICD_PROC_CD.ICD_PROC_CD CLM_TRANS_SEC_PROC_CD, CLM_ICD_PROC_CD.ICD_PROC_CD_DESC CLM_TRANS_SEC_PROC_DESC, CLM_ICD_PROC_CD.ICD_VER ICD_DIAG_TYP_CD, CASE WHEN CLM_TRANS.CLM_ADJD_PLTFM_CD = 'Hospital' THEN CLM_SRVC_LN.RVNU_CD WHEN CLM_TRANS.CLM_ADJD_PLTFM_CD = 'Professional' THEN CLM_ICD_PROC_CD.ICD_PROC_CD END CLM_TRANS_PROC_CD, CASE WHEN CLM_TRANS.CLM_ADJD_PLTFM_CD = 'Hospital' THEN CLM_SRVC_LN.RVNU_CD_DESC WHEN CLM_TRANS.CLM_ADJD_PLTFM_CD = 'Professional' THEN CLM_ICD_PROC_CD.ICD_PROC_CD_DESC END CLM_TRANS_PROC_DESC FROM (SELECT CLM_TRANS_ID,BIL_PROV_NPI, RNDR_PROV_NPI, FACL_PROV_NPI, CLM_ADJD_PLTFM_CD, BIL_PROV_TIN, ADMIS_SRC_CD, ADMIS_TYP_CD, BEN_LVL_CAUS_CD, CLM_BIL_TYP, CHK_PAY_TRK_NBR, DSCHRG_STS_CD, CLM_ADJ_DT, ADMIS_DTTM, STRT_SRVC_DT, END_SRVC_DT, CLM_ADJD_DT, CHK_ISS_DT, CLM_RECPT_DT, CLM_PAYE_ASGN_CD, CLM_PAYE_ASGN_DESC, CLM_SBMT_METH_CD, CLM_TYP_CD FROM ECT_PRD_CLAIMS_DB.FOUNDATION.DW_CLM_TRANS WHERE CLM_SRC_SYS_CD = 'COS' AND DW_CHG_DTTM >= (SELECT NVL((SELECT LAST_LOAD_TIMESTAMP FROM ECT_PRD_OBH_DP_DB.FOUNDATION.OCM_OBHDP_LOAD_TIME WHERE PROC_NAME = 'OCM_DIM_CLM_TRANS_INC_LOAD_PROC' AND OCM_TABLE_NAME = 'DW_CLM_TRANS'),(SELECT min(DW_CHG_DTTM) FROM ECT_PRD_CLAIMS_DB.FOUNDATION.DW_CLM_TRANS)))) AS CLM_TRANS INNER JOIN ECT_PRD_CLAIMS_DB.FOUNDATION.DW_CLM_SRVC_LN CLM_SRVC_LN ON CLM_TRANS.CLM_TRANS_ID = CLM_SRVC_LN.CLM_TRANS_ID LEFT JOIN ECT_PRD_CLAIMS_DB.FOUNDATION.DW_CLM_OTHR_PAYR_SBSCR CLM_OTHR_PAYR_SBSCR ON CLM_TRANS.CLM_TRANS_ID = CLM_OTHR_PAYR_SBSCR.CLM_TRANS_ID LEFT JOIN ECT_PRD_CLAIMS_DB.FOUNDATION.DW_CLM_DIAG_CD CLM_DIAG_CD ON CLM_TRANS.CLM_TRANS_ID = CLM_DIAG_CD.CLM_TRANS_ID LEFT JOIN ECT_PRD_CLAIMS_DB.FOUNDATION.DW_CLM_DIAG_REL_GRP_CD CLM_DIAG_REL_GRP_CD ON CLM_TRANS.CLM_TRANS_ID = CLM_DIAG_REL_GRP_CD.CLM_TRANS_ID LEFT JOIN ECT_PRD_CLAIMS_DB.FOUNDATION.DW_CLM_ICD_PROC_CD CLM_ICD_PROC_CD ON CLM_TRANS.CLM_TRANS_ID = CLM_ICD_PROC_CD.CLM_TRANS_ID) AS S on (T.CLM_TRANS_SYS_ID = S.CLM_TRANS_SYS_ID AND EQUAL_NULL(T.CLM_TRANS_DIAG_1_CD, S.CLM_TRANS_DIAG_1_CD) AND EQUAL_NULL(T.CLM_TRANS_DIAG_2_CD, S.CLM_TRANS_DIAG_2_CD) AND EQUAL_NULL(T.CLM_TRANS_CLM_PRI_DIAG_CD, S.CLM_TRANS_CLM_PRI_DIAG_CD) AND EQUAL_NULL(T.CLM_TRANS_PROC_CD, S.CLM_TRANS_PROC_CD) AND EQUAL_NULL(T.CLM_TRANS_SEC_PROC_CD, S.CLM_TRANS_SEC_PROC_CD) AND EQUAL_NULL(T.CLM_TRANS_PL_OF_SRVC_SRC_CD, S.CLM_TRANS_PL_OF_SRVC_SRC_CD) AND EQUAL_NULL(T.CLM_TRANS_PROV_NTWK_DERIV_CD, S.CLM_TRANS_PROV_NTWK_DERIV_CD) AND EQUAL_NULL(T.ICD_DIAG_TYP_CD, S.ICD_DIAG_TYP_CD) AND EQUAL_NULL(T.CLM_TRANS_ENT_DIAG_REL_GRP_CD, S.CLM_TRANS_ENT_DIAG_REL_GRP_CD)) when matched then update set T.CLM_AUD_LN_NBR = S.CLM_AUD_LN_NBR, T.CLM_AUD_NBR = S.CLM_AUD_NBR, T.CLM_AUD_SRC_SYS_CD = S.CLM_AUD_SRC_SYS_CD, T.CLM_SRC_COSM_DIV_CD = S.CLM_SRC_COSM_DIV_CD, T.CLM_SRC_PROV_CLM_REF_NPI_ID = S.CLM_SRC_PROV_CLM_REF_NPI_ID, T.CLM_TRANS_DT_SRVC_FROM_DT = S.CLM_TRANS_DT_SRVC_FROM_DT, T.CLM_TRANS_DT_SRVC_THRU_DT = S.CLM_TRANS_DT_SRVC_THRU_DT, T.CLM_TRANS_PL_OF_SRVC_SRC_CD = S.CLM_TRANS_PL_OF_SRVC_SRC_CD, T.CLM_TRANS_PROC_MOD_2_CD = S.CLM_TRANS_PROC_MOD_2_CD, T.CLM_TRANS_PROC_MOD_3_CD = S.CLM_TRANS_PROC_MOD_3_CD, T.CLM_TRANS_PROC_MOD_4_CD = S.CLM_TRANS_PROC_MOD_4_CD, T.CLM_TRANS_PROC_MOD_CD = S.CLM_TRANS_PROC_MOD_CD, T.CLM_TRANS_PROV_NTWK_DERIV_CD = S.CLM_TRANS_PROV_NTWK_DERIV_CD, T.CLM_TRANS_RVNU_CD = S.CLM_TRANS_RVNU_CD, T.CLM_TRANS_RVNU_DESC = S.CLM_TRANS_RVNU_DESC, T.CLM_ETL_DW_FROM_DT = S.CLM_ETL_DW_FROM_DT, T.CLM_SRC_PROV_CLM_BIL_NPI_ID = S.CLM_SRC_PROV_CLM_BIL_NPI_ID, T.CLM_SRC_PROV_CLM_NPI_ID = S.CLM_SRC_PROV_CLM_NPI_ID,T.CLM_SRC_PROV_CLM_SRVC_NPI_ID = S.CLM_SRC_PROV_CLM_SRVC_NPI_ID, T.CLM_SRC_PROV_TAX_ID_NBR = S.CLM_SRC_PROV_TAX_ID_NBR, T.CLM_TRANS_ADMIT_SRC_CD = S.CLM_TRANS_ADMIT_SRC_CD, T.CLM_TRANS_ADMIT_TYP_CD = S.CLM_TRANS_ADMIT_TYP_CD, T.CLM_TRANS_BEN_LVL_SRC_CD = S.CLM_TRANS_BEN_LVL_SRC_CD,T.CLM_TRANS_BILL_TYP_CD = S.CLM_TRANS_BILL_TYP_CD, T.CLM_TRANS_CHK_NBR = S.CLM_TRANS_CHK_NBR, T.CLM_TRANS_CLM_FM_TYP_CD = S.CLM_TRANS_CLM_FM_TYP_CD, T.CLM_TRANS_DSCHRG_STS_CD = S.CLM_TRANS_DSCHRG_STS_CD, T.CLM_TRANS_DT_ADJD_DT = S.CLM_TRANS_DT_ADJD_DT, T.CLM_TRANS_DT_ADMIT_DT = S.CLM_TRANS_DT_ADMIT_DT, T.CLM_TRANS_DT_CLM_FST_SRVC_DT = S.CLM_TRANS_DT_CLM_FST_SRVC_DT, T.CLM_TRANS_DT_CLM_LST_SRVC_DT = S.CLM_TRANS_DT_CLM_LST_SRVC_DT, T.CLM_TRANS_DT_ENT_DT = S.CLM_TRANS_DT_ENT_DT, T.CLM_TRANS_DT_PD_DT = S.CLM_TRANS_DT_PD_DT, T.CLM_TRANS_DT_PST_DT = S.CLM_TRANS_DT_PST_DT, T.CLM_TRANS_DT_RCVD_DT = S.CLM_TRANS_DT_RCVD_DT, T.CLM_TRANS_PRI_PAYE_CD = S.CLM_TRANS_PRI_PAYE_CD, T.CLM_TRANS_PRI_PAYE_CD_DESC = S.CLM_TRANS_PRI_PAYE_CD_DESC, T.CLM_TRANS_SBMT_SRC_DESC = S.CLM_TRANS_SBMT_SRC_DESC, T.CLM_SRC_MBR_CUST_SEG_NBR = S.CLM_SRC_MBR_CUST_SEG_NBR, T.DERIV_OBH_FINC_LIAB = S.DERIV_OBH_FINC_LIAB, T.CLM_SRC_MBR_DEPN_CD = S.CLM_SRC_MBR_DEPN_CD,T.CLM_SRC_MBR_SBSCR_ID = S.CLM_SRC_MBR_SBSCR_ID, T.CLM_TRANS_CLM_PRI_DIAG_CD = S.CLM_TRANS_CLM_PRI_DIAG_CD,T.CLM_TRANS_DIAG_1_CD = S.CLM_TRANS_DIAG_1_CD, T.CLM_TRANS_DIAG_2_CD = S.CLM_TRANS_DIAG_2_CD, T.CLM_TRANS_ENT_DIAG_REL_GRP_CD = S.CLM_TRANS_ENT_DIAG_REL_GRP_CD,T.CLM_TRANS_SEC_PROC_CD = S.CLM_TRANS_SEC_PROC_CD, T.CLM_TRANS_SEC_PROC_DESC = S.CLM_TRANS_SEC_PROC_DESC, T.ICD_DIAG_TYP_CD = S.ICD_DIAG_TYP_CD, T.CLM_TRANS_PROC_CD = S.CLM_TRANS_PROC_CD, T.CLM_TRANS_PROC_DESC = S.CLM_TRANS_PROC_DESC, T.SF_UPDATE_DATETIME = CURRENT_TIMESTAMP() when not matched then INSERT(CLM_TRANS_SYS_ID, CLM_AUD_LN_NBR, CLM_AUD_NBR, CLM_AUD_SRC_SYS_CD, CLM_SRC_COSM_DIV_CD, CLM_SRC_PROV_CLM_REF_NPI_ID, CLM_TRANS_DT_SRVC_FROM_DT, CLM_TRANS_DT_SRVC_THRU_DT, CLM_TRANS_PL_OF_SRVC_SRC_CD, CLM_TRANS_PROC_MOD_2_CD, CLM_TRANS_PROC_MOD_3_CD, CLM_TRANS_PROC_MOD_4_CD, CLM_TRANS_PROC_MOD_CD, CLM_TRANS_PROV_NTWK_DERIV_CD, CLM_TRANS_RVNU_CD, CLM_TRANS_RVNU_DESC, CLM_ETL_DW_FROM_DT, CLM_SRC_PROV_CLM_BIL_NPI_ID, CLM_SRC_PROV_CLM_NPI_ID, CLM_SRC_PROV_CLM_SRVC_NPI_ID,CLM_SRC_PROV_TAX_ID_NBR, CLM_TRANS_ADMIT_SRC_CD, CLM_TRANS_ADMIT_TYP_CD, CLM_TRANS_BEN_LVL_SRC_CD, CLM_TRANS_BILL_TYP_CD, CLM_TRANS_CHK_NBR, CLM_TRANS_CLM_FM_TYP_CD, CLM_TRANS_DSCHRG_STS_CD, CLM_TRANS_DT_ADJD_DT, CLM_TRANS_DT_ADMIT_DT, CLM_TRANS_DT_CLM_FST_SRVC_DT, CLM_TRANS_DT_CLM_LST_SRVC_DT, CLM_TRANS_DT_ENT_DT, CLM_TRANS_DT_PD_DT, CLM_TRANS_DT_PST_DT, CLM_TRANS_DT_RCVD_DT, CLM_TRANS_PRI_PAYE_CD, CLM_TRANS_PRI_PAYE_CD_DESC, CLM_TRANS_SBMT_SRC_DESC, DERIV_OBH_FINC_LIAB, CLM_SRC_MBR_CUST_SEG_NBR, CLM_SRC_MBR_DEPN_CD, CLM_SRC_MBR_SBSCR_ID, CLM_TRANS_CLM_PRI_DIAG_CD, CLM_TRANS_DIAG_1_CD, CLM_TRANS_DIAG_2_CD, CLM_TRANS_ENT_DIAG_REL_GRP_CD,CLM_TRANS_SEC_PROC_CD, CLM_TRANS_SEC_PROC_DESC, ICD_DIAG_TYP_CD, CLM_TRANS_PROC_CD, CLM_TRANS_PROC_DESC) values (S.CLM_TRANS_SYS_ID, S.CLM_AUD_LN_NBR, S.CLM_AUD_NBR, S.CLM_AUD_SRC_SYS_CD, S.CLM_SRC_COSM_DIV_CD, S.CLM_SRC_PROV_CLM_REF_NPI_ID, S.CLM_TRANS_DT_SRVC_FROM_DT, S.CLM_TRANS_DT_SRVC_THRU_DT, S.CLM_TRANS_PL_OF_SRVC_SRC_CD, S.CLM_TRANS_PROC_MOD_2_CD, S.CLM_TRANS_PROC_MOD_3_CD, S.CLM_TRANS_PROC_MOD_4_CD, S.CLM_TRANS_PROC_MOD_CD, S.CLM_TRANS_PROV_NTWK_DERIV_CD, S.CLM_TRANS_RVNU_CD, S.CLM_TRANS_RVNU_DESC, S.CLM_ETL_DW_FROM_DT, S.CLM_SRC_PROV_CLM_BIL_NPI_ID, S.CLM_SRC_PROV_CLM_NPI_ID, S.CLM_SRC_PROV_CLM_SRVC_NPI_ID, S.CLM_SRC_PROV_TAX_ID_NBR, S.CLM_TRANS_ADMIT_SRC_CD, S.CLM_TRANS_ADMIT_TYP_CD, S.CLM_TRANS_BEN_LVL_SRC_CD, S.CLM_TRANS_BILL_TYP_CD, S.CLM_TRANS_CHK_NBR, S.CLM_TRANS_CLM_FM_TYP_CD, S.CLM_TRANS_DSCHRG_STS_CD, S.CLM_TRANS_DT_ADJD_DT, S.CLM_TRANS_DT_ADMIT_DT, S.CLM_TRANS_DT_CLM_FST_SRVC_DT, S.CLM_TRANS_DT_CLM_LST_SRVC_DT, S.CLM_TRANS_DT_ENT_DT, S.CLM_TRANS_DT_PD_DT, S.CLM_TRANS_DT_PST_DT, S.CLM_TRANS_DT_RCVD_DT, S.CLM_TRANS_PRI_PAYE_CD, S.CLM_TRANS_PRI_PAYE_CD_DESC, S.CLM_TRANS_SBMT_SRC_DESC, S.DERIV_OBH_FINC_LIAB, S.CLM_SRC_MBR_CUST_SEG_NBR, S.CLM_SRC_MBR_DEPN_CD, S.CLM_SRC_MBR_SBSCR_ID, S.CLM_TRANS_CLM_PRI_DIAG_CD, S.CLM_TRANS_DIAG_1_CD, S.CLM_TRANS_DIAG_2_CD, S.CLM_TRANS_ENT_DIAG_REL_GRP_CD, S.CLM_TRANS_SEC_PROC_CD, S.CLM_TRANS_SEC_PROC_DESC, S.ICD_DIAG_TYP_CD, S.CLM_TRANS_PROC_CD, S.CLM_TRANS_PROC_DESC);"
snowflake.execute ({sqlText: sql_OCM_DIM_CLM_TRANS_merge_command});

while (res_DW_CLM_SRVC_LN_max_load_timestamp.next()) {
var sql_DW_CLM_SRVC_LN_max_load_timestamp = "merge into ECT_PRD_OBH_DP_DB.FOUNDATION.OCM_OBHDP_LOAD_TIME AS T using (SELECT 'OCM_DIM_CLM_TRANS_INC_LOAD_PROC' PROC_NAME, 'DW_CLM_SRVC_LN' OCM_TABLE_NAME, (select to_timestamp_ntz(SPLIT_PART('" + res_DW_CLM_SRVC_LN_max_load_timestamp.getColumnValue(1) + "', 'GMT', 1), 'DY MON DD YYYY HH24:MI:SS')) LAST_LOAD_TIMESTAMP) AS S on T.PROC_NAME = S.PROC_NAME AND T.OCM_TABLE_NAME = S.OCM_TABLE_NAME when matched then update set T.LAST_LOAD_TIMESTAMP = S.LAST_LOAD_TIMESTAMP when not matched then INSERT(PROC_NAME, OCM_TABLE_NAME,LAST_LOAD_TIMESTAMP) values (S.PROC_NAME, S.OCM_TABLE_NAME, S.LAST_LOAD_TIMESTAMP);"
snowflake.execute (
              {sqlText: sql_DW_CLM_SRVC_LN_max_load_timestamp}
        );
}

while (res_DW_CLM_TRANS_max_load_timestamp.next()) {
var sql_DW_CLM_TRANS_max_load_timestamp = "merge into ECT_PRD_OBH_DP_DB.FOUNDATION.OCM_OBHDP_LOAD_TIME AS T using (SELECT 'OCM_DIM_CLM_TRANS_INC_LOAD_PROC' PROC_NAME, 'DW_CLM_TRANS' OCM_TABLE_NAME, (select to_timestamp_ntz(SPLIT_PART('" + res_DW_CLM_TRANS_max_load_timestamp.getColumnValue(1) + "', 'GMT', 1), 'DY MON DD YYYY HH24:MI:SS')) LAST_LOAD_TIMESTAMP) AS S on T.PROC_NAME = S.PROC_NAME AND T.OCM_TABLE_NAME = S.OCM_TABLE_NAME when matched then update set T.LAST_LOAD_TIMESTAMP = S.LAST_LOAD_TIMESTAMP when not matched then INSERT(PROC_NAME, OCM_TABLE_NAME,LAST_LOAD_TIMESTAMP) values (S.PROC_NAME, S.OCM_TABLE_NAME, S.LAST_LOAD_TIMESTAMP);"
snowflake.execute (
              {sqlText: sql_DW_CLM_TRANS_max_load_timestamp}
        );
}

while (res_DW_CLM_OTHR_PAYR_SBSCR_max_load_timestamp.next()) {
var sql_DW_CLM_OTHR_PAYR_SBSCR_max_load_timestamp = "merge into ECT_PRD_OBH_DP_DB.FOUNDATION.OCM_OBHDP_LOAD_TIME AS T using (SELECT 'OCM_DIM_CLM_TRANS_INC_LOAD_PROC' PROC_NAME, 'DW_CLM_OTHR_PAYR_SBSCR' OCM_TABLE_NAME, (select to_timestamp_ntz(SPLIT_PART('" + res_DW_CLM_OTHR_PAYR_SBSCR_max_load_timestamp.getColumnValue(1) + "', 'GMT', 1), 'DY MON DD YYYY HH24:MI:SS')) LAST_LOAD_TIMESTAMP) AS S on T.PROC_NAME = S.PROC_NAME AND T.OCM_TABLE_NAME = S.OCM_TABLE_NAME when matched then update set T.LAST_LOAD_TIMESTAMP = S.LAST_LOAD_TIMESTAMP when not matched then INSERT(PROC_NAME, OCM_TABLE_NAME,LAST_LOAD_TIMESTAMP) values (S.PROC_NAME, S.OCM_TABLE_NAME, S.LAST_LOAD_TIMESTAMP);"
snowflake.execute (
              {sqlText: sql_DW_CLM_OTHR_PAYR_SBSCR_max_load_timestamp}
        );
}

while (res_DW_CLM_DIAG_CD_max_load_timestamp.next()) {
var sql_DW_CLM_DIAG_CD_max_load_timestamp = "merge into ECT_PRD_OBH_DP_DB.FOUNDATION.OCM_OBHDP_LOAD_TIME AS T using (SELECT 'OCM_DIM_CLM_TRANS_INC_LOAD_PROC' PROC_NAME, 'DW_CLM_DIAG_CD' OCM_TABLE_NAME, (select to_timestamp_ntz(SPLIT_PART('" + res_DW_CLM_DIAG_CD_max_load_timestamp.getColumnValue(1) + "', 'GMT', 1), 'DY MON DD YYYY HH24:MI:SS')) LAST_LOAD_TIMESTAMP) AS S on T.PROC_NAME = S.PROC_NAME AND T.OCM_TABLE_NAME = S.OCM_TABLE_NAME when matched then update set T.LAST_LOAD_TIMESTAMP = S.LAST_LOAD_TIMESTAMP when not matched then INSERT(PROC_NAME, OCM_TABLE_NAME,LAST_LOAD_TIMESTAMP) values (S.PROC_NAME, S.OCM_TABLE_NAME, S.LAST_LOAD_TIMESTAMP);"
snowflake.execute (
              {sqlText: sql_DW_CLM_DIAG_CD_max_load_timestamp}
        );
}

while (res_DW_CLM_DIAG_REL_GRP_CD_max_load_timestamp.next()) {
var sql_DW_CLM_DIAG_REL_GRP_CD_max_load_timestamp = "merge into ECT_PRD_OBH_DP_DB.FOUNDATION.OCM_OBHDP_LOAD_TIME AS T using (SELECT 'OCM_DIM_CLM_TRANS_INC_LOAD_PROC' PROC_NAME, 'DW_CLM_DIAG_REL_GRP_CD' OCM_TABLE_NAME, (select to_timestamp_ntz(SPLIT_PART('" + res_DW_CLM_DIAG_REL_GRP_CD_max_load_timestamp.getColumnValue(1) + "', 'GMT', 1), 'DY MON DD YYYY HH24:MI:SS')) LAST_LOAD_TIMESTAMP) AS S on T.PROC_NAME = S.PROC_NAME AND T.OCM_TABLE_NAME = S.OCM_TABLE_NAME when matched then update set T.LAST_LOAD_TIMESTAMP = S.LAST_LOAD_TIMESTAMP when not matched then INSERT(PROC_NAME, OCM_TABLE_NAME,LAST_LOAD_TIMESTAMP) values (S.PROC_NAME, S.OCM_TABLE_NAME, S.LAST_LOAD_TIMESTAMP);"
snowflake.execute (
              {sqlText: sql_DW_CLM_DIAG_REL_GRP_CD_max_load_timestamp}
        );
}

while (res_DW_CLM_ICD_PROC_CD_max_load_timestamp.next()) {
var sql_DW_CLM_ICD_PROC_CD_max_load_timestamp = "merge into ECT_PRD_OBH_DP_DB.FOUNDATION.OCM_OBHDP_LOAD_TIME AS T using (SELECT 'OCM_DIM_CLM_TRANS_INC_LOAD_PROC' PROC_NAME, 'DW_CLM_ICD_PROC_CD' OCM_TABLE_NAME, (select to_timestamp_ntz(SPLIT_PART('" + res_DW_CLM_ICD_PROC_CD_max_load_timestamp.getColumnValue(1) + "', 'GMT', 1), 'DY MON DD YYYY HH24:MI:SS')) LAST_LOAD_TIMESTAMP) AS S on T.PROC_NAME = S.PROC_NAME AND T.OCM_TABLE_NAME = S.OCM_TABLE_NAME when matched then update set T.LAST_LOAD_TIMESTAMP = S.LAST_LOAD_TIMESTAMP when not matched then INSERT(PROC_NAME, OCM_TABLE_NAME,LAST_LOAD_TIMESTAMP) values (S.PROC_NAME, S.OCM_TABLE_NAME, S.LAST_LOAD_TIMESTAMP);"
snowflake.execute (
              {sqlText: sql_DW_CLM_ICD_PROC_CD_max_load_timestamp}
        );
}

return "Succeeded.";   // Return a success/error indicator.
}
catch (err)  {
  return "Failed: " + err;   // Return a success/error indicator.
}

$$;