CREATE  OR REPLACE PROCEDURE ECT_PRD_OBH_DP_DB.FOUNDATION.OCM_FCT_CLM_TRANS_INC_LOAD_PROC()
RETURNS VARCHAR
LANGUAGE javascript
COMMENT='Loads the data to intermediate OCM_FCT_CLM_TRANS FOUNDATION table from OCM tables on incremental load'
EXECUTE as caller
AS
$$

try {

var sql_DW_CLM_SRVC_LN_max_load_timestamp_Statement = snowflake.createStatement({sqlText:"SELECT MAX(DW_CHG_DTTM) FROM ECT_PRD_CLAIMS_DB.FOUNDATION.DW_CLM_SRVC_LN;"});
var res_DW_CLM_SRVC_LN_max_load_timestamp = sql_DW_CLM_SRVC_LN_max_load_timestamp_Statement.execute();

var sql_DW_CLM_TRANS_max_load_timestamp_Statement = snowflake.createStatement({sqlText:"SELECT MAX(DW_CHG_DTTM) FROM ECT_PRD_CLAIMS_DB.FOUNDATION.DW_CLM_TRANS;"});
var res_DW_CLM_TRANS_max_load_timestamp = sql_DW_CLM_TRANS_max_load_timestamp_Statement.execute();

var sql_OCM_FCT_CLM_TRANS_merge_command = "merge into ECT_PRD_OBH_DP_DB.FOUNDATION.OCM_FCT_CLM_TRANS AS T using (SELECT DISTINCT SRVCLN.DW_CLM_SRVC_LN_REC_ID CLM_TRANS_SYS_ID, CASE WHEN LENGTH(SRVCLN.CLM_SRVC_LN_ID)= 1 THEN CONCAT('00', SRVCLN.CLM_SRVC_LN_ID) WHEN LENGTH(SRVCLN.CLM_SRVC_LN_ID)= 2 THEN CONCAT('0', SRVCLN.CLM_SRVC_LN_ID) ELSE SRVCLN.CLM_SRVC_LN_ID END CLM_AUD_LN_NBR, SPLIT_PART(SRVCLN.CLM_TRANS_ID, ':', 2) CLM_AUD_NBR, SRVCLN.ALLW_LN_AMT CLM_TRANS_ALLW_AMT, SRVCLN.BEN_COINS_LN_AMT CLM_TRANS_COINS_AMT, SRVCLN.BEN_COPAY_LN_AMT CLM_TRANS_COPAY_AMT, SRVCLN.DED_LN_AMT CLM_TRANS_DED_AMT, SRVCLN.DSCNT_LN_AMT CLM_TRANS_DSCNT_AMT, SRVCLN.MBR_RESP_LN_AMT CLM_TRANS_MBR_RESP_AMT, SRVCLN.NET_PD_LN_AMT CLM_TRANS_PD_AMT, SRVCLN.SRVC_UNIT_CNT CLM_TRANS_UNIT_CNT, TRANS.TOT_BIL_CHRG_AMT CLM_TRANS_SBMT_AMT FROM (SELECT CLM_TRANS_ID, TOT_BIL_CHRG_AMT FROM ECT_PRD_CLAIMS_DB.FOUNDATION.DW_CLM_TRANS WHERE CLM_SRC_SYS_CD = 'COS' AND DW_CHG_DTTM >= (SELECT NVL((SELECT LAST_LOAD_TIMESTAMP FROM ECT_PRD_OBH_DP_DB.FOUNDATION.OCM_OBHDP_LOAD_TIME WHERE PROC_NAME = 'OCM_FCT_CLM_TRANS_INC_LOAD_PROC' AND OCM_TABLE_NAME = 'DW_CLM_TRANS'), (SELECT min(DW_CHG_DTTM) FROM ECT_PRD_CLAIMS_DB.FOUNDATION.DW_CLM_TRANS)))) AS TRANS INNER JOIN ECT_PRD_CLAIMS_DB.FOUNDATION.DW_CLM_SRVC_LN AS SRVCLN ON SRVCLN.CLM_TRANS_ID = TRANS.CLM_TRANS_ID) AS S on T.CLM_TRANS_SYS_ID = S.CLM_TRANS_SYS_ID when matched then update set T.CLM_TRANS_SYS_ID = S.CLM_TRANS_SYS_ID, T.CLM_AUD_LN_NBR = S.CLM_AUD_LN_NBR, T.CLM_AUD_NBR = S.CLM_AUD_NBR, T.CLM_TRANS_ALLW_AMT = S.CLM_TRANS_ALLW_AMT, T.CLM_TRANS_COINS_AMT = S.CLM_TRANS_COINS_AMT, T.CLM_TRANS_COPAY_AMT = S.CLM_TRANS_COPAY_AMT, T.CLM_TRANS_DED_AMT = S.CLM_TRANS_DED_AMT, T.CLM_TRANS_DSCNT_AMT = S.CLM_TRANS_DSCNT_AMT, T.CLM_TRANS_MBR_RESP_AMT = S.CLM_TRANS_MBR_RESP_AMT, T.CLM_TRANS_PD_AMT = S.CLM_TRANS_PD_AMT, T.CLM_TRANS_UNIT_CNT = S.CLM_TRANS_UNIT_CNT, T.CLM_TRANS_SBMT_AMT = S.CLM_TRANS_SBMT_AMT, T.SF_UPDATE_DATETIME = CURRENT_TIMESTAMP() when not matched then INSERT(CLM_TRANS_SYS_ID, CLM_AUD_LN_NBR, CLM_AUD_NBR, CLM_TRANS_ALLW_AMT, CLM_TRANS_COINS_AMT, CLM_TRANS_COPAY_AMT, CLM_TRANS_DED_AMT, CLM_TRANS_DSCNT_AMT, CLM_TRANS_MBR_RESP_AMT, CLM_TRANS_PD_AMT, CLM_TRANS_UNIT_CNT, CLM_TRANS_SBMT_AMT) values (S.CLM_TRANS_SYS_ID, S.CLM_AUD_LN_NBR, S.CLM_AUD_NBR, S.CLM_TRANS_ALLW_AMT, S.CLM_TRANS_COINS_AMT, S.CLM_TRANS_COPAY_AMT, S.CLM_TRANS_DED_AMT, S.CLM_TRANS_DSCNT_AMT, S.CLM_TRANS_MBR_RESP_AMT, S.CLM_TRANS_PD_AMT, S.CLM_TRANS_UNIT_CNT, S.CLM_TRANS_SBMT_AMT);"
snowflake.execute ({sqlText: sql_OCM_FCT_CLM_TRANS_merge_command});

while (res_DW_CLM_SRVC_LN_max_load_timestamp.next()) {
    var sql_DW_CLM_SRVC_LN_max_load_timestamp = "merge into ECT_PRD_OBH_DP_DB.FOUNDATION.OCM_OBHDP_LOAD_TIME AS T using (SELECT 'OCM_FCT_CLM_TRANS_INC_LOAD_PROC' PROC_NAME, 'DW_CLM_SRVC_LN' OCM_TABLE_NAME, (select to_timestamp_ntz(SPLIT_PART('" + res_DW_CLM_SRVC_LN_max_load_timestamp.getColumnValue(1) + "', 'GMT', 1), 'DY MON DD YYYY HH24:MI:SS')) LAST_LOAD_TIMESTAMP) AS S on T.PROC_NAME = S.PROC_NAME AND T.OCM_TABLE_NAME = S.OCM_TABLE_NAME when matched then update set T.LAST_LOAD_TIMESTAMP = S.LAST_LOAD_TIMESTAMP when not matched then INSERT(PROC_NAME, OCM_TABLE_NAME,LAST_LOAD_TIMESTAMP) values (S.PROC_NAME, S.OCM_TABLE_NAME, S.LAST_LOAD_TIMESTAMP);"
    snowflake.execute (
           {sqlText: sql_DW_CLM_SRVC_LN_max_load_timestamp}
    );
}

while (res_DW_CLM_TRANS_max_load_timestamp.next()) {
    var sql_DW_CLM_TRANS_max_load_timestamp = "merge into ECT_PRD_OBH_DP_DB.FOUNDATION.OCM_OBHDP_LOAD_TIME AS T using (SELECT 'OCM_FCT_CLM_TRANS_INC_LOAD_PROC' PROC_NAME, 'DW_CLM_TRANS' OCM_TABLE_NAME, (select to_timestamp_ntz(SPLIT_PART('" + res_DW_CLM_TRANS_max_load_timestamp.getColumnValue(1) + "', 'GMT', 1), 'DY MON DD YYYY HH24:MI:SS')) LAST_LOAD_TIMESTAMP) AS S on T.PROC_NAME = S.PROC_NAME AND T.OCM_TABLE_NAME = S.OCM_TABLE_NAME when matched then update set T.LAST_LOAD_TIMESTAMP = S.LAST_LOAD_TIMESTAMP when not matched then INSERT(PROC_NAME, OCM_TABLE_NAME,LAST_LOAD_TIMESTAMP) values (S.PROC_NAME, S.OCM_TABLE_NAME, S.LAST_LOAD_TIMESTAMP);"
    snowflake.execute (
          {sqlText: sql_DW_CLM_TRANS_max_load_timestamp}
    );
}

return "Succeeded.";   // Return a success/error indicator.
}
catch (err)  {
  return "Failed: " + err;   // Return a success/error indicator.
}

$$;
