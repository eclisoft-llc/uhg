import pandas as pd
import argparse
import cx_Oracle
import snowflake.connector
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from datetime import date

### Main ###

parser = argparse.ArgumentParser(description='Validation Script')
parser.add_argument("--sfact", action="store", dest="sf_act_name", required=True, help="Snowflake Account Name")
parser.add_argument("--sfuser", action="store", dest="sf_username", required=True, help="Snowflake User Name")
parser.add_argument("--pkeypath", action="store", dest="keypath", required=True, help="P8 key path")
parser.add_argument("--sfrole", action="store", dest="sf_role", required=True, help="Snowflake role")
parser.add_argument("--sfwh", action="store", dest="sf_wh", required=True, help="Snowflake warehouse")
parser.add_argument("--sfdb", action="store", dest="sf_db", required=True, help="Snowflake database")
parser.add_argument("--psphrs", action="store", dest="passphrase", required=True, help="Passphrase")
parser.add_argument("--oradsn", action="store", dest="ora_db", required=True, help="Oracle Connection")
parser.add_argument("--orauser", action="store", dest="ora_usr", required=True, help="Oracle user")
parser.add_argument("--orapwd", action="store", dest="ora_pwd", required=True, help="Oracle password")
parser.add_argument("--diffpath", action="store", dest="diffpath", required=True, help="Path for difference files")
args = parser.parse_args()

with open (args.keypath, "rb") as key:
    p_key= serialization.load_pem_private_key(
        key.read(),
        password=args.passphrase.encode(),
        backend=default_backend()
    )
pkb = p_key.private_bytes(
    encoding=serialization.Encoding.DER,
    format=serialization.PrivateFormat.PKCS8,
    encryption_algorithm=serialization.NoEncryption())

sf_conn = snowflake.connector.connect(
    account=args.sf_act_name,
    user=args.sf_username,
    private_key=pkb,
    role=args.sf_role,
    warehouse=args.sf_wh,
    database=args.sf_db
)

ora_conn = cx_Oracle.connect(
    user=args.ora_usr,
    password=args.ora_pwd,
    dsn=args.ora_db)

diff_path = args.diffpath

def execute_compare(query1, query2, tbname, yearn, monthn, dayn):
    try:

        s1 = pd.read_sql(query1, con=sf_conn)
        s2 = pd.read_sql(query2, con=ora_conn)

        s1 = s1.replace('None','', regex=True)
        s2 = s2.replace('None','', regex=True)

        df_diff2 = pd.concat([s2, s1], keys=['Oracle', 'Snowflake']).drop_duplicates(keep=False)

        if(df_diff2.size>0):
            df_diff2.to_csv(diff_path + tbname + '_' + yearn + '_' + monthn + '_' + dayn + '_Diffs.csv')

    except Exception as e:
        print(e, e.args)
        raise

input_list = {
        'DIM_CASE_EVENT': ['CASE_EVENT_DIM_ID', 'CAS_EVT', 'CAS_INT_NUM', 'CAS_LAST_SEQ', 'TREATMENT_SETTING_DIM_ID', 'PATIENT_NO', 'EXTRACT(YEAR FROM MEDT) MEDT_Y', 'EXTRACT(MONTH FROM MEDT) MEDT_M', 'EXTRACT(DAY FROM MEDT) MEDT_D', 'EXTRACT(YEAR FROM CASE_CLOSE_DATE) CASE_CLOSE_DATE_Y', 'EXTRACT(MONTH FROM CASE_CLOSE_DATE) CASE_CLOSE_DATE_M', 'EXTRACT(DAY FROM CASE_CLOSE_DATE) CASE_CLOSE_DATE_D', 'CASE_CLOSE_REASON_TYPE_DIM_ID', 'EXTRACT(YEAR FROM TRANS_DATE) TRANS_DATE_Y', 'EXTRACT(MONTH FROM TRANS_DATE) TRANS_DATE_M', 'EXTRACT(DAY FROM TRANS_DATE) TRANS_DATE_D', 'EXTRACT(YEAR FROM FIRST_TRANS_DATE) FIRST_TRANS_DATE_Y', 'EXTRACT(MONTH FROM FIRST_TRANS_DATE) FIRST_TRANS_DATE_M', 'EXTRACT(DAY FROM FIRST_TRANS_DATE) FIRST_TRANS_DATE_D', 'CASE_STAGE_DIM_ID', 'EXTRACT(YEAR FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_Y', 'EXTRACT(MONTH FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_M', 'EXTRACT(DAY FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_D', 'EXTRACT(YEAR FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_Y', 'EXTRACT(MONTH FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_M', 'EXTRACT(DAY FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_D'],
        'DIM_MEMBER': ['MEMB_DIM_ID', 'SEQ_MEMB_ID', 'PERSON_NUMBER', 'COMPANY_DIM_ID', 'SEQ_SUBS_ID', 'SUBSCRIBER_ID', 'MEMB_ELIG_STATUS', 'EXTRACT(YEAR FROM DOB) DOB_Y', 'EXTRACT(MONTH FROM DOB) DOB_M', 'EXTRACT(DAY FROM DOB) DOB_D', 'EXTRACT(YEAR FROM DOD) DOD_Y', 'EXTRACT(MONTH FROM DOD) DOD_M', 'EXTRACT(DAY FROM DOD) DOD_D', 'GENDER', 'ETHNIC', 'SOCIAL_SEC_NO', 'MEMB_FIRST_NAME', 'MEMB_MIDDLE_INITIAL', 'MEMB_LAST_NAME', 'MEMB_ADDRESS_LINE_1', 'MEMB_ADDRESS_LINE_2', 'MEMB_CITY', 'MEMB_STATE', 'MEMB_ZIP', 'HOME_PHONE_NUMBER', 'BUS_PHONE_NUMBER', 'DIAMOND_ID', 'EXTRACT(YEAR FROM ORIGINAL_EFFECTIVE_DATE) ORIGINAL_EFFECTIVE_DATE_Y', 'EXTRACT(MONTH FROM ORIGINAL_EFFECTIVE_DATE) ORIGINAL_EFFECTIVE_DATE_M', 'EXTRACT(DAY FROM ORIGINAL_EFFECTIVE_DATE) ORIGINAL_EFFECTIVE_DATE_D', 'EXTRACT(YEAR FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_Y', 'EXTRACT(MONTH FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_M', 'EXTRACT(DAY FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_D', 'EXTRACT(YEAR FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_Y', 'EXTRACT(MONTH FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_M', 'EXTRACT(DAY FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_D', 'GEOGRAPHY_STATE_DIM_ID', 'GENDER_DIM_ID', 'GENDER_DESC', 'CURR_PCP_DIM_ID', 'GEOGRAPHY_DIM_ID', 'MEMB_GEOG_ZIP', 'MEMB_GEOG_STATE', 'MEMB_GEOG_STATE_DESC', 'CONVERTED_FROM_DIM_ID', 'MEDICARE_NO', 'MEDICAID_NO', 'CASE_ID', 'CURR_CASE_MANAGER_DIM_ID', 'CURR_COMORBIDITY_CNT', 'PREV_SUBSCRIBER_ID', 'PREV_SEQ_MEMB_ID', 'MC_PERSONAL_CARE_SPECIALIST', 'LANGUAGE_DIM_ID', 'IPRO_RISK_SCORE', 'RISK_SCORE_3MO', 'PRETOTDL', 'PRETOTDL3M', 'RISK_SCORE_AGESEX', 'RISK_SCORE_ACTUARIAL', 'RISK_SCORE_LAB', 'RISK_SCORE_PRG', 'EXTRACT(YEAR FROM VERSION_DATE) VERSION_DATE_Y', 'EXTRACT(MONTH FROM VERSION_DATE) VERSION_DATE_M', 'EXTRACT(DAY FROM VERSION_DATE) VERSION_DATE_D', 'GROUP_DIM_ID', 'MCARE_DUAL_ENROLLED_FLAG', 'RES_PARTY_FIRST_NAME', 'RES_PARTY_LAST_NAME', 'RES_PARTY_ADDR1', 'RES_PARTY_ADDR2', 'RES_PARTY_ADDR3', 'RES_PARTY_CITY', 'RES_PARTY_STATE', 'RES_PARTY_ZIP', 'RES_PARTY_GEO_DIM_ID', 'HCR_IND_DIM_ID', 'EXTRACT(YEAR FROM RECENT_TERM_DT) RECENT_TERM_DT_Y', 'EXTRACT(MONTH FROM RECENT_TERM_DT) RECENT_TERM_DT_M', 'EXTRACT(DAY FROM RECENT_TERM_DT) RECENT_TERM_DT_D', 'MEMB_ADDR_MAIL_DIM_ID', 'CELL_PHONE_NUMBER', 'WORK_PHONE_NUMBER', 'TERM_REASON_DIM_ID', 'MEDICARE_DUAL_FLAG_DIM_ID', 'ETHNIC_DIM_ID', 'EXTRACT(YEAR FROM QUALIFY_DATE) QUALIFY_DATE_Y', 'EXTRACT(MONTH FROM QUALIFY_DATE) QUALIFY_DATE_M', 'EXTRACT(DAY FROM QUALIFY_DATE) QUALIFY_DATE_D', 'RES_PARTY_MID_INIT', 'RES_PARTY_PHONE', 'RES_PARTY_EMAIL', 'EXTRACT(YEAR FROM RES_PARTY_LAST_EFF_DATE) RES_PARTY_LAST_EFF_DATE_Y', 'EXTRACT(MONTH FROM RES_PARTY_LAST_EFF_DATE) RES_PARTY_LAST_EFF_DATE_M', 'EXTRACT(DAY FROM RES_PARTY_LAST_EFF_DATE) RES_PARTY_LAST_EFF_DATE_D', 'EXTRACT(YEAR FROM RES_PARTY_LAST_TERM_DATE) RES_PARTY_LAST_TERM_DATE_Y', 'EXTRACT(MONTH FROM RES_PARTY_LAST_TERM_DATE) RES_PARTY_LAST_TERM_DATE_M', 'EXTRACT(DAY FROM RES_PARTY_LAST_TERM_DATE) RES_PARTY_LAST_TERM_DATE_D', 'RES_PARTY_ID', 'MOTHER_MEMB_DIM_ID', 'HOMELESS_FLAG_DIM_ID', 'FAM_RELATIONSHIP', 'FAM_LINK_ID', 'IEX_MEMB_ID'],
        'DIM_MEMBER_ADDRESS': ['MEMB_ADDR_DIM_ID', 'COMPANY_DIM_ID', 'MEMB_DIM_ID', 'SEQ_MEMB_ID', 'ADDR_TYPE', 'ADDRESS_LINE_1', 'ADDRESS_LINE_2', 'ADDRESS_LINE_3', 'CITY', 'STATE', 'ZIP', 'COUNTY', 'COUNTRY_CD', 'PHONE', 'PHONE_EXT', 'FAX', 'FAX_EXT', 'EMAIL', 'CONVERTED_FROM_DIM_ID', 'EXTRACT(YEAR FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_Y', 'EXTRACT(MONTH FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_M', 'EXTRACT(DAY FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_D', 'EXTRACT(YEAR FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_Y', 'EXTRACT(MONTH FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_M', 'EXTRACT(DAY FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_D'],
        'DIM_PROVIDER': ['PROV_DIM_ID', 'SEQ_PROV_ID', 'COMPANY_DIM_ID', 'PROVIDER_ID', 'MCAID_ID', 'PROV_FIRST_NAME', 'PROV_LAST_NAME', 'PROV_MIDDLE_INITIAL', 'PROV_FULL_NAME', 'PROV_ADDRESS_LINE_1', 'PROV_ADDRESS_LINE_2', 'PROV_CITY', 'PROV_STATE', 'PROV_ZIP', 'COUNTY', 'PHONE_NUMBER', 'EXTENSION', 'DEA_NBR', 'DEA_ALPHA_NBR', 'LANGUAGE_1_DIM_ID', 'LANGUAGE_2_DIM_ID', 'LANGUAGE_3_DIM_ID', 'EXTRACT(YEAR FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_Y', 'EXTRACT(MONTH FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_M', 'EXTRACT(DAY FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_D', 'EXTRACT(YEAR FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_Y', 'EXTRACT(MONTH FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_M', 'EXTRACT(DAY FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_D', 'GEOGRAPHY_DIM_ID', 'GEOGRAPHY_STATE_DIM_ID', 'PROV_GEOG_STATE', 'PROV_GEOG_STATE_DESC', 'GEOGRAPHY_COUNTY_DIM_ID', 'PROV_GEOG_COUNTY', 'PROV_GEOG_COUNTY_DESC', 'DFLT_VEND_DIM_ID', 'PROV_GEOG_ZIP', 'CONVERTED_FROM_DIM_ID', 'NABP_NBR', 'PREV_PROVIDER_ID', 'MPIN', 'UPIN', 'NATIONAL_PROVIDER_ID', 'PREV_SEQ_PROV_ID', 'MAX_ENROLLMENT', 'EXTRACT(YEAR FROM DOB) DOB_Y', 'EXTRACT(MONTH FROM DOB) DOB_M', 'EXTRACT(DAY FROM DOB) DOB_D', 'SSN_ID', 'PROV_TYPE_DIM_ID', 'STATE_PROVIDER_TYPE', 'PREV_MCAID_ID', 'UNISON_COMMON_ID', 'PROV_ENTITY', 'CURR_PROV_GROUP_DIM_ID', 'TAXONOMY_CODE', 'GENDER_DIM_ID', 'MULT_LOC_IND', 'PROV_FAX', 'LANGUAGE_4_DIM_ID', 'LANGUAGE_5_DIM_ID', 'LANGUAGE_6_DIM_ID', 'LANGUAGE_7_DIM_ID', 'LANGUAGE_8_DIM_ID', 'TAXONOMY_CODE_DIM_ID', 'PROV_DEG_CD'],
        'DIM_PROVIDER_ADDRESS': ['PROV_ADDR_DIM_ID', 'COMPANY_DIM_ID', 'PROV_DIM_ID', 'PROV_ADDR_ID', 'PROV_ADDR_SUB_ID', 'EXTRACT(YEAR FROM EFFECTIVE_DATE) EFFECTIVE_DATE_Y', 'EXTRACT(MONTH FROM EFFECTIVE_DATE) EFFECTIVE_DATE_M', 'EXTRACT(DAY FROM EFFECTIVE_DATE) EFFECTIVE_DATE_D', 'EXTRACT(YEAR FROM TERM_DATE) TERM_DATE_Y', 'EXTRACT(MONTH FROM TERM_DATE) TERM_DATE_M', 'EXTRACT(DAY FROM TERM_DATE) TERM_DATE_D', 'TERM_REASON_DIM_ID', 'ADDRESS_LINE_1', 'ADDRESS_LINE_2', 'ADDRESS_LINE_3', 'CITY', 'STATE', 'ZIP', 'COUNTY', 'COUNTRY_CD', 'PHONE', 'PHONE_EXT', 'FAX', 'FAX_EXT', 'EMAIL', 'HD_IND', 'SVC_LOC_IND', 'MAIL_IND', 'PRIM_ADDR_IND', 'CONVERTED_FROM_DIM_ID', 'EXTRACT(YEAR FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_Y', 'EXTRACT(MONTH FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_M', 'EXTRACT(DAY FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_D', 'EXTRACT(YEAR FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_Y', 'EXTRACT(MONTH FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_M', 'EXTRACT(DAY FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_D'],
        'DIM_PROVIDER_CONTRACT': ['CONTRACT_DIM_ID', 'PROV_DIM_ID', 'SEQ_PROV_CONTRACT', 'CONTRACT_TYPE', 'PROV_CONTRACT_LINE_OF_BUSINESS', 'PANEL_ID', 'EXTRACT(YEAR FROM PROV_CONTRACT_EFFECTIVE_DATE) PROV_CONTRACT_EFFECTIVE_DATE_Y', 'EXTRACT(MONTH FROM PROV_CONTRACT_EFFECTIVE_DATE) PROV_CONTRACT_EFFECTIVE_DATE_M', 'EXTRACT(DAY FROM PROV_CONTRACT_EFFECTIVE_DATE) PROV_CONTRACT_EFFECTIVE_DATE_D', 'EXTRACT(YEAR FROM PROV_CONTRACT_TERM_DATE) PROV_CONTRACT_TERM_DATE_Y', 'EXTRACT(MONTH FROM PROV_CONTRACT_TERM_DATE) PROV_CONTRACT_TERM_DATE_M', 'EXTRACT(DAY FROM PROV_CONTRACT_TERM_DATE) PROV_CONTRACT_TERM_DATE_D', 'TERM_REASON', 'PCP_FLAG', 'TAX_ID', 'EXTRACT(YEAR FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_Y', 'EXTRACT(MONTH FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_M', 'EXTRACT(DAY FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_D', 'EXTRACT(YEAR FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_Y', 'EXTRACT(MONTH FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_M', 'EXTRACT(DAY FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_D', 'VEND_DIM_ID', 'CONTRACT_TYPE_DIM_ID', 'CONTRACT_TYPE_DESC', 'CONT_LINE_OF_BUSINESS_DIM_ID', 'PROVIDER_PAR_DIM_ID', 'PROV_CONTRACT_ID', 'NETWORK_DIM_ID', 'CONVERTED_FROM_DIM_ID', 'RECORD_STATUS_DIM_ID', 'ACC_NEW_PAT_IND', 'PROV_AGREEMENT_DIM_ID'],
        'DIM_PROVIDER_CREDENTIAL': ['PROV_CRED_DIM_ID', 'COMPANY_DIM_ID', 'PROV_DIM_ID', 'PROV_CRED_TYPE_DIM_ID', 'CRED_SEQ_NO', 'CRED_VALUE_1', 'CRED_VALUE_2', 'EXTRACT(YEAR FROM EFFECTIVE_DATE) EFFECTIVE_DATE_Y', 'EXTRACT(MONTH FROM EFFECTIVE_DATE) EFFECTIVE_DATE_M', 'EXTRACT(DAY FROM EFFECTIVE_DATE) EFFECTIVE_DATE_D', 'EXTRACT(YEAR FROM TERM_DATE) TERM_DATE_Y', 'EXTRACT(MONTH FROM TERM_DATE) TERM_DATE_M', 'EXTRACT(DAY FROM TERM_DATE) TERM_DATE_D', 'CRED_STATE', 'CRED_PAR_IND', 'CONVERTED_FROM_DIM_ID', 'EXTRACT(YEAR FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_Y', 'EXTRACT(MONTH FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_M', 'EXTRACT(DAY FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_D', 'EXTRACT(YEAR FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_Y', 'EXTRACT(MONTH FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_M', 'EXTRACT(DAY FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_D'],
        'DIM_PROVIDER_IDENT': ['PROV_DIM_ID', 'IDENT_TYPE_DIM_ID', 'IDENT_VALUE', 'EXTRACT(YEAR FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_Y', 'EXTRACT(MONTH FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_M', 'EXTRACT(DAY FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_D', 'EXTRACT(YEAR FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_Y', 'EXTRACT(MONTH FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_M', 'EXTRACT(DAY FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_D'],
        'DIM_PROVIDER_SPECIALTY': ['PROV_DIM_ID', 'PRIMARY_SPECIALTY_FLAG', 'EXTRACT(YEAR FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_Y', 'EXTRACT(MONTH FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_M', 'EXTRACT(DAY FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_D', 'EXTRACT(YEAR FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_Y', 'EXTRACT(MONTH FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_M', 'EXTRACT(DAY FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_D', 'PROV_SPEC_DIM_ID'],
        'DIM_PROV_ADDR_INFO': ['PROV_ADDR_INFO_DIM_ID', 'COMPANY_DIM_ID', 'PROV_DIM_ID', 'PROV_ADDR_DIM_ID', 'PROV_ADDR_ID', 'PROV_ADDR_SUB_ID', 'EXTRACT(YEAR FROM EFFECTIVE_DATE) EFFECTIVE_DATE_Y', 'EXTRACT(MONTH FROM EFFECTIVE_DATE) EFFECTIVE_DATE_M', 'EXTRACT(DAY FROM EFFECTIVE_DATE) EFFECTIVE_DATE_D', 'INFO_CODE_TYPE_DIM_ID', 'INFO_CODE_DIM_ID', 'INFO_VALUE', 'CONVERTED_FROM_DIM_ID', 'EXTRACT(YEAR FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_Y', 'EXTRACT(MONTH FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_M', 'EXTRACT(DAY FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_D', 'EXTRACT(YEAR FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_Y', 'EXTRACT(MONTH FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_M', 'EXTRACT(DAY FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_D'],
        'DIM_VENDOR': ['VEND_DIM_ID', 'SEQ_VEND_ID', 'VENDOR_ID', 'COMPANY_DIM_ID', 'SHORT_NAME', 'VEND_FULL_NAME', 'VENDOR_TYPE', 'IRS_TAX_ID', 'HOLD_PAYMENT_FLAG', 'VEND_ADDRESS_LINE_1', 'VEND_ADDRESS_LINE_2', 'VEND_CITY', 'VEND_STATE', 'VEND_ZIP', 'VEND_COUNTY', 'EXTRACT(YEAR FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_Y', 'EXTRACT(MONTH FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_M', 'EXTRACT(DAY FROM DW_INSERT_DATETIME) DW_INSERT_DATETIME_D', 'EXTRACT(YEAR FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_Y', 'EXTRACT(MONTH FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_M', 'EXTRACT(DAY FROM DW_UPDATE_DATETIME) DW_UPDATE_DATETIME_D', 'GEOGRAPHY_DIM_ID', 'GEOGRAPHY_STATE_DIM_ID', 'VEND_GEOG_STATE', 'VEND_GEOG_STATE_DESC', 'GEOGRAPHY_COUNTY_DIM_ID', 'VEND_GEOG_COUNTY', 'VEND_GEOG_COUNTY_DESC', 'VEND_GEOG_ZIP', 'CONVERTED_FROM_DIM_ID', 'TAX_DIM_ID']
}

# update these 4 values to target specific dates by year, month and d, where "d" = Day of the month to start validation
# and endday = the day of the month to validate (up-to-this-day), example: validate every day from 8-10-2021 through 8-15-2021
yearNumber = 2022
month=4
d=1
endday=15
# you can increase the amount of records to validate per day with the next value, but I found 2000 is the sweet spot where
# performance is not greatly affected, yet the amount of records is high enough for accuracy
rowcomparison='2000'
try:
    for entity, attribute_list in input_list.items():
        listToStr = ','.join([str(elem) for elem in attribute_list])
        day = d
        while day <= endday:
            try:
                print('generating report for ' + entity + ' ' + str(yearNumber) + ' ' + str(month) + ' ' + str(day))
                q1 = 'SELECT ' + listToStr + ' FROM COMPACT.' + entity + ' WHERE EXTRACT(YEAR FROM DW_INSERT_DATETIME) = ' \
                     + str(yearNumber) + ' AND EXTRACT(MONTH FROM DW_INSERT_DATETIME) = ' + str(month) \
                     + ' AND EXTRACT(DAY FROM DW_INSERT_DATETIME) = ' + str(day) \
                     + ' ORDER BY 1 LIMIT ' + rowcomparison
                q2 = 'SELECT ' + listToStr + ' FROM DW.' + entity + ' WHERE EXTRACT(YEAR FROM DW_INSERT_DATETIME) = ' \
                     + str(yearNumber) + ' AND EXTRACT(MONTH FROM DW_INSERT_DATETIME) = ' + str(month) \
                     + ' AND EXTRACT(DAY FROM DW_INSERT_DATETIME) = ' + str(day) \
                     + ' ORDER BY 1 FETCH FIRST ' + rowcomparison +' ROWS ONLY'
                execute_compare(q1, q2, entity, str(yearNumber),str(month), str(day))
            except Exception as e:
                print(e, e.args)
                raise
            day += 1
except Exception as e:
    print(e, e.args)
    raise
finally:
    sf_conn.close()
    ora_conn.close()