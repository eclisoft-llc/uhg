#!/usr/bin/bash
set -x
# Setting environment variable for Snowsql
source ~/.bash_profile

log_name=`basename $0 | cut -f1 -d'.'`

send_mail()
  {
    subj=$1
    to_ls=$2
    attch=$3
       mailx -r $email_from -s "${subj}" -a ${attch} $to_ls << EOF
    Team,
      Please find the subject line for details.

      Note: This is an autogenerated email and the mail box is not monitored.

EOF
##send_mail "SQL failed for ${file_name}" $email_to
  }

load()
  {
    log_file=${Log_dir}/${log_name}_`date +%Y%m%d_%H%M%S`.txt
    echo "Data Load initiated for $env environment"   >> ${log_file}
    echo "No of tables for data load - $cnt_file"  >> ${log_file}
    #ls *.start | while read line; do
	  snowsql -c ${sf_env} -q "SELECT ENTITY_KEY FROM ETL.DATA_LOAD_STATUS WHERE ETL_STS='EXTRACTED' ORDER BY CREATE_TS" -o friendly=False -o header=False -o output_format=plain -o timing=False | while read line; do
    #tb_name=`echo $line | cut -f1 -d'.' `
	  tb_name=`echo $line`
    touch $outbound/exec.loc
    if [ $? -eq 0 ]
      then
      echo -e "\nlock file created in $outbound for $tb_name load"  >> ${log_file}
    else
      echo "Error creating lock file"  >> ${log_file}
      send_mail "Data load script failed while creating lock file for $tb_name" $email_to ${log_file}
      return 1
    fi
    echo "Data load initiated for $tb_name"  >> ${log_file}
	  snowsql -c ${sf_env} -q "UPDATE ETL.DATA_LOAD_STATUS SET ETL_SRT_TS = to_timestamp_ntz(convert_timezone('America/Chicago', current_timestamp())),ETL_STS='ACTIVE' WHERE ETL_STS='EXTRACTED' AND ENTITY_KEY='${tb_name}'"
	  lst=`cat ${conf_dir}/smart_sf.config | grep -iw ${tb_name}`
	  syst=`echo $lst | cut -f5- -d'|'`
    op_exec "call op_exec"
    if [ $? -eq 0 ]
      then
	    snowsql -c ${sf_env} -q "UPDATE ETL.DATA_LOAD_STATUS SET ETL_END_TS = to_timestamp_ntz(convert_timezone('America/Chicago', current_timestamp())),ETL_STS='COMPLETED' WHERE ETL_STS='ACTIVE' AND ENTITY_KEY='${tb_name}'"
      echo "Data load completed for $tb_name"  >> ${log_file}
      if [[ ${tb_name} != "DBA_VALIDATION_COUNTS" ]]
        then
        count_validate "@ETL.${syst}_${tb_name}_STAGE" "ETL.${syst}_${tb_name}_L"
        etlvalidsts=${valid}
		sr=`echo $lst | cut -f2- -d'|' | tr -s '|' '\n' | tail -1 | cut -f1 -d'_'`
		if [ ${sr} == "UNET" ]
			then
        	count_validate "ETL.${syst}_${tb_name}_L" "COMPACT.UNET_${tb_name}"
        	cmpctvalidsts=${valid}
		else
        	count_validate "ETL.${syst}_${tb_name}_L" "COMPACT.${tb_name}"
        	cmpctvalidsts=${valid}
		fi
        if [[ ${etlvalidsts} == "SUCCESS" ]] && [[ ${cmpctvalidsts} == "SUCCESS" ]]
          then
          #snowsql -c ${sf_env} -q "rm @ETL.SMART_${tb_name}_STAGE/"
          #echo "Removed stage files for $tb_name" >> ${log_file}
          touch ${archive_success}/${tb_name}_`date +%Y%m%d_%H%M%S`.txt
            if [ $? -eq 0 ]
              then
                echo "Created success file for $tb_name"  >> ${log_file}
            else
              echo "Error creating success file for $tb_name"  >> ${log_file}
              send_mail "Data load script failed while creating success file for $tb_name" $email_to ${log_file}
              return 1
            fi
        else
          echo "Validation failed, stage files will not be removed" >> ${log_file}
          touch ${archive_fail}/${tb_name}_`date +%Y%m%d_%H%M%S`.txt
        fi
      fi
      rm -f $outbound/exec.loc
      if [ $? -eq 0 ]
        then
        echo "Removed lock file successfully for $tb_name"  >> ${log_file}
        else
        echo "Error removing lock file for $tb_name"  >> ${log_file}
        send_mail "Data load script failed while removing lock file for $tb_name" $email_to ${log_file}
        return 1
      fi
    else
      echo "Data load failed for $tb_name"  >> ${log_file}
      #mv ${inbound}/${line} ${archive_fail}
      touch ${archive_fail}/${tb_name}_`date +%Y%m%d_%H%M%S`.txt
      send_mail "Data load script failed $tb_name" $email_to ${log_file}
      rm -f $outbound/exec.loc
      if [ $? -eq 0 ]
        then
        echo "Removed lock file successfully for $tb_name"  >> ${log_file}
        return 1
      else
        echo "Error removing lock file for $tb_name"  >> ${log_file}
        send_mail "Data load script failed while removing lock file for $tb_name" $email_to ${log_file}
        return 1
      fi
    fi
  done
}

op_exec()
{
  if [ `echo $lst | wc -l` -gt 0 ]
        then
        echo $lst | cut -f2- -d'|' | tr -s '|' '\n'  | head -3 | while read line
          do
            if [[ $line == "DEL" ]]
              then
              cd $DEL
              sql_fname=` ls | grep -i DEL_${syst}_${tb_name}_L.sql`
              sh ${scripts}/OBH_Smart_Sql_Exec.sh $env ETL ${DEL}/${sql_fname}
              if [ $? -eq 0 ]
                then
                echo "DEL_${syst}_${tb_name}_L.sql executed"  >> ${log_file}
              else
                echo "DEL_${syst}_${tb_name}_L.sql failed"  >> ${log_file}
                return 1
              fi
            elif [[ $line == "ETL" ]]
              then
              cd $ETL
              sql_fname=` ls | grep -iw ${syst}_${tb_name}_L.sql`
              sh ${scripts}/OBH_Smart_Sql_Exec.sh $env ETL ${DEL}/${sql_fname}
              if [ $? -eq 0 ]
                then
                echo "${syst}_${tb_name}_L.sql executed"  >> ${log_file}
              else
                echo "${syst}_${tb_name}_L.sql failed"  >> ${log_file}
                return 1
              fi
            elif  [[ $line == "COMPACT" ]]
              then
              cd $COMPACT
              sql_fname=` ls | grep -iw COMPACT_${tb_name}_LD.sql`
              sh ${scripts}/OBH_Smart_Sql_Exec.sh $env COMPACT ${COMPACT}/${sql_fname}
              if [ $? -eq 0 ]
                then
                echo "COMPACT_${tb_name}_LD.sql executed"  >> ${log_file}
              else
                echo "COMPACT_${tb_name}_LD.sql failed"  >> ${log_file}
                return 1
              fi
            else
              echo "Operation: $line defined for $tb_name is not valid"  >> ${log_file}
              return 1
            fi
          done
      else
        echo "Table name: $tb_name is not defined in config file"  >> ${log_file}
        return 1
      fi
  }

count_validate ()
{
  src_cnt=$(snowsql -c ${sf_env} -q "SELECT COUNT(*) FROM $1" -o friendly=False -o header=False -o output_format=plain -o timing=False)
  tgt_cnt=$(snowsql -c ${sf_env} -q "SELECT COUNT(*) FROM $2" -o friendly=False -o header=False -o output_format=plain -o timing=False)
  if [ "$src_cnt" == 0 ] || [ "$tgt_cnt" == 0 ] || [ "$src_cnt" == '' ] || [ "$tgt_cnt" == '' ]
    then
    echo "Validation fail - $1 or $2 count is 0, please validate" >> ${log_file}
    valid='FAIL'
    send_mail "Validation fail - $1 or $2 count is 0, please validate" $email_to ${log_file}
  else
    if [ "$src_cnt" == "$tgt_cnt" ]
      then
      echo "Validation success - $1 count - $src_cnt is matching with $2 count - $tgt_cnt" >> ${log_file}
      valid='SUCCESS'
    else
      echo "Validation fail - $1 count - $src_cnt is not matching with $2 count - $tgt_cnt" >> ${log_file}
      valid='FAIL'
      send_mail "Validation fail - $1 count - $src_cnt is not matching with $2 count - $tgt_cnt" $email_to ${log_file}
    fi
  fi
}

  #######################################################################################################
  # Main Script
  #######################################################################################################
  #Argument validation
  if [ $# -eq 1 ]
    then
      if [ $1 == "DEV" ]
        then
          #Source all the configurations
          source /obhdp_dev/tcoc/d_conf/obhdp_conf.sh
          echo "Data Load initiated for DEV environment"
      elif [ $1 == "STG" ]
        then
          source /obhdp/tcoc/s_conf/obhdp_conf.sh
          echo "SData Load initiated for STG environment"
      elif [ $1 == "PRD" ]
        then
          source /obhdp/tcoc/p_conf/obhdp_conf.sh
          echo "Data Load initiated for PRD environment"
      else
        echo "invalid Environment passed in the argument, please pass DEV/STG/PRD"
        exit 1
      fi
  else
    echo "Invalid Arguments, please pass one argument and should be DEV/STG/PRD"
    exit 1
  fi

env=$1
while [ true ]; do
  sleep 300
  if [ -f ${outbound}/exec.loc ]
    then
    echo "Lock file exists, data load in progress, cannot trigger another load"
    #exit 1
    sleep 30
  else
    echo "\nNo lock file exists, will proceed for data load"
    cd $inbound
    #cnt_file=`ls *.start | wc -l`
	cnt_file=$(snowsql -c ${sf_env} -q "SELECT COUNT(*) FROM ETL.DATA_LOAD_STATUS WHERE ETL_STS='EXTRACTED'" -o friendly=False -o header=False -o output_format=plain -o timing=False)
    if [ ${cnt_file} -ge 1 ]
      then
      load "Call load"
      if [ $? -eq 0 ]
        then
        extrct_cnt=$(snowsql -c ${sf_env} -q "SELECT COUNT(*) FROM ETL.DATA_LOAD_STATUS WHERE ETL_STS='EXTRACTED'" -o friendly=False -o header=False -o output_format=plain -o timing=False)
        if [ -f ${inbound}/RequestFile*.complete ] && [ -z "$(ls -A ${archive_fail})" ] && [ ${extrct_cnt} == 0 ]
          then
            snowsql -c ${sf_env} -q "insert into ETL.DBA_PROCESS_LOG values (0,'COMPACT_LOAD','COMPACT_LOAD','Loop_Script',0,0,NULL,CURRENT_TIMESTAMP(),CURRENT_TIMESTAMP(),0,0,0)"
            send_mail "Data load completed successfully for attached request" $email_to ${inbound}/RequestFile*.complete
            mv ${inbound}/RequestFile*.complete ${archive_success}
			touch ${inbound}/validation_cmpct.trig
			touch ${inbound}/validation_fnd.trig
			touch ${inbound}/validation_obh.trig
        else
          echo "No .complete file/some tables failed, extraction still in progress"
        fi
      else
        echo "load function failed"
      fi
    else
      echo "No extract entries in DATA_LOAD_STATUS to trigger data load"
      if [ -f ${inbound}/RequestFile*.complete ] && [ -z "$(ls -A ${archive_fail})" ] && [ "${cnt_file}" == "0" ]
        then
          snowsql -c ${sf_env} -q "insert into ETL.DBA_PROCESS_LOG values (0,'COMPACT_LOAD','COMPACT_LOAD','Loop_Script',0,0,NULL,CURRENT_TIMESTAMP(),CURRENT_TIMESTAMP(),0,0,0)"
          send_mail "Data load completed successfully for attached request" $email_to ${inbound}/RequestFile*.complete
          mv ${inbound}/RequestFile*.complete ${archive_success}
		  touch ${inbound}/validation_cmpct.trig
		  touch ${inbound}/validation_fnd.trig
		  touch ${inbound}/validation_obh.trig
      fi
    fi
  fi
done

